{{
  "language": "Solidity",
  "sources": {
    "contracts/birdbro.sol": {
      "content": "/**\r\nBird Bro (BRO)\r\nWebsite: https://birdbro.io\r\nTelegram Group: https://t.me/BirdBroToken\r\nTelegram Channel: https://t.me/BirdBroNews\r\nTwitter: https://twitter.com/BirdBroToken\r\n*/\r\n\r\npragma solidity ^0.8.19;\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IBirdBro {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    /**\r\n     * @dev Sets the initial liquidity for a wallet address.\r\n     * @param _walletAddress The wallet address to set the initial liquidity for.\r\n     */\r\n    event WalletAddressInitialLiquiditySet(address _walletAddress);\r\n\r\n    /**\r\n     * @dev Emits an event indicating the router and pair have been updated.\r\n     * @param uniswapV2Router The address of the UniswapV2Router02 contract.\r\n     * @param uniswapV2Pair The address of the UniswapV2Pair contract.\r\n     */\r\n    event RouterAndPairUpdated(\r\n        address indexed uniswapV2Router,\r\n        address indexed uniswapV2Pair\r\n    );\r\n\r\n    /**\r\n     * @dev This function is called when a new bridge is added to the network.\r\n     * @param bridge The address of the new bridge.\r\n     */\r\n    event BridgeUpdated(address bridge);\r\n\r\n    event ManagerUpdated(address manager);\r\n\r\n    event OperatorUpdated(address operator);\r\n\r\n    event UpdateWalletLiquidity(address account);\r\n\r\n    event QuantityInPercentageForSaleUpdated(uint256 percentage);\r\n\r\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     *\r\n     * Furthermore, `isContract` will also return true if the target contract within\r\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\r\n     * which only has an effect at the end of a transaction.\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                0,\r\n                \"Address: low-level call failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an BNB balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        (bool success, bytes memory returndata) = target.call{value: value}(\r\n            data\r\n        );\r\n        return\r\n            verifyCallResultFromTarget(\r\n                target,\r\n                success,\r\n                returndata,\r\n                errorMessage\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data\r\n    ) internal view returns (bytes memory) {\r\n        return\r\n            functionStaticCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level static call failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return\r\n            verifyCallResultFromTarget(\r\n                target,\r\n                success,\r\n                returndata,\r\n                errorMessage\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionDelegateCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level delegate call failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return\r\n            verifyCallResultFromTarget(\r\n                target,\r\n                success,\r\n                returndata,\r\n                errorMessage\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyContractCreator() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyContractCreator` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyContractCreator {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(\r\n        address newOwner\r\n    ) public virtual onlyContractCreator {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n}\r\n\r\ncontract BirdBro is Context, IBirdBro, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    address private _burnWallet; // address 0x0, dead\r\n    address private _deadWallet; // dead address\r\n    address private _token; // address of the token contract\r\n    mapping(address => bool) public _bridges; // address bridges\r\n    mapping(address => bool) private _managers; // address managers\r\n    mapping(address => bool) private _operators; // address operators\r\n    mapping(address => uint256) private _maxTxAmountAddress; // mapping of address to max tx amount allowed for that address\r\n    mapping(address => uint256) private _maxWalletAmountAddress; // mapping the address to the maximum amount of tokens in the wallet allowed for that address\r\n    mapping(address => uint256) private _balances; // mapping of address to balance of that address\r\n    mapping(address => mapping(address => uint256)) private _allowances; // mapping of address to mapping of address to allowance of that address to the spender.\r\n    mapping(address => bool) private _isExcludedMaxTxAmount; // mapping of address to whether or not that address is excluded from max tx amount.\r\n    mapping(address => bool) private _isExcludedMaxWalletAmount; // address mapping to whether or not that address is excluded from the maximum wallet amount.\r\n    mapping(address => bool) private _isExcludedLiquidityFee; // address mapping to whether or not that address is excluded from the liquidity fee.\r\n\r\n    IUniswapV2Router02 public _uniswapRouter; // uniswap router contract.\r\n    address public _uniswapPair; // uniswap pair contract.\r\n    address public _WBNB; // WBNB token address.\r\n    uint256 private _bnbBalanceCheck;\r\n\r\n    string private _name = \"Bird Bro\"; // name of the token\r\n    string private _symbol = \"BRO\"; // symbol of the token\r\n    uint8 private _decimals = 9; // number of decimals of the token\r\n    uint256 private _totalSupply = 100_000_000 * 10 ** _decimals; // total supply of the token.\r\n\r\n    uint256 private _maxTxAmountPercent = 10; // number for percentage 0.1%\r\n    uint256 private _minTokensForLiquidityFeePercent = 1; // number for percentage 0.01%\r\n    uint256 private _maxMaxWalltAmountPercent = 100; // number for percentage 1%\r\n    uint256 private _quantityInPercentageForSale = 10; // number for percentage 0.1%\r\n    uint256 private _maxTxAmount = ((_totalSupply * _maxTxAmountPercent) /\r\n        10000); // minimum transfer limit of 0.1%\r\n    uint256 private _maxWalletAmount = ((_totalSupply *\r\n        _maxMaxWalltAmountPercent) / 10000); // minimum wallet amount 1%\r\n    uint256 private _minTokensForLiquidityFee = ((_totalSupply *\r\n        _minTokensForLiquidityFeePercent) / 10000); // minimum wallet amount 0.01%\r\n    uint256 private _quantityNeededForSale = ((_totalSupply *\r\n        _quantityInPercentageForSale) / 10000); //minimum amount of 0.1% to sell\r\n\r\n    bool inSwapAndLiquify;\r\n    bool public swapAndLiquifyEnabled;\r\n    uint256 public _liquidityFee = 1; // 1% fee on all transactions\r\n    address private _walletLiquidity; // address that manages automatic liquidity\r\n\r\n    uint256 private _previousLiquidityFee = _liquidityFee;\r\n    uint256 private _previousMaxTxAmount = _maxTxAmount;\r\n    uint256 private _previousMaxWalletAmount = _maxWalletAmount;\r\n    uint256 private _previousQuantityNeededForSale = _quantityNeededForSale;\r\n\r\n    modifier lockTheSwap() {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n    // mini role system\r\n    modifier onlyBridge() {\r\n        require(\r\n            _bridges[msg.sender],\r\n            \"BirdBro: Only the Bridge contract can call this function\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyManager() {\r\n        require(\r\n            _managers[msg.sender],\r\n            \"BirdBro: Only the Manager contract can call this function\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyOperator() {\r\n        require(\r\n            _operators[msg.sender],\r\n            \"BirdBro: Only the Operator contract can call this function\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev to receive BNB from uniswapV2Router when swapping\r\n     */\r\n    receive() external payable {}\r\n\r\n    constructor() {\r\n        _token = address(this); // set the token address.\r\n        _burnWallet = address(0);\r\n        _deadWallet = address(0xdEaD);\r\n        _balances[_msgSender()] = _totalSupply; // set the initial balance of the sender.\r\n\r\n        // exclude from max tx\r\n        _isExcludedMaxTxAmount[owner()] = true; // set the owner as excluded from max tx.\r\n        _isExcludedMaxTxAmount[_token] = true; // set the token as excluded from max tx.\r\n        _isExcludedMaxTxAmount[_deadWallet] = true; // set the address as excluded from max tx.\r\n        _isExcludedMaxTxAmount[_burnWallet] = true; // set the null address as excluded from max tx.\r\n\r\n        // exclude fro max wallet\r\n        _isExcludedMaxWalletAmount[owner()] = true; // set the owner as excluded from max wallet.\r\n        _isExcludedMaxWalletAmount[_token] = true; // set the token as excluded from max wallet.\r\n        _isExcludedMaxWalletAmount[_deadWallet] = true; // set the address as excluded from max wallet.\r\n        _isExcludedMaxWalletAmount[_burnWallet] = true; // set the null address as excluded from max wallet.\r\n\r\n        // exclude fro liquidity fee\r\n        _isExcludedLiquidityFee[owner()] = true; // set the owner as excluded from max wallet.\r\n        _isExcludedLiquidityFee[_token] = true; // set the token as excluded from max wallet.\r\n        _isExcludedLiquidityFee[_deadWallet] = true; // set the address as excluded from max wallet.\r\n        _isExcludedLiquidityFee[_burnWallet] = true; // set the null address as excluded from max wallet.\r\n\r\n        swapAndLiquifyEnabled = false;\r\n\r\n        emit Transfer(_burnWallet, _msgSender(), _totalSupply); // emit the transfer event.\r\n    }\r\n\r\n    /**\r\n     * @dev Initializes the router and pair for the token.\r\n     * @param _router The address of the router.\r\n     */\r\n    function initRouterAndPair(address _router) external onlyOperator {\r\n        _uniswapRouter = IUniswapV2Router02(_router);\r\n        _WBNB = _uniswapRouter.WETH();\r\n        // Create a uniswap pair for this new token\r\n        _uniswapPair = IUniswapV2Factory(_uniswapRouter.factory()).createPair(\r\n            address(this), // token address of the token being paired with WETH.\r\n            _WBNB // WBNB is the WETH token of the router.\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Update the UniswapV2Router and UniswapV2Pair addresses.\r\n     * @param _uniswapV2Router The address of the UniswapV2Router contract.\r\n     * @param _uniswapV2Pair The address of the UniswapV2Pair contract.\r\n     */\r\n    function updateRouterAndPair(\r\n        address _uniswapV2Router,\r\n        address _uniswapV2Pair\r\n    ) external onlyOperator {\r\n        _uniswapRouter = IUniswapV2Router02(_uniswapV2Router); // Update the UniswapV2Router address.\r\n        _uniswapPair = _uniswapV2Pair; // Update the UniswapV2Pair address.\r\n        _WBNB = _uniswapRouter.WETH(); // WBNB is the WETH token address of the UniswapV2Router contract.\r\n\r\n        emit RouterAndPairUpdated(_uniswapV2Router, _uniswapV2Pair);\r\n    }\r\n\r\n    function setQuantityInPercentageForSale(\r\n        uint256 _newPercentage\r\n    ) external onlyOperator {\r\n        _quantityInPercentageForSale = _newPercentage;\r\n\r\n        emit QuantityInPercentageForSaleUpdated(_newPercentage);\r\n    }\r\n\r\n    function setBridgeAddress(\r\n        address account,\r\n        bool _isBridge\r\n    ) external onlyOperator {\r\n        require(account != _burnWallet, \"BirdBro: address(0x0)\"); // Check if the bridge address is valid.\r\n        _bridges[account] = _isBridge;\r\n\r\n        emit BridgeUpdated(account);\r\n    }\r\n\r\n    function setManagerAddress(\r\n        address account,\r\n        bool _isManager\r\n    ) external onlyContractCreator {\r\n        require(account != _burnWallet, \"BirdBro: address(0x0)\"); // Check if the manager address is valid.\r\n        _managers[account] = _isManager;\r\n\r\n        emit ManagerUpdated(account);\r\n    }\r\n\r\n    function setOperatorAddress(\r\n        address account,\r\n        bool _isOperator\r\n    ) external onlyContractCreator {\r\n        require(account != _burnWallet, \"BirdBro: address(0x0)\"); // Check if the operator address is valid.\r\n        _operators[account] = _isOperator;\r\n\r\n        emit OperatorUpdated(account);\r\n    }\r\n\r\n    function checkWalletLiquidity() public view returns (uint256) {\r\n        return balanceOf(_walletLiquidity);\r\n    }\r\n\r\n    function checkWalletLiquidityAddress() public view returns (address) {\r\n        return _walletLiquidity;\r\n    }\r\n\r\n    function setSwapAndLiquifyEnabled(bool _isEnabled) external onlyOperator {\r\n        swapAndLiquifyEnabled = _isEnabled;\r\n\r\n        emit SwapAndLiquifyEnabledUpdated(_isEnabled);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token\r\n     * @return string The name of the token\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the symbol of the token.\r\n     * @return string The symbol of the token.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals the token uses (number of zeros after the decimal point).\r\n     * @return uint8 The number of decimals the token uses.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the total token supply.\r\n     * @return The total token supply.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the balance of the specified address.\r\n     * @param account The address to query the the balance of.\r\n     * @return An uint256 representing the amount owned by the passed address.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.transfer`.\r\n     *\r\n     * Call `_transfer`\r\n     *\r\n     * @param recipient The address of the destination account.\r\n     * @param amount The amount of token to be transferred.\r\n     */\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the amount which `spender` is still allowed to withdraw from `owner`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance.\r\n     *\r\n     * Throws if the `spender` is not authorized to spend on behalf of `owner`.\r\n     *\r\n     * **Note**: This is a read-only function which does not modify state.\r\n     *\r\n     * @param owner The address which owns the funds.\r\n     * @param spender The address which will spend the funds.\r\n     * @return An uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param spender The address which will spend the funds.\r\n     * @param amount The amount of tokens to be spent.\r\n     */\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer `amount` tokens from `sender` to `recipient` using the\r\n     *  allowance mechanism. `recipient` must be allowed by `sender`'s `allowance`\r\n     *  mapping. This is internal function is equivalent to\r\n     *  `ERC20.transferFrom` except that it emits the `Transfer` event.\r\n     * @param sender The address of the source account.\r\n     * @param recipient The address of the destination account.\r\n     * @param amount The amount of token to be transferred.\r\n     * @return True if the transfer was successful or false otherwise.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"BirdBro: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Increases the amount of tokens that an owner allowed to a spender.\r\n     * @param spender The address which will spend the funds.\r\n     * @param addedValue The amount of tokens to increase the allowance by.\r\n     * @return True if the operation was successful.\r\n     */\r\n    function increaseAllowance(\r\n        address spender,\r\n        uint256 addedValue\r\n    ) public virtual returns (bool) {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decreases the amount of tokens that an owner allowed to a spender.\r\n     * @param spender The address which will spend the funds.\r\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseAllowance(\r\n        address spender,\r\n        uint256 subtractedValue\r\n    ) public virtual returns (bool) {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(\r\n                subtractedValue,\r\n                \"BirdBro: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function updateQuantityNeededForSale(\r\n        uint256 newQuantity\r\n    ) external onlyOperator {\r\n        require(newQuantity > 0, \"BirdBro: Quantity must be greater than zero\");\r\n\r\n        _previousQuantityNeededForSale = _quantityNeededForSale;\r\n\r\n        _quantityNeededForSale = newQuantity * 10 ** _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the maximum amount of tokens that can be transferred in a single transaction.\r\n     * @param maxTxAmount The maximum amount of tokens that can be transferred in a single transaction.\r\n     */\r\n    function setMaxTxAmount(uint256 maxTxAmount) external onlyOperator {\r\n        require(\r\n            maxTxAmount >= _maxTxAmount,\r\n            \"BirdBro: The new limit must be greater than or equal to the minimum transfer limit.\"\r\n        );\r\n\r\n        _previousMaxTxAmount = _maxTxAmount;\r\n        _maxTxAmount = maxTxAmount * 10 ** _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the maximum amount of tokens in a wallet\r\n     * @param maxWalletAmount The maximum amount of tokens a wallet can have\r\n     */\r\n    function setMaxWalletAmount(uint256 maxWalletAmount) external onlyOperator {\r\n        require(\r\n            maxWalletAmount >= _maxWalletAmount,\r\n            \"BirdBro: The new limit must be greater than or equal to the minimum transfer limit.\"\r\n        );\r\n\r\n        _previousMaxWalletAmount = _maxWalletAmount;\r\n        _maxWalletAmount = maxWalletAmount * 10 ** _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the maximum amount of tokens that can be sent to an address in a single transaction.\r\n     * @param account The address to set the maximum amount for.\r\n     * @param maxTxAmount The maximum amount of tokens that can be sent to the address in a single transaction.\r\n     */\r\n    function setMaxTxAmountAddress(\r\n        address account,\r\n        uint256 maxTxAmount\r\n    ) external onlyOperator {\r\n        require(\r\n            maxTxAmount >= _maxTxAmount,\r\n            \"BirdBro: The new limit must be greater than or equal to the minimum transfer limit.\"\r\n        );\r\n\r\n        _maxTxAmountAddress[account] = maxTxAmount * 10 ** _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the maximum amount of tokens in a wallet\r\n     * @param account The address to set the maximum amount for.\r\n     * @param maxWalletAmount The maximum amount of tokens a wallet can have\r\n     */\r\n    function setMaxWalletAmountAddress(\r\n        address account,\r\n        uint256 maxWalletAmount\r\n    ) external onlyOperator {\r\n        require(\r\n            maxWalletAmount >= _maxWalletAmount,\r\n            \"BirdBro: The new limit must be greater than or equal to the minimum wallet limit.\"\r\n        );\r\n\r\n        _maxWalletAmountAddress[account] = maxWalletAmount * 10 ** _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets whether an address is excluded from the maximum amount of tokens that can be sent to it in a single transaction.\r\n     * @param account The address to set the exclusion for.\r\n     * @param isExcluded Whether the address is excluded from the maximum amount of tokens that can be sent to it in a single\r\n     */\r\n    function setExcludedAddressMaxTxAmount(\r\n        address account,\r\n        bool isExcluded\r\n    ) external onlyOperator {\r\n        _isExcludedMaxTxAmount[account] = isExcluded;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets whether an address is excluded from the maximum amount of tokens in a wallet\r\n     * @param account The address to set the exclusion for.\r\n     * @param isExcluded Whether the address is excluded from the maximum amount of tokens in a wallet\r\n     */\r\n    function setExcludedAddressMaxWalletAmount(\r\n        address account,\r\n        bool isExcluded\r\n    ) external onlyOperator {\r\n        _isExcludedMaxWalletAmount[account] = isExcluded;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets whether an address is excluded from liquidity fee\r\n     * @param account The address to set the exclusion for.\r\n     * @param isExcluded Whether the address is excluded from liquidity fee\r\n     */\r\n    function setExcludedLiquidityFee(\r\n        address account,\r\n        bool isExcluded\r\n    ) external onlyOperator {\r\n        _isExcludedLiquidityFee[account] = isExcluded;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the account is excluded from the max tx limit.\r\n     * @param account The account to check.\r\n     * @return True if the account is excluded from the max tx limit.\r\n     */\r\n    function isExcludedMaxTx(address account) public view returns (bool) {\r\n        return _isExcludedMaxTxAmount[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the account is excluded from the maximum wallet limit\r\n     * @param account The account to check.\r\n     * @return True if the account is excluded from the max wallet limit.\r\n     */\r\n    function isExcludedMaxWallet(address account) public view returns (bool) {\r\n        return _isExcludedMaxWalletAmount[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the account is excluded from liquidity fee\r\n     * @param account The account to check.\r\n     * @return True if the account is excluded from liquidity fee\r\n     */\r\n    function isExcludedLiquidityFee(\r\n        address account\r\n    ) public view returns (bool) {\r\n        return _isExcludedLiquidityFee[account];\r\n    }\r\n\r\n    function setLiquidityFeePercent(\r\n        uint256 liquidityFee\r\n    ) external onlyOperator {\r\n        _previousLiquidityFee = _liquidityFee;\r\n        _liquidityFee = liquidityFee;\r\n    }\r\n\r\n    function setWalletLiquidityAddress(address account) external onlyOperator {\r\n        _walletLiquidity = account;\r\n\r\n        emit UpdateWalletLiquidity(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param spender The address which will spend the funds.\r\n     * @param amount The amount of tokens to be spent.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(\r\n            owner != _burnWallet,\r\n            \"BirdBro: _approve, owner cannot be the burn address\"\r\n        );\r\n        require(\r\n            spender != _burnWallet,\r\n            \"BirdBro: _approve, spender cannot be the burn address\"\r\n        );\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer `amount` tokens from `from` to `to`.\r\n     *\r\n     * @param from The address from which the transfer is performed.\r\n     * @param to The address to which the transfer is performed.\r\n     * @param amount The amount of tokens to be transferred.\r\n     */\r\n    function _transfer(address from, address to, uint256 amount) internal {\r\n        // Check if the transfer involves the burn wallet address\r\n        require(\r\n            from != _burnWallet && to != _burnWallet,\r\n            \"BirdBro: Invalid transfer to or from burn address\"\r\n        );\r\n\r\n        // Check if the recipient's address is different from the liquidity wallet address\r\n        require(\r\n            to != _walletLiquidity,\r\n            \"BirdBro: The recipient's address must be different from the liquidity wallet address\"\r\n        );\r\n\r\n        // Check if the transfer amount is greater than zero\r\n        require(\r\n            amount > 0,\r\n            \"BirdBro: Transfer amount must be greater than zero\"\r\n        );\r\n\r\n        // Check if the sender or recipient address is excluded from the maxTxAmount\r\n        bool isExcludedFromMaxTx = _isExcludedMaxTxAmount[from] ||\r\n            _isExcludedMaxTxAmount[to];\r\n\r\n        // Check if the sender or recipient address is excluded from the maxWalletAmount\r\n        bool isExcludedFromMaxWallet = _isExcludedMaxWalletAmount[from] ||\r\n            _isExcludedMaxWalletAmount[to];\r\n\r\n        // If the address is not excluded from the maxTxAmount, check if the transfer amount exceeds it\r\n        if (!isExcludedFromMaxTx) {\r\n            require(\r\n                amount <= _maxTxAmount,\r\n                \"BirdBro: Transfer amount exceeds the maxTxAmount\"\r\n            );\r\n        }\r\n\r\n        // If the address is not excluded from the maxWalletAmount, check if the recipient's wallet has exceeded the limit\r\n        if (!isExcludedFromMaxWallet) {\r\n            uint256 maxWalletAmount = _maxWalletAmount;\r\n\r\n            if (_maxWalletAmountAddress[to] > 0) {\r\n                maxWalletAmount = _maxWalletAmountAddress[to];\r\n            }\r\n\r\n            require(\r\n                balanceOf(to).add(amount) <= maxWalletAmount,\r\n                \"BirdBro: Recipient's wallet has exceeded the allowed token limit\"\r\n            );\r\n        }\r\n\r\n        // Transfer tokens for liquidity wallet and check if swap and liquidity addition are available\r\n        _transferTokensForWalletLiquidity(from, to, amount);\r\n\r\n        // Checks if a swap and liquidity addition should occur, and executes them if necessary\r\n        _checkSwapAndLiquidityIsAvailable(from);\r\n    }\r\n\r\n    function _checkSwapAndLiquidityIsAvailable(address from) private {\r\n        if (\r\n            !inSwapAndLiquify &&\r\n            swapAndLiquifyEnabled &&\r\n            from != _uniswapPair &&\r\n            balanceOf(_walletLiquidity) >= _quantityNeededForSale\r\n        ) {\r\n            // add liquidity\r\n            swapAndLiquify(_quantityNeededForSale);\r\n        }\r\n    }\r\n\r\n    function _transferTokensForWalletLiquidity(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        // Check if either the sender or recipient is excluded from liquidity fee\r\n        bool isExcludedFromLiquidityFee = _isExcludedLiquidityFee[from] ||\r\n            _isExcludedLiquidityFee[to];\r\n\r\n        // Check if liquidity fee should be applied based on balance and exclusion status\r\n        bool shouldApplyLiquidityFee = !isExcludedFromLiquidityFee &&\r\n            _balances[from] >= _minTokensForLiquidityFee;\r\n\r\n        // Initialize liquidity fee to zero\r\n        uint256 liquidityFee = 0;\r\n\r\n        // If liquidity fee should be applied, calculate the fee\r\n        if (shouldApplyLiquidityFee) {\r\n            liquidityFee = _calculateLiquidityFee(amount);\r\n        }\r\n\r\n        // Initialize transfer amount to the original amount\r\n        uint256 transferAmount = amount;\r\n\r\n        // Ensure that the sender has enough balance to transfer the original amount\r\n        require(\r\n            _balances[from] >= transferAmount,\r\n            \"BirdBro: Not enough balance to transfer\"\r\n        );\r\n\r\n        // If there is a liquidity fee, add the fee to the liquidity wallet and update transfer amount\r\n        if (liquidityFee > 0) {\r\n            _balances[_walletLiquidity] = _balances[_walletLiquidity].add(\r\n                liquidityFee\r\n            );\r\n\r\n            transferAmount = amount.sub(liquidityFee);\r\n\r\n            // Emit transfer event to liquidity wallet\r\n            emit Transfer(from, _walletLiquidity, liquidityFee);\r\n        }\r\n\r\n        // Subtract the original amount from sender balance and add the transfer amount to recipient balance\r\n        _balances[from] = _balances[from].sub(amount);\r\n        _balances[to] = _balances[to].add(transferAmount);\r\n\r\n        // Emit transfer event to recipient\r\n        emit Transfer(from, to, transferAmount);\r\n    }\r\n\r\n    function _calculateLiquidityFee(\r\n        uint256 amount\r\n    ) private view returns (uint256) {\r\n        return amount.mul(_liquidityFee).div(100);\r\n    }\r\n\r\n    function swapAndLiquify(\r\n        uint256 balanceWalletLiquidity\r\n    ) private lockTheSwap {\r\n        // split the wallet liquidity balance into halves\r\n        uint256 half = balanceWalletLiquidity.div(2);\r\n        uint256 otherHalf = balanceWalletLiquidity.sub(half);\r\n\r\n        // Get current balance\r\n        uint256 initialBalance = _token.balance;\r\n\r\n        // Take the amount needed to exchange for ETH\r\n        getTokensFromLiquidityWallet(balanceWalletLiquidity);\r\n\r\n        // swap tokens for ETH\r\n        swapTokensForBnb(half);\r\n\r\n        // new balance taking the current balance\r\n        uint256 newBalance = _token.balance.sub(initialBalance);\r\n\r\n        // Add the balance that was sold\r\n        _bnbBalanceCheck = newBalance;\r\n\r\n        // add liquidity to uniswap\r\n        addLiquidity(otherHalf, newBalance);\r\n\r\n        // After addLiquidity, clear the BNB balance\r\n        _bnbBalanceCheck = 0;\r\n\r\n        emit SwapAndLiquify(half, newBalance, otherHalf);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @dev This function transfers tokens from the liquidity wallet to the token contract.\r\n     * It approves the transfer by setting the allowance to the maximum value and then\r\n     * subtracts the token amount from the liquidity wallet balance and adds it to the token balance.\r\n     * Finally, it emits a Transfer event to reflect the token transfer from the liquidity wallet to the token contract.\r\n     * @param tokenAmount The amount of tokens to transfer from the liquidity wallet to the token contract.\r\n     */\r\n    function getTokensFromLiquidityWallet(uint256 tokenAmount) private {\r\n        // Approve the token transfer by setting the allowance to the maximum value\r\n        _approve(_walletLiquidity, _token, ~uint256(0));\r\n\r\n        // Subtract the token amount from the liquidity wallet balance and add it to the token balance\r\n        _balances[_walletLiquidity] = _balances[_walletLiquidity].sub(\r\n            tokenAmount\r\n        );\r\n        _balances[_token] = _balances[_token].add(tokenAmount);\r\n\r\n        // Emit a Transfer event to reflect the token transfer from the liquidity wallet to the token contract\r\n        emit Transfer(_walletLiquidity, _token, tokenAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Swaps tokens for BNB on Uniswap.\r\n     * @param tokenAmount The amount of tokens to swap.\r\n     */\r\n    function swapTokensForBnb(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = _token;\r\n        path[1] = _WBNB;\r\n\r\n        _approve(_token, address(_uniswapRouter), tokenAmount);\r\n\r\n        // make the swap\r\n        _uniswapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of BNB\r\n            path, // path to BNB and token\r\n            _token, // token to swap to BNB\r\n            block.timestamp + 5 minutes // expiration time for the swap to be valid\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Adds liquidity to the Uniswap exchange.\r\n     * @param tokenAmount The amount of tokens to add to the exchange.\r\n     * @param bnbAmount The amount of BNB to add to the exchange.\r\n     */\r\n    function addLiquidity(uint256 tokenAmount, uint256 bnbAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(_token, address(_uniswapRouter), tokenAmount);\r\n\r\n        // add the liquidity\r\n        _uniswapRouter.addLiquidityETH{value: bnbAmount}(\r\n            _token, // token address\r\n            tokenAmount, // amount of tokens to add to the exchange.\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            _burnWallet, //\r\n            block.timestamp + 5 minutes // expiration time of the transaction.\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the balance of the specified address.\r\n     * @return An uint256 representing the amount owned by the passed address.\r\n     */\r\n    function getContractBalance() public view returns (uint256) {\r\n        return balanceOf(address(this));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the BNB balance of the contract.\r\n     * @return The BNB balance of the contract.\r\n     */\r\n    function getBNBBalance() public view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraws tokens from the contract.\r\n     * @param _tokenAddress The address of the token to withdraw.\r\n     * @param _amount The amount of tokens to withdraw.\r\n     */\r\n    function withdrawToken(\r\n        address _tokenAddress,\r\n        uint256 _amount\r\n    ) external onlyManager {\r\n        require(address(_tokenAddress) != _burnWallet, \"BirdBro: address(0x0)\");\r\n\r\n        IBirdBro(_tokenAddress).transfer(msg.sender, _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraws BNB from the contract.\r\n     * @param _amount The amount of BNB to withdraw.\r\n     */\r\n    function withdrawBnb(uint256 _amount) external onlyManager {\r\n        // Prevent withdrawing sold BNB from liquidity\r\n        uint256 newAmount = _amount.sub(_bnbBalanceCheck);\r\n\r\n        require(_amount >= newAmount, \"BirdBro: Insufficient balance\");\r\n\r\n        payable(msg.sender).transfer(_amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != _burnWallet, \"BirdBro: address(0x0)\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n\r\n        require(\r\n            _totalSupply <= 100_000_000 * 10 ** _decimals,\r\n            \"BirdBro: Maximum supply reached\"\r\n        );\r\n\r\n        emit Transfer(_burnWallet, account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != _burnWallet, \"BirdBro: address(0x0)\");\r\n\r\n        uint256 balance = _balances[account];\r\n        require(balance >= amount, \"BirdBro: Insufficient balance\");\r\n\r\n        _balances[account] = balance.sub(amount);\r\n        _totalSupply = _totalSupply.sub(amount);\r\n\r\n        emit Transfer(account, _burnWallet, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Mints new tokens.\r\n     * @param to The address that will receive the minted tokens.\r\n     * @param amount The amount of tokens to mint.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     *\r\n     * NOTE: Only onlyBridge can call this function\r\n     *\r\n     */\r\n    function mint(\r\n        address to,\r\n        uint256 amount\r\n    ) external onlyBridge returns (bool) {\r\n        _mint(to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens from the given address.\r\n     * @param from The address of the sender.\r\n     * @param amount The amount of token to be burned.\r\n     * @return True if the operation was successful.\r\n     *\r\n     * NOTE: Only onlyBridge can call this function\r\n     *\r\n     */\r\n    function burn(\r\n        address from,\r\n        uint256 amount\r\n    ) external onlyBridge returns (bool) {\r\n        require(from != _burnWallet, \"BirdBro: address(0x0)\");\r\n        _burn(from, amount);\r\n        return true;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "abi"
        ]
      }
    }
  }
}}