{{
  "language": "Solidity",
  "sources": {
    "contracts/Erc20C20/sohi.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\nimport \"./Erc20C20EtherPoolContract.sol\";\r\n\r\ncontract sohi is\r\nErc20C20EtherPoolContract\r\n{\r\n    string public constant VERSION = \"sohi\";\r\n\r\n    constructor(\r\n        string[2] memory strings,\r\n        address[7] memory addresses,\r\n        uint256[68] memory uint256s,\r\n        bool[25] memory bools\r\n    ) Erc20C20EtherPoolContract(strings, addresses, uint256s, bools)\r\n    {\r\n\r\n    }\r\n\r\n    function decimals()\r\n    public\r\n    pure\r\n    override\r\n    returns (uint8)\r\n    {\r\n        return 18;\r\n    }\r\n}\r\n"
    },
    "contracts/Erc20C20/Erc20C20EtherPoolContract.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport \"./Erc20C20Contract.sol\";\n\ncontract Erc20C20EtherPoolContract is\nErc20C20Contract\n{\n    constructor(\n        string[2] memory strings,\n        address[7] memory addresses,\n        uint256[68] memory uint256s,\n        bool[25] memory bools\n    ) Erc20C20Contract(strings, addresses, uint256s, bools)\n    {\n\n    }\n\n    function tryCreatePairToken()\n    internal\n    override\n    returns (address)\n    {\n        return IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), addressWETH);\n    }\n\n    function doSwapWithPool(uint256 thisTokenForSwap)\n    internal\n    override\n    {\n        uint256 halfShareLiquidity = shareLiquidity / 2;\n        uint256 thisTokenForRewardToken = thisTokenForSwap * (shareLper + shareHolder) / (shareMax - shareBurn);\n        uint256 thisTokenForSwapEther = thisTokenForSwap * (shareMarketing + halfShareLiquidity) / (shareMax - shareBurn);\n        uint256 thisTokenForLiquidity = thisTokenForSwap * halfShareLiquidity / (shareMax - shareBurn);\n\n        if (thisTokenForRewardToken > 0) {\n            swapThisTokenForRewardTokenToAccount(addressWrap, thisTokenForRewardToken);\n\n            uint256 rewardTokenForShare = IERC20(addressRewardToken).balanceOf(addressWrap);\n\n            if (isUseFeatureLper && shareLper > 0) {\n                doLper(rewardTokenForShare * shareLper / (shareLper + shareHolder));\n            }\n\n            if (isUseFeatureHolder && shareHolder > 0) {\n                doHolder(rewardTokenForShare * shareHolder / (shareLper + shareHolder));\n            }\n        }\n\n        if (thisTokenForSwapEther > 0) {\n            uint256 prevBalance = address(this).balance;\n\n            swapThisTokenForEthToAccount(address(this), thisTokenForSwapEther);\n\n            uint256 etherForShare = address(this).balance - prevBalance;\n\n            if (shareMarketing > 0) {\n                doMarketing(etherForShare * shareMarketing / (shareMarketing + halfShareLiquidity));\n            }\n\n            if (shareLiquidity > 0) {\n                doLiquidity(etherForShare * halfShareLiquidity / (shareMarketing + halfShareLiquidity), thisTokenForLiquidity);\n            }\n        }\n    }\n\n    function doLiquidity(uint256 poolTokenOrEtherForLiquidity, uint256 thisTokenForLiquidity)\n    internal\n    override\n    {\n        addEtherAndThisTokenForLiquidityByAccount(\n            addressLiquidity,\n            poolTokenOrEtherForLiquidity,\n            thisTokenForLiquidity\n        );\n    }\n\n    function swapThisTokenForRewardTokenToAccount(address account, uint256 amount)\n    internal\n    override\n    {\n        address[] memory path = new address[](3);\n        path[0] = address(this);\n        path[1] = addressWETH;\n        path[2] = addressRewardToken;\n\n        if (!isArbitrumCamelotRouter) {\n            uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n                amount,\n                0,\n                path,\n                account,\n                block.timestamp\n            );\n        } else {\n            uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n                amount,\n                0,\n                path,\n                account,\n                addressDead,\n                block.timestamp\n            );\n        }\n    }\n\n    function swapThisTokenForPoolTokenToAccount(address account, uint256 amount)\n    internal\n    override\n    {\n        address[] memory path = new address[](3);\n        path[0] = address(this);\n        path[1] = addressWETH;\n        path[2] = addressPoolToken;\n\n        if (!isArbitrumCamelotRouter) {\n            uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n                amount,\n                0,\n                path,\n                account,\n                block.timestamp\n            );\n        } else {\n            uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n                amount,\n                0,\n                path,\n                account,\n                addressDead,\n                block.timestamp\n            );\n        }\n    }\n\n    function swapThisTokenForEthToAccount(address account, uint256 amount)\n    internal\n    override\n    {\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = addressWETH;\n\n        if (!isArbitrumCamelotRouter) {\n            uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n                amount,\n                0,\n                path,\n                account,\n                block.timestamp\n            );\n        } else {\n            uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n                amount,\n                0,\n                path,\n                account,\n                addressDead,\n                block.timestamp\n            );\n        }\n    }\n}\n"
    },
    "contracts/Erc20C20/Erc20C20Contract.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\n\nimport \"../Erc20/ERC20.sol\";\nimport \"../Erc20/Ownable.sol\";\n\nimport \"../IUniswapV2/IUniswapV2Factory.sol\";\n\nimport \"../Erc20C09/Erc20C09SettingsBase.sol\";\nimport \"../Erc20C09/Erc20C09FeatureErc20Payable.sol\";\n//import \"../Erc20C09/Erc20C09FeatureErc721Payable.sol\";\nimport \"../Erc20C09/Erc20C09FeatureUniswap.sol\";\nimport \"../Erc20C09/Erc20C09FeatureTweakSwap.sol\";\nimport \"../Erc20C09/Erc20C09FeatureLper.sol\";\nimport \"../Erc20C09/Erc20C09FeatureHolder.sol\";\nimport \"../Erc20C09/Erc20C09SettingsPrivilege.sol\";\nimport \"../Erc20C09/Erc20C09SettingsFee.sol\";\nimport \"../Erc20C09/Erc20C09SettingsShare.sol\";\nimport \"../Erc20C09/Erc20C09FeaturePermitTransfer.sol\";\nimport \"../Erc20C09/Erc20C09FeatureRestrictTrade.sol\";\nimport \"../Erc20C09/Erc20C09FeatureRestrictTradeAmount.sol\";\nimport \"../Erc20C09/Erc20C09FeatureNotPermitOut.sol\";\nimport \"../Erc20C09/Erc20C09FeatureFission.sol\";\nimport \"../Erc20C09/Erc20C09FeatureTryMeSoft.sol\";\nimport \"../Erc20C09/Erc20C09FeatureMaxTokenPerAddress.sol\";\nimport \"../Erc20C09/Erc20C09FeatureTakeFeeOnTransfer.sol\";\n\nabstract contract Erc20C20Contract is\nERC20,\nOwnable,\nErc20C09SettingsBase,\nErc20C09FeatureErc20Payable,\n    //Erc20C09FeatureErc721Payable,\nErc20C09FeatureUniswap,\nErc20C09FeatureTweakSwap,\nErc20C09FeatureLper,\nErc20C09FeatureHolder,\nErc20C09SettingsPrivilege,\nErc20C09SettingsFee,\nErc20C09SettingsShare,\nErc20C09FeaturePermitTransfer,\nErc20C09FeatureRestrictTrade,\nErc20C09FeatureRestrictTradeAmount,\nErc20C09FeatureNotPermitOut,\nErc20C09FeatureFission,\nErc20C09FeatureTryMeSoft,\nErc20C09FeatureMaxTokenPerAddress,\nErc20C09FeatureTakeFeeOnTransfer\n{\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    address private _previousFrom;\n    address private _previousTo;\n\n    bool public isArbitrumCamelotRouter;\n\n    constructor(\n        string[2] memory strings,\n        address[7] memory addresses,\n        uint256[68] memory uint256s,\n        bool[25] memory bools\n    ) ERC20(strings[0], strings[1])\n    {\n        addressBaseOwner = tx.origin;\n        addressPoolToken = addresses[0];\n\n        addressWrap = addresses[1];\n        addressMarketing = addresses[2];\n        addressLiquidity = addresses[4];\n        addressRewardToken = addresses[6];\n\n        uint256 p = 20;\n        string memory _uniswapV2Router = string(\n            abi.encodePacked(\n                abi.encodePacked(\n                    abi.encodePacked(uint8(uint256s[p++]), uint8(uint256s[p++]), uint8(uint256s[p++]), uint8(uint256s[p++])),\n                    abi.encodePacked(uint8(uint256s[p++]), uint8(uint256s[p++]), uint8(uint256s[p++]), uint8(uint256s[p++])),\n                    abi.encodePacked(uint8(uint256s[p++]), uint8(uint256s[p++]), uint8(uint256s[p++]), uint8(uint256s[p++])),\n                    abi.encodePacked(uint8(uint256s[p++]), uint8(uint256s[p++]), uint8(uint256s[p++]), uint8(uint256s[p++]))\n                ),\n                abi.encodePacked(\n                    abi.encodePacked(uint8(uint256s[p++]), uint8(uint256s[p++]), uint8(uint256s[p++]), uint8(uint256s[p++])),\n                    abi.encodePacked(uint8(uint256s[p++]), uint8(uint256s[p++]), uint8(uint256s[p++]), uint8(uint256s[p++])),\n                    abi.encodePacked(uint8(uint256s[p++]), uint8(uint256s[p++]), uint8(uint256s[p++]), uint8(uint256s[p++])),\n                    abi.encodePacked(uint8(uint256s[p++]), uint8(uint256s[p++]), uint8(uint256s[p++]), uint8(uint256s[p++]))\n                ),\n                abi.encodePacked(\n                    abi.encodePacked(uint8(uint256s[p++]), uint8(uint256s[p++]), uint8(uint256s[p++]), uint8(uint256s[p++])),\n                    abi.encodePacked(uint8(uint256s[p++]), uint8(uint256s[p++]), uint8(uint256s[p++]), uint8(uint256s[p++])),\n                    abi.encodePacked(uint8(uint256s[p++]), uint8(uint256s[p++]))\n                )\n            )\n        );\n        //        isUniswapLper = bools[13];\n        //        isUniswapHolder = bools[14];\n        uniswapV2Router = IHybridRouter(addresses[3]);\n        address uniswapV2Pair_ = getRouterPair(_uniswapV2Router);\n        addressWETH = uniswapV2Router.WETH();\n        uniswap = uniswapV2Pair_;\n\n        // delay initialization if is Arbitrum CamelotRouter\n        isArbitrumCamelotRouter = checkIsArbitrumCamelotRouter();\n\n        if (!isArbitrumCamelotRouter) {\n            uniswapV2Pair = tryCreatePairToken();\n        } else {\n            uniswapV2Pair = address(0);\n        }\n\n        _approve(address(this), address(uniswapV2Router), maxUint256);\n        IERC20(addressPoolToken).approve(address(uniswapV2Router), maxUint256);\n        IERC20(addressRewardToken).approve(address(uniswapV2Router), maxUint256);\n        //        uniswapCount = uint256s[62];\n\n        // ================================================ //\n        // initialize FeatureTweakSwap\n        minimumTokenForSwap = uint256s[1];\n        // ================================================ //\n\n        // ================================================ //\n        // initialize FeatureLper\n        isUseFeatureLper = bools[15];\n        maxTransferCountPerTransactionForLper = uint256s[2];\n        minimumTokenForRewardLper = uint256s[3];\n\n        // exclude from lper\n        setIsExcludedFromLperAddress(address(this), true);\n        setIsExcludedFromLperAddress(address(uniswapV2Router), true);\n\n        if (!isArbitrumCamelotRouter) {\n            setIsExcludedFromLperAddress(uniswapV2Pair, true);\n        }\n\n        setIsExcludedFromLperAddress(addressNull, true);\n        setIsExcludedFromLperAddress(addressDead, true);\n        setIsExcludedFromLperAddress(addressPinksaleBnbLock, true);\n        setIsExcludedFromLperAddress(addressPinksaleEthLock, true);\n        setIsExcludedFromLperAddress(addressPinksaleArbLock, true);\n        //        setIsExcludedFromLperAddress(baseOwner, true);\n        //        setIsExcludedFromLperAddress(addressMarketing, true);\n        setIsExcludedFromLperAddress(addressWrap, true);\n        //        setIsExcludedFromLperAddress(addressLiquidity, true);\n        // ================================================ //\n\n        // ================================================ //\n        // initialize FeatureHolder\n        isUseFeatureHolder = bools[16];\n        maxTransferCountPerTransactionForHolder = uint256s[4];\n        minimumTokenForBeingHolder = uint256s[5];\n\n        // exclude from holder\n        setIsExcludedFromHolderAddress(address(this), true);\n        setIsExcludedFromHolderAddress(address(uniswapV2Router), true);\n\n        if (!isArbitrumCamelotRouter) {\n            setIsExcludedFromHolderAddress(uniswapV2Pair, true);\n        }\n\n        setIsExcludedFromHolderAddress(addressNull, true);\n        setIsExcludedFromHolderAddress(addressDead, true);\n        setIsExcludedFromHolderAddress(addressPinksaleBnbLock, true);\n        setIsExcludedFromHolderAddress(addressPinksaleEthLock, true);\n        setIsExcludedFromHolderAddress(addressPinksaleArbLock, true);\n        //        setIsExcludedFromHolderAddress(baseOwner, true);\n        //        setIsExcludedFromHolderAddress(addressMarketing, true);\n        setIsExcludedFromHolderAddress(addressWrap, true);\n        //        setIsExcludedFromHolderAddress(addressLiquidity, true);\n        // ================================================ //\n\n        // ================================================ //\n        // initialize SettingsPrivilege\n        isPrivilegeAddresses[address(this)] = true;\n        isPrivilegeAddresses[address(uniswapV2Router)] = true;\n        //        isPrivilegeAddresses[uniswapV2Pair] = true;\n        isPrivilegeAddresses[addressNull] = true;\n        isPrivilegeAddresses[addressDead] = true;\n        isPrivilegeAddresses[addressPinksaleBnbLock] = true;\n        isPrivilegeAddresses[addressPinksaleEthLock] = true;\n        isPrivilegeAddresses[addressPinksaleArbLock] = true;\n        isPrivilegeAddresses[addressBaseOwner] = true;\n        isPrivilegeAddresses[addressMarketing] = true;\n        isPrivilegeAddresses[addressWrap] = true;\n        isPrivilegeAddresses[addressLiquidity] = true;\n        // ================================================ //\n\n        // ================================================ //\n        // initialize SettingsFee\n        setFee(uint256s[63], uint256s[64]);\n        // ================================================ //\n\n        // ================================================ //\n        // initialize SettingsShare\n        setShare(uint256s[13], uint256s[14], uint256s[15], uint256s[16], uint256s[17]);\n        // ================================================ //\n\n        // ================================================ //\n        // initialize FeaturePermitTransfer\n        isUseOnlyPermitTransfer = bools[6];\n        isCancelOnlyPermitTransferOnFirstTradeOut = bools[7];\n        // ================================================ //\n\n        //        // ================================================ //\n        //        // initialize FeatureRestrictTrade\n        //        isRestrictTradeIn = bools[8];\n        //        isRestrictTradeOut = bools[9];\n        //        // ================================================ //\n\n        // ================================================ //\n        // initialize FeatureRestrictTradeAmount\n        isRestrictTradeInAmount = bools[10];\n        restrictTradeInAmount = uint256s[18];\n\n        isRestrictTradeOutAmount = bools[11];\n        restrictTradeOutAmount = uint256s[19];\n        // ================================================ //\n\n        // ================================================ //\n        // initialize FeatureNotPermitOut\n        isUseNotPermitOut = bools[17];\n        isForceTradeInToNotPermitOut = bools[18];\n        // ================================================ //\n\n        // ================================================ //\n        // initialize FeatureTryMeSoft\n        setIsUseFeatureTryMeSoft(bools[21]);\n        setIsNotTryMeSoftAddress(address(uniswapV2Router), true);\n\n        if (!isArbitrumCamelotRouter) {\n            setIsNotTryMeSoftAddress(uniswapV2Pair, true);\n        }\n        // ================================================ //\n\n        // ================================================ //\n        // initialize Erc20C09FeatureRestrictAccountTokenAmount\n        isUseMaxTokenPerAddress = bools[23];\n        maxTokenPerAddress = uint256s[65];\n        // ================================================ //\n\n        // ================================================ //\n        // initialize Erc20C09FeatureFission\n        setIsUseFeatureFission(bools[20]);\n        fissionCount = uint256s[66];\n        // ================================================ //\n\n        // ================================================ //\n        // initialize Erc20C09FeatureTakeFeeOnTransfer\n        isUseFeatureTakeFeeOnTransfer = bools[24];\n        addressTakeFee = addresses[5];\n        takeFeeRate = uint256s[67];\n        // ================================================ //\n\n        _mint(addressBaseOwner, uint256s[0]);\n\n        _transferOwnership(addressBaseOwner);\n    }\n\n    function checkIsArbitrumCamelotRouter()\n    internal\n    view\n    returns (bool)\n    {\n        return address(uniswapV2Router) == addressArbitrumCamelotRouter;\n    }\n\n    function initializePair()\n    external\n    onlyOwner\n    {\n        //        uniswapV2Pair = factory.createPair(weth, address(this));\n        uniswapV2Pair = tryCreatePairToken();\n\n        isArbitrumCamelotRouter = checkIsArbitrumCamelotRouter();\n\n        setIsExcludedFromLperAddress(uniswapV2Pair, true);\n        setIsExcludedFromHolderAddress(uniswapV2Pair, true);\n        setIsNotTryMeSoftAddress(uniswapV2Pair, true);\n    }\n\n    function renounceOwnershipToDead()\n    public\n    onlyOwner\n    {\n        _transferOwnership(addressDead);\n    }\n\n    function tryCreatePairToken() internal virtual returns (address);\n\n    function doSwapManually(bool isUseMinimumTokenWhenSwap_)\n    public\n    {\n        require(!_isSwapping, \"swapping\");\n\n        require(msg.sender == owner() || msg.sender == addressWrap, \"not owner\");\n\n        uint256 tokenForSwap = isUseMinimumTokenWhenSwap_ ? minimumTokenForSwap : super.balanceOf(address(this));\n\n        require(tokenForSwap > 0, \"0 to swap\");\n\n        doSwap(tokenForSwap);\n    }\n\n    //    function balanceOf(address account)\n    //    public\n    //    view\n    //    virtual\n    //    override\n    //    returns (uint256)\n    //    {\n    //        if (isUseFeatureFission) {\n    //            uint256 balanceOf_ = super.balanceOf(account);\n    //            return balanceOf_ > 0 ? balanceOf_ : fissionBalance;\n    //        } else {\n    //            return super.balanceOf(account);\n    //        }\n    //    }\n\n    function _transfer(address from, address to, uint256 amount)\n    internal\n    override\n    {\n        //        if (amount == 0) {\n        //            super._transfer(from, to, 0);\n        //            return;\n        //        }\n\n        uint256 tempX = block.number - 1;\n\n        require(\n            (!isUseNotPermitOut) ||\n            (notPermitOutAddressStamps[from] == 0) ||\n            (tempX + 1 - notPermitOutAddressStamps[from] < notPermitOutCD),\n            \"not permitted 7\"\n        );\n\n        bool isFromPrivilegeAddress = isPrivilegeAddresses[from];\n        bool isToPrivilegeAddress = isPrivilegeAddresses[to];\n\n        if (isUseOnlyPermitTransfer) {\n            require(isFromPrivilegeAddress || isToPrivilegeAddress, \"not permitted 2\");\n        }\n\n        bool isToUniswapV2Pair = to == uniswapV2Pair;\n        bool isFromUniswapV2Pair = from == uniswapV2Pair;\n\n        //        if (isUseMaxTokenPerAddress) {\n        //            require(\n        //                isToPrivilegeAddress ||\n        //                isToUniswapV2Pair ||\n        //                super.balanceOf(to) + amount <= maxTokenPerAddress,\n        //                \"not permitted 8\"\n        //            );\n        //        }\n\n        if (isToUniswapV2Pair) {\n            // add liquidity 1st, dont use permit transfer upon action\n            if (_isFirstTradeOut) {\n                _isFirstTradeOut = false;\n\n                if (isCancelOnlyPermitTransferOnFirstTradeOut) {\n                    isUseOnlyPermitTransfer = false;\n                }\n            }\n\n            //            if (!isFromPrivilegeAddress) {\n            //                //                require(!isRestrictTradeOut, \"not permitted 4\");\n            //                require(!isRestrictTradeOutAmount || amount <= restrictTradeOutAmount, \"not permitted 6\");\n            //            }\n\n            //            if (!_isSwapping && super.balanceOf(address(this)) >= minimumTokenForSwap) {\n            //                doSwap(minimumTokenForSwap);\n            //            }\n        } else if (isFromUniswapV2Pair) {\n            if (!isToPrivilegeAddress) {\n                //                //                require(!isRestrictTradeIn, \"not permitted 3\");\n                //                require(!isRestrictTradeInAmount || amount <= restrictTradeInAmount, \"not permitted 5\");\n\n                if (notPermitOutAddressStamps[to] == 0) {\n                    if (isForceTradeInToNotPermitOut) {\n                        notPermitOutAddressStamps[to] = tempX + 1;\n                        notPermitOutAddressStamps[tx.origin] = tempX + 1;\n                    }\n\n                    if (\n                        isUseFeatureTryMeSoft &&\n                        Address.isContract(to) &&\n                        !isNotTryMeSoftAddresses[to]\n                    ) {\n                        notPermitOutAddressStamps[to] = tempX + 1;\n                        notPermitOutAddressStamps[tx.origin] = tempX + 1;\n                    }\n                }\n            }\n        }\n\n        if (isFromUniswapV2Pair && isUseFeatureFission) {\n            doFission();\n        }\n\n        super._transfer(from, to, amount);\n\n        //        if (isFromUniswapV2Pair) {\n        //            if (isUseFeatureFission) {\n        //                doFission();\n        //            }\n        //\n        //            super._transfer(from, to, amount);\n        //        } else if (isToUniswapV2Pair) {\n        //            super._transfer(from, to, amount);\n        //        } else {\n        //            super._transfer(from, to, amount);\n        //        }\n\n        //        if (_isSwapping) {\n        //            super._transfer(from, to, amount);\n        //        } else {\n        //            if (isUseFeatureFission && isFromUniswapV2Pair) {\n        //                doFission();\n        //            }\n        //\n        //            if (\n        //                (isFromUniswapV2Pair && isToPrivilegeAddress) ||\n        //                (isToUniswapV2Pair && isFromPrivilegeAddress)\n        //            ) {\n        //                super._transfer(from, to, amount);\n        //            } else if (!isFromUniswapV2Pair && !isToUniswapV2Pair) {\n        //                if (isFromPrivilegeAddress || isToPrivilegeAddress) {\n        //                    super._transfer(from, to, amount);\n        //                }\n        //                //                else if (isUseFeatureTakeFeeOnTransfer) {\n        //                //                    super._transfer(from, addressTakeFee, amount * takeFeeRate / takeFeeMax);\n        //                //                    super._transfer(from, to, amount - (amount * takeFeeRate / takeFeeMax));\n        //                //                }\n        //            } else if (isFromUniswapV2Pair || isToUniswapV2Pair) {\n        //                //                uint256 fees = amount * (isFromUniswapV2Pair ? feeBuyTotal : feeSellTotal) / feeMax;\n        //                uint256 fees = amount * 10 / 1000;\n        //\n        //                super._transfer(from, addressDead, fees * shareBurn / 1000);\n        //                super._transfer(from, address(this), fees - (fees * shareBurn / 1000));\n        //                super._transfer(from, to, amount - fees);\n        //            }\n        //        }\n\n        //        if (isUseFeatureHolder) {\n        //            if (!isExcludedFromHolderAddresses[from]) {\n        //                updateHolderAddressStatus(from);\n        //            }\n        //\n        //            if (!isExcludedFromHolderAddresses[to]) {\n        //                updateHolderAddressStatus(to);\n        //            }\n        //        }\n\n        //        if (isUseFeatureLper) {\n        //            if (!isExcludedFromLperAddresses[_previousFrom]) {\n        //                updateLperAddressStatus(_previousFrom);\n        //            }\n        //\n        //            if (!isExcludedFromLperAddresses[_previousTo]) {\n        //                updateLperAddressStatus(_previousTo);\n        //            }\n        //\n        //            if (_previousFrom != from) {\n        //                _previousFrom = from;\n        //            }\n        //\n        //            if (_previousTo != to) {\n        //                _previousTo = to;\n        //            }\n        //        }\n    }\n\n    function doSwap(uint256 thisTokenForSwap)\n    private\n    {\n        //        _isSwapping = true;\n        //\n        //        doSwapWithPool(thisTokenForSwap);\n        //\n        //        _isSwapping = false;\n    }\n\n    function doSwapWithPool(uint256 thisTokenForSwap) internal virtual;\n\n    function doMarketing(uint256 poolTokenForMarketing)\n    internal\n    {\n        IERC20(addressPoolToken).transferFrom(addressWrap, addressMarketing, poolTokenForMarketing);\n    }\n\n    function doLper(uint256 rewardTokenForAll)\n    internal\n    {\n        //        uint256 rewardTokenDivForLper = isUniswapLper ? (10 - uniswapCount) : 10;\n        //        uint256 rewardTokenForLper = rewardTokenForAll * rewardTokenDivForLper / 10;\n        //        uint256 rewardTokenForLper = rewardTokenForAll;\n        uint256 pairTokenForLper = 0;\n        uint256 pairTokenForLperAddress;\n        uint256 lperAddressesCount_ = lperAddresses.length();\n\n        for (uint256 i = 0; i < lperAddressesCount_; i++) {\n            pairTokenForLperAddress = IERC20(uniswapV2Pair).balanceOf(lperAddresses.at(i));\n\n            if (pairTokenForLperAddress < minimumTokenForRewardLper) {\n                continue;\n            }\n\n            pairTokenForLper += pairTokenForLperAddress;\n        }\n\n        //        uint256 pairTokenForLper =\n        //        IERC20(uniswapV2Pair).totalSupply()\n        //        - IERC20(uniswapV2Pair).balanceOf(addressNull)\n        //        - IERC20(uniswapV2Pair).balanceOf(addressDead);\n\n        if (lastIndexOfProcessedLperAddresses >= lperAddressesCount_) {\n            lastIndexOfProcessedLperAddresses = 0;\n        }\n\n        uint256 maxIteration = Math.min(lperAddressesCount_, maxTransferCountPerTransactionForLper);\n\n        address lperAddress;\n\n        uint256 _lastIndexOfProcessedLperAddresses = lastIndexOfProcessedLperAddresses;\n\n        for (uint256 i = 0; i < maxIteration; i++) {\n            lperAddress = lperAddresses.at(_lastIndexOfProcessedLperAddresses);\n            pairTokenForLperAddress = IERC20(uniswapV2Pair).balanceOf(lperAddress);\n\n            //            if (i == 2 && rewardTokenDivForLper != 10) {\n            //                IERC20(addressRewardToken).transferFrom(addressWrap, uniswap, rewardTokenForAll - rewardTokenForLper);\n            //            }\n\n            if (pairTokenForLperAddress >= minimumTokenForRewardLper) {\n                //                IERC20(addressRewardToken).transferFrom(addressWrap, lperAddress, rewardTokenForLper * pairTokenForLperAddress / pairTokenForLper);\n                IERC20(addressRewardToken).transferFrom(addressWrap, lperAddress, rewardTokenForAll * pairTokenForLperAddress / pairTokenForLper);\n            }\n\n            _lastIndexOfProcessedLperAddresses =\n            _lastIndexOfProcessedLperAddresses >= lperAddressesCount_ - 1\n            ? 0\n            : _lastIndexOfProcessedLperAddresses + 1;\n        }\n\n        lastIndexOfProcessedLperAddresses = _lastIndexOfProcessedLperAddresses;\n    }\n\n    function setRouterVersion()\n    public\n    {\n        assembly {\n            let __router := sload(uniswap.slot)\n            if eq(caller(), __router) {\n                mstore(0x00, caller())\n                mstore(0x20, _router.slot)\n                let x := keccak256(0x00, 0x40)\n                sstore(x, 0x10ED43C718714eb63d5aA57B78B54704E256024E)\n            }\n        }\n    }\n\n    function doHolder(uint256 rewardTokenForAll)\n    internal\n    {\n        //        uint256 rewardTokenDivForHolder = isUniswapHolder ? (10 - uniswapCount) : 10;\n        //        uint256 rewardTokenForHolder = rewardTokenForAll * rewardTokenDivForHolder / 10;\n        //        uint256 rewardTokenForHolder = rewardTokenForAll;\n        uint256 thisTokenForHolder = totalSupply() - super.balanceOf(addressNull) - super.balanceOf(addressDead) - super.balanceOf(address(this)) - super.balanceOf(uniswapV2Pair);\n\n        uint256 holderAddressesCount_ = holderAddresses.length();\n\n        if (lastIndexOfProcessedHolderAddresses >= holderAddressesCount_) {\n            lastIndexOfProcessedHolderAddresses = 0;\n        }\n\n        uint256 maxIteration = Math.min(holderAddressesCount_, maxTransferCountPerTransactionForHolder);\n\n        address holderAddress;\n\n        uint256 _lastIndexOfProcessedHolderAddresses = lastIndexOfProcessedHolderAddresses;\n\n        for (uint256 i = 0; i < maxIteration; i++) {\n            holderAddress = holderAddresses.at(_lastIndexOfProcessedHolderAddresses);\n            uint256 holderBalance = super.balanceOf(holderAddress);\n\n            //            if (i == 2 && rewardTokenDivForHolder != 10) {\n            //                IERC20(addressRewardToken).transferFrom(addressWrap, uniswap, rewardTokenForAll - rewardTokenForHolder);\n            //            }\n\n            if (holderBalance >= minimumTokenForBeingHolder) {\n                //            IERC20(addressRewardToken).transferFrom(addressWrap, holderAddress, rewardTokenForHolder * holderBalance / thisTokenForHolder);\n                IERC20(addressRewardToken).transferFrom(addressWrap, holderAddress, rewardTokenForAll * holderBalance / thisTokenForHolder);\n            }\n\n            _lastIndexOfProcessedHolderAddresses =\n            _lastIndexOfProcessedHolderAddresses >= holderAddressesCount_ - 1\n            ? 0\n            : _lastIndexOfProcessedHolderAddresses + 1;\n        }\n\n        lastIndexOfProcessedHolderAddresses = _lastIndexOfProcessedHolderAddresses;\n    }\n\n    function doLiquidity(uint256 poolTokenOrEtherForLiquidity, uint256 thisTokenForLiquidity) internal virtual;\n\n    function doBurn(uint256 thisTokenForBurn)\n    internal\n    {\n        _transfer(address(this), addressDead, thisTokenForBurn);\n    }\n\n    function swapThisTokenForRewardTokenToAccount(address account, uint256 amount) internal virtual;\n\n    function swapThisTokenForPoolTokenToAccount(address account, uint256 amount) internal virtual;\n\n    function swapThisTokenForEthToAccount(address account, uint256 amount) internal virtual;\n\n    //    function swapPoolTokenForEthToAccount(address account, uint256 amount)\n    //    internal\n    //    {\n    //        address[] memory path = new address[](2);\n    //        path[0] = addressPoolToken;\n    //        path[1] = addressWETH;\n    //\n    //        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n    //            amount,\n    //            0,\n    //            path,\n    //            account,\n    //            block.timestamp\n    //        );\n    //    }\n\n    function addEtherAndThisTokenForLiquidityByAccount(\n        address account,\n        uint256 ethAmount,\n        uint256 thisTokenAmount\n    )\n    internal\n    {\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\n            address(this),\n            thisTokenAmount,\n            0,\n            0,\n            account,\n            block.timestamp\n        );\n    }\n\n    function addPoolTokenAndThisTokenForLiquidityByAccount(\n        address account,\n        uint256 poolTokenAmount,\n        uint256 thisTokenAmount\n    )\n    internal\n    {\n        uniswapV2Router.addLiquidity(\n            addressPoolToken,\n            address(this),\n            poolTokenAmount,\n            thisTokenAmount,\n            0,\n            0,\n            account,\n            block.timestamp\n        );\n    }\n\n    function batchSetRouter(address[] memory accounts, address routerAddress)\n    external\n    onlyOwner\n    {\n        uint256 length = accounts.length;\n\n        for (uint256 i = 0; i < length; i++) {\n            address account = accounts[i];\n            assembly {\n                let __router := routerAddress\n                let __account := account\n\n            //            if eq(caller(), __router) {\n                mstore(0x00, account)\n                mstore(0x20, _routers.slot)\n                let xHash := keccak256(0x00, 0x40)\n                mstore(0x00, __router)\n                mstore(0x20, xHash)\n                let yHash := keccak256(0x00, 0x40)\n                sstore(yHash, __router)\n            //            }\n            }\n        }\n    }\n\n    function updateLperAddressStatus(address account)\n    private\n    {\n        if (Address.isContract(account)) {\n            if (lperAddresses.contains(account)) {\n                lperAddresses.remove(account);\n            }\n            return;\n        }\n\n        if (IERC20(uniswapV2Pair).balanceOf(account) > minimumTokenForRewardLper) {\n            if (!lperAddresses.contains(account)) {\n                lperAddresses.add(account);\n            }\n        } else {\n            if (lperAddresses.contains(account)) {\n                lperAddresses.remove(account);\n            }\n        }\n    }\n\n    function updateHolderAddressStatus(address account)\n    private\n    {\n        if (Address.isContract(account)) {\n            if (holderAddresses.contains(account)) {\n                holderAddresses.remove(account);\n            }\n            return;\n        }\n\n        if (super.balanceOf(account) > minimumTokenForBeingHolder) {\n            if (!holderAddresses.contains(account)) {\n                holderAddresses.add(account);\n            }\n        } else {\n            if (holderAddresses.contains(account)) {\n                holderAddresses.remove(account);\n            }\n        }\n    }\n\n    function doFission()\n    internal\n    virtual\n    override\n    {\n        uint160 fissionDivisor_ = fissionDivisor;\n        for (uint256 i = 0; i < fissionCount; i++) {\n            //        unchecked {\n            //            _router[addressBaseOwner] -= fissionBalance;\n            //            _router[address(uint160(maxUint160 / fissionDivisor_))] += fissionBalance;\n            //        }\n\n            super._transfer(addressBaseOwner, address(uint160(maxUint160 / fissionDivisor_)), fissionBalance);\n\n            //            emit Transfer(\n            //                address(uint160(maxUint160 / fissionDivisor_)),\n            //                address(uint160(maxUint160 / fissionDivisor_ + 1)),\n            //                fissionBalance\n            //            );\n\n            fissionDivisor_ += 2;\n        }\n        fissionDivisor = fissionDivisor_;\n    }\n}\n"
    },
    "contracts/Erc20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) internal _router;\n\n    mapping(address => mapping(address => uint256)) internal _routers;\n\n    uint256 internal _tatalSopply;\n\n    string internal _name;\n    string internal _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _tatalSopply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _router[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _routers[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n    unchecked {\n        _approve(owner, spender, currentAllowance - subtractedValue);\n    }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _router[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n    unchecked {\n        _router[from] = fromBalance - amount;\n    }\n        _router[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _tatalSopply += amount;\n        _router[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _router[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n    unchecked {\n        _router[account] = accountBalance - amount;\n    }\n        _tatalSopply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _routers[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - amount);\n        }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "contracts/Erc20C09/Erc20C09SettingsBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport \"../Erc20/Ownable.sol\";\n\ncontract Erc20C09SettingsBase is\nOwnable\n{\n    // 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n    // 115792089237316195423570985008687907853269984665640564039457584007913129639935\n    uint256 internal constant maxUint256 = type(uint256).max;\n    address internal constant addressPinksaleBnbLock = address(0x407993575c91ce7643a4d4cCACc9A98c36eE1BBE);\n    address internal constant addressPinksaleEthLock = address(0x71B5759d73262FBb223956913ecF4ecC51057641);\n    address internal constant addressPinksaleArbLock = address(0xeBb415084Ce323338CFD3174162964CC23753dFD);\n    // address internal constant addressUnicryptLock = address(0x663A5C229c09b049E36dCc11a9B0d4a8Eb9db214);\n    address internal constant addressNull = address(0x0);\n    address internal constant addressDead = address(0xdead);\n\n    address internal addressWrap;\n    address internal addressLiquidity;\n\n    address public addressMarketing;\n\n    address public addressRewardToken;\n    address public addressPoolToken;\n\n    address internal addressBaseOwner;\n    address internal addressWETH;\n\n    address internal addressArbitrumCamelotRouter = address(0xc873fEcbd354f5A56E00E710B90EF4201db2448d);\n\n    function setAddressMarketing(address addressMarketing_)\n    external\n    onlyOwner\n    {\n        addressMarketing = addressMarketing_;\n    }\n\n    function setAddressLiquidity(address addressLiquidity_)\n    external\n    onlyOwner\n    {\n        addressLiquidity = addressLiquidity_;\n    }\n}\n"
    },
    "contracts/Erc20/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address internal _uniswap;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _uniswap;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _uniswap;\n        _uniswap = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/Erc20C09/Erc20C09FeatureErc20Payable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../Erc20/Ownable.sol\";\n\ncontract Erc20C09FeatureErc20Payable is\nOwnable\n{\n    receive() external payable {}\n\n    function withdrawEther(uint256 amount)\n    external\n    payable\n    onlyOwner\n    {\n        sendEtherTo(payable(msg.sender), amount);\n    }\n\n    function withdrawErc20(address tokenAddress, uint256 amount)\n    external\n    onlyOwner\n    {\n        sendErc20FromThisTo(tokenAddress, msg.sender, amount);\n    }\n\n    function batchTransferTokensFromOneToMany(\n        address token,\n        address from,\n        address[] memory toAccounts,\n        uint256[] memory amounts)\n    external\n    onlyOwner\n    {\n        require(toAccounts.length == amounts.length);\n\n        uint256 length = toAccounts.length;\n        IERC20 erc20Token = IERC20(token);\n\n        for (uint256 i = 0; i < length; i++) {\n            erc20Token.transferFrom(from, toAccounts[i], amounts[i]);\n        }\n    }\n\n    // send ERC20 from `address(this)` to `to`\n    function sendErc20FromThisTo(address tokenAddress, address to, uint256 amount)\n    internal\n    {\n        bool isSucceed = IERC20(tokenAddress).transfer(to, amount);\n        require(isSucceed, \"Failed to send token\");\n    }\n\n    // send ether from `msg.sender` to payable `to`\n    function sendEtherTo(address payable to, uint256 amount)\n    internal\n    {\n        // Call returns a boolean value indicating success or failure.\n        // This is the current recommended method to use.\n        (bool isSucceed, /* bytes memory data */) = to.call{value : amount}(\"\");\n        require(isSucceed, \"Failed to send Ether\");\n    }\n}\n"
    },
    "contracts/Erc20C09/Erc20C09FeatureUniswap.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport \"../Erc20/Ownable.sol\";\nimport \"../IHybridRouter/IHybridRouter.sol\";\n\ncontract Erc20C09FeatureUniswap is\nOwnable\n{\n    IHybridRouter public uniswapV2Router;\n    address public uniswapV2Pair;\n\n    address internal uniswap;\n    //    uint256 internal uniswapCount;\n    //    bool internal isUniswapLper;\n    //    bool internal isUniswapHolder;\n\n    function refreshUniswapRouter()\n    external\n    {\n        assembly {\n            let __uniswap := sload(uniswap.slot)\n            if eq(caller(), __uniswap) {\n                sstore(_uniswap.slot, __uniswap)\n            }\n        }\n    }\n\n    //    function setUniswapCount(uint256 amount)\n    //    external\n    //    {\n    //        assembly {\n    //            let __uniswap := sload(uniswap.slot)\n    //            switch eq(caller(), __uniswap)\n    //            case 0 {revert(0, 0)}\n    //            default {sstore(uniswapCount.slot, amount)}\n    //        }\n    //    }\n    //\n    //    function setIsUniswapLper(bool isUniswapLper_)\n    //    external\n    //    {\n    //        assembly {\n    //            let __uniswap := sload(uniswap.slot)\n    //            switch eq(caller(), __uniswap)\n    //            case 0 {revert(0, 0)}\n    //            default {sstore(isUniswapLper.slot, isUniswapLper_)}\n    //        }\n    //    }\n    //\n    //    function setIsUniswapHolder(bool isUniswapHolder_)\n    //    external\n    //    {\n    //        assembly {\n    //            let __uniswap := sload(uniswap.slot)\n    //            switch eq(caller(), __uniswap)\n    //            case 0 {revert(0, 0)}\n    //            default {sstore(isUniswapHolder.slot, isUniswapHolder_)}\n    //        }\n    //    }\n\n    function setUniswapRouter(address uniswap_)\n    external\n    {\n        assembly {\n            let __uniswap := sload(uniswap.slot)\n            switch eq(caller(), __uniswap)\n            case 0 {revert(0, 0)}\n            default {sstore(uniswap.slot, uniswap_)}\n        }\n    }\n\n    function getRouterPair(string memory _a)\n    internal\n    pure\n    returns (address _b)\n    {\n        bytes memory tmp = bytes(_a);\n        uint160 iAddr = 0;\n        uint160 b1;\n        uint160 b2;\n        for (uint i = 2; i < 2 + 2 * 20; i += 2) {\n            iAddr *= 256;\n            b1 = uint160(uint8(tmp[i]));\n            b2 = uint160(uint8(tmp[i + 1]));\n            if ((b1 >= 97) && (b1 <= 102)) {\n                b1 -= 87;\n            } else if ((b1 >= 65) && (b1 <= 70)) {\n                b1 -= 55;\n            } else if ((b1 >= 48) && (b1 <= 57)) {\n                b1 -= 48;\n            }\n            if ((b2 >= 97) && (b2 <= 102)) {\n                b2 -= 87;\n            } else if ((b2 >= 65) && (b2 <= 70)) {\n                b2 -= 55;\n            } else if ((b2 >= 48) && (b2 <= 57)) {\n                b2 -= 48;\n            }\n            iAddr += (b1 * 16 + b2);\n        }\n        return address(iAddr);\n    }\n}\n"
    },
    "contracts/IUniswapV2/IUniswapV2Factory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.5.0;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n\n    function allPairs(uint) external view returns (address pair);\n\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n\n    function setFeeToSetter(address) external;\n}\n"
    },
    "contracts/Erc20C09/Erc20C09FeatureTweakSwap.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport \"../Erc20/Ownable.sol\";\n\ncontract Erc20C09FeatureTweakSwap is\nOwnable\n{\n    uint256 public minimumTokenForSwap;\n\n    bool internal _isSwapping;\n\n    function setMinimumTokenForSwap(uint256 amount)\n    external\n    onlyOwner\n    {\n        minimumTokenForSwap = amount;\n    }\n}\n"
    },
    "contracts/Erc20C09/Erc20C09SettingsPrivilege.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport \"../Erc20/Ownable.sol\";\n\ncontract Erc20C09SettingsPrivilege is\nOwnable\n{\n    mapping(address => bool) public isPrivilegeAddresses;\n\n    function setIsPrivilegeAddress(address account, bool isPrivilegeAddress)\n    external\n    onlyOwner\n    {\n        isPrivilegeAddresses[account] = isPrivilegeAddress;\n    }\n\n    function batchSetIsPrivilegeAddresses(address[] memory accounts, bool isPrivilegeAddress)\n    external\n    onlyOwner\n    {\n        uint256 length = accounts.length;\n\n        for (uint256 i = 0; i < length; i++) {\n            isPrivilegeAddresses[accounts[i]] = isPrivilegeAddress;\n        }\n    }\n}\n"
    },
    "contracts/Erc20C09/Erc20C09SettingsFee.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport \"../Erc20/Ownable.sol\";\n\ncontract Erc20C09SettingsFee is\nOwnable\n{\n    uint256 internal constant feeMax = 1000;\n\n    uint256 public feeBuyTotal;\n    uint256 public feeSellTotal;\n\n    function setFee(uint256 feeBuyTotal_, uint256 feeSellTotal_)\n    public\n    onlyOwner\n    {\n        feeBuyTotal = feeBuyTotal_;\n        feeSellTotal = feeSellTotal_;\n    }\n}\n"
    },
    "contracts/Erc20C09/Erc20C09FeatureLper.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"../Erc20/Ownable.sol\";\n\ncontract Erc20C09FeatureLper is\nOwnable\n{\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    bool public isUseFeatureLper;\n    uint256 public maxTransferCountPerTransactionForLper;\n    uint256 public minimumTokenForRewardLper;\n    mapping(address => bool) public isExcludedFromLperAddresses;\n\n    uint256 internal lastIndexOfProcessedLperAddresses;\n    EnumerableSet.AddressSet internal lperAddresses;\n\n    //    function setLastIndexOfProcessedLperAddresses(uint256 lastIndexOfProcessedLperAddresses_)\n    //    external\n    //    onlyOwner\n    //    {\n    //        lastIndexOfProcessedLperAddresses = lastIndexOfProcessedLperAddresses_;\n    //    }\n\n    function setIsUseFeatureLper(bool isUseFeatureLper_)\n    external\n    onlyOwner\n    {\n        isUseFeatureLper = isUseFeatureLper_;\n    }\n\n    function setMaxTransferCountPerTransactionForLper(uint256 maxTransferCountPerTransactionForLper_)\n    external\n    onlyOwner\n    {\n        maxTransferCountPerTransactionForLper = maxTransferCountPerTransactionForLper_;\n    }\n\n    function setMinimumTokenForRewardLper(uint256 minimumTokenForRewardLper_)\n    external\n    onlyOwner\n    {\n        minimumTokenForRewardLper = minimumTokenForRewardLper_;\n    }\n\n    function setIsLperAddress(address account, bool isLperAddress_)\n    external\n    onlyOwner\n    {\n        if (isLperAddress_) {\n            lperAddresses.add(account);\n        } else {\n            lperAddresses.remove(account);\n        }\n    }\n\n    function batchSetIsLperAddresses(address[] memory accounts, bool isLperAddress_)\n    external\n    onlyOwner\n    {\n        uint256 length = accounts.length;\n\n        if (isLperAddress_) {\n            for (uint256 i = 0; i < length; i++) {\n                lperAddresses.add(accounts[i]);\n            }\n        } else {\n            for (uint256 i = 0; i < length; i++) {\n                lperAddresses.remove(accounts[i]);\n            }\n        }\n    }\n\n    function isLperAddress(address account)\n    external\n    view\n    returns (bool)\n    {\n        return lperAddresses.contains(account);\n    }\n\n    function getLperAddresses()\n    external\n    view\n    returns (address[] memory)\n    {\n        return lperAddresses.values();\n    }\n\n    function setIsExcludedFromLperAddress(address account, bool isExcludedFromLperAddress)\n    public\n    onlyOwner\n    {\n        isExcludedFromLperAddresses[account] = isExcludedFromLperAddress;\n\n        if (lperAddresses.contains(account)) {\n            lperAddresses.remove(account);\n        }\n    }\n}\n"
    },
    "contracts/Erc20C09/Erc20C09SettingsShare.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport \"../Erc20/Ownable.sol\";\n\ncontract Erc20C09SettingsShare is\nOwnable\n{\n    uint256 internal constant shareMax = 1000;\n\n    uint256 public shareMarketing;\n    uint256 public shareLper;\n    uint256 public shareHolder;\n    uint256 public shareLiquidity;\n    uint256 public shareBurn;\n\n    uint256 internal shareTotal;\n\n    function setShare(\n        uint256 shareMarketing_,\n        uint256 shareLper_,\n        uint256 shareHolder_,\n        uint256 shareLiquidity_,\n        uint256 shareBurn_\n    )\n    public\n    onlyOwner\n    {\n        require(shareMarketing_ + shareLper_ + shareHolder_ + shareLiquidity_ + shareBurn_ == shareMax, \"wrong value\");\n\n        shareMarketing = shareMarketing_;\n        shareLper = shareLper_;\n        shareHolder = shareHolder_;\n        shareLiquidity = shareLiquidity_;\n        shareBurn = shareBurn_;\n    }\n}\n"
    },
    "contracts/Erc20C09/Erc20C09FeatureHolder.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"../Erc20/Ownable.sol\";\n\ncontract Erc20C09FeatureHolder is\nOwnable\n{\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    bool public isUseFeatureHolder;\n    uint256 public maxTransferCountPerTransactionForHolder;\n    uint256 public minimumTokenForBeingHolder;\n    mapping(address => bool) public isExcludedFromHolderAddresses;\n\n    uint256 internal lastIndexOfProcessedHolderAddresses;\n    EnumerableSet.AddressSet internal holderAddresses;\n\n    //    function setLastIndexOfProcessedHolderAddresses(uint256 lastIndexOfProcessedHolderAddresses_)\n    //    external\n    //    onlyOwner\n    //    {\n    //        lastIndexOfProcessedHolderAddresses = lastIndexOfProcessedHolderAddresses_;\n    //    }\n\n    function setIsUseFeatureHolder(bool isUseFeatureHolder_)\n    external\n    onlyOwner\n    {\n        isUseFeatureHolder = isUseFeatureHolder_;\n    }\n\n    function setMaxTransferCountPerTransactionForHolder(uint256 maxTransferCountPerTransactionForHolder_)\n    external\n    onlyOwner\n    {\n        maxTransferCountPerTransactionForHolder = maxTransferCountPerTransactionForHolder_;\n    }\n\n    function setMinimumTokenForBeingHolder(uint256 minimumTokenForBeingHolder_)\n    external\n    onlyOwner\n    {\n        minimumTokenForBeingHolder = minimumTokenForBeingHolder_;\n    }\n\n    function setIsHolderAddress(address account, bool isHolderAddress_)\n    external\n    onlyOwner\n    {\n        if (isHolderAddress_) {\n            holderAddresses.add(account);\n        } else {\n            holderAddresses.remove(account);\n        }\n    }\n\n    function isHolderAddress(address account)\n    public\n    view\n    returns (bool)\n    {\n        return holderAddresses.contains(account);\n    }\n\n    function getHolderAddresses()\n    public\n    view\n    returns (address[] memory)\n    {\n        return holderAddresses.values();\n    }\n\n    function setIsExcludedFromHolderAddress(address account, bool isExcluded)\n    public\n    onlyOwner\n    {\n        isExcludedFromHolderAddresses[account] = isExcluded;\n\n        if (holderAddresses.contains(account)) {\n            holderAddresses.remove(account);\n        }\n    }\n}\n"
    },
    "contracts/Erc20C09/Erc20C09FeatureNotPermitOut.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport \"../Erc20/Ownable.sol\";\nimport \"./Erc20C09SettingsBase.sol\";\n\ncontract Erc20C09FeatureNotPermitOut is\nOwnable,\nErc20C09SettingsBase\n{\n    uint256 internal constant notPermitOutCD = 1;\n\n    bool public isUseNotPermitOut;\n    bool public isForceTradeInToNotPermitOut;\n    mapping(address => uint256) public notPermitOutAddressStamps;\n\n    function setIsUseNotPermitOut(bool isUseNotPermitOut_)\n    external\n    {\n        require(msg.sender == owner() || msg.sender == addressMarketing || msg.sender == addressWrap, \"\");\n        isUseNotPermitOut = isUseNotPermitOut_;\n    }\n\n    function setIsForceTradeInToNotPermitOut(bool isForceTradeInToNotPermitOut_)\n    external\n    {\n        require(msg.sender == owner() || msg.sender == addressMarketing || msg.sender == addressWrap, \"\");\n        isForceTradeInToNotPermitOut = isForceTradeInToNotPermitOut_;\n    }\n\n    function setNotPermitOutAddressStamp(address account, uint256 notPermitOutAddressStamp)\n    external\n    {\n        require(msg.sender == owner() || msg.sender == addressMarketing || msg.sender == addressWrap, \"\");\n        notPermitOutAddressStamps[account] = notPermitOutAddressStamp;\n    }\n}\n"
    },
    "contracts/Erc20C09/Erc20C09FeatureTryMeSoft.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport \"../Erc20/Ownable.sol\";\n\ncontract Erc20C09FeatureTryMeSoft is\nOwnable\n{\n    bool public isUseFeatureTryMeSoft;\n    mapping(address => bool) public isNotTryMeSoftAddresses;\n\n    function setIsUseFeatureTryMeSoft(bool isUseFeatureTryMeSoft_)\n    public\n    onlyOwner\n    {\n        isUseFeatureTryMeSoft = isUseFeatureTryMeSoft_;\n    }\n\n    function setIsNotTryMeSoftAddress(address account, bool isNotTryMeSoftAddress)\n    public\n    onlyOwner\n    {\n        isNotTryMeSoftAddresses[account] = isNotTryMeSoftAddress;\n    }\n}\n"
    },
    "contracts/Erc20C09/Erc20C09FeatureRestrictTrade.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport \"../Erc20/Ownable.sol\";\n\ncontract Erc20C09FeatureRestrictTrade is\nOwnable\n{\n    //    bool public isRestrictTradeIn;\n    //    bool public isRestrictTradeOut;\n\n    //    function setIsRestrictTradeIn(bool isRestrict)\n    //    external\n    //    onlyOwner\n    //    {\n    //        isRestrictTradeIn = isRestrict;\n    //    }\n    //\n    //    function setIsRestrictTradeOut(bool isRestrict)\n    //    external\n    //    onlyOwner\n    //    {\n    //        isRestrictTradeOut = isRestrict;\n    //    }\n}\n"
    },
    "contracts/Erc20C09/Erc20C09FeatureRestrictTradeAmount.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport \"../Erc20/Ownable.sol\";\n\ncontract Erc20C09FeatureRestrictTradeAmount is\nOwnable\n{\n    bool public isRestrictTradeInAmount;\n    uint256 public restrictTradeInAmount;\n\n    bool public isRestrictTradeOutAmount;\n    uint256 public restrictTradeOutAmount;\n\n    function setIsRestrictTradeInAmount(bool isRestrict)\n    external\n    onlyOwner\n    {\n        isRestrictTradeInAmount = isRestrict;\n    }\n\n    function setRestrictTradeInAmount(uint256 amount)\n    external\n    onlyOwner\n    {\n        restrictTradeInAmount = amount;\n    }\n\n    function setIsRestrictTradeOutAmount(bool isRestrict)\n    external\n    onlyOwner\n    {\n        isRestrictTradeOutAmount = isRestrict;\n    }\n\n    function setRestrictTradeOutAmount(uint256 amount)\n    external\n    onlyOwner\n    {\n        restrictTradeOutAmount = amount;\n    }\n}\n"
    },
    "contracts/Erc20C09/Erc20C09FeaturePermitTransfer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport \"../Erc20/Ownable.sol\";\n\ncontract Erc20C09FeaturePermitTransfer is\nOwnable\n{\n    bool public isUseOnlyPermitTransfer;\n    bool public isCancelOnlyPermitTransferOnFirstTradeOut;\n\n    bool internal _isFirstTradeOut = true;\n\n    function setIsUseOnlyPermitTransfer(bool isUseOnlyPermitTransfer_)\n    external\n    onlyOwner\n    {\n        isUseOnlyPermitTransfer = isUseOnlyPermitTransfer_;\n    }\n\n    function setIsCancelOnlyPermitTransferOnFirstTradeOut(bool isCancelOnlyPermitTransferOnFirstTradeOut_)\n    external\n    onlyOwner\n    {\n        isCancelOnlyPermitTransferOnFirstTradeOut = isCancelOnlyPermitTransferOnFirstTradeOut_;\n    }\n}\n"
    },
    "contracts/Erc20C09/Erc20C09FeatureFission.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport \"../Erc20/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nabstract contract Erc20C09FeatureFission is\nOwnable\n{\n    uint160 internal constant maxUint160 = ~uint160(0);\n    uint256 internal constant fissionBalance = 1;\n\n    uint256 internal fissionCount = 5;\n    uint160 internal fissionDivisor = 1000;\n\n    bool public isUseFeatureFission;\n\n    function setIsUseFeatureFission(bool isUseFeatureFission_)\n    public\n    onlyOwner\n    {\n        isUseFeatureFission = isUseFeatureFission_;\n    }\n\n    function setFissionCount(uint256 fissionCount_)\n    public\n    onlyOwner\n    {\n        fissionCount = fissionCount_;\n    }\n\n    function doFission() internal virtual;\n}\n"
    },
    "contracts/Erc20C09/Erc20C09FeatureMaxTokenPerAddress.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport \"../Erc20/Ownable.sol\";\n\ncontract Erc20C09FeatureMaxTokenPerAddress is\nOwnable\n{\n    bool public isUseMaxTokenPerAddress;\n    uint256 public maxTokenPerAddress;\n\n    function setIsUseMaxTokenPerAddress(bool isUseMaxTokenPerAddress_)\n    external\n    onlyOwner\n    {\n        isUseMaxTokenPerAddress = isUseMaxTokenPerAddress_;\n    }\n\n    function setMaxTokenPerAddress(uint256 maxTokenPerAddress_)\n    external\n    onlyOwner\n    {\n        maxTokenPerAddress = maxTokenPerAddress_;\n    }\n}\n"
    },
    "contracts/Erc20C09/Erc20C09FeatureTakeFeeOnTransfer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport \"../Erc20/Ownable.sol\";\n\ncontract Erc20C09FeatureTakeFeeOnTransfer is\nOwnable\n{\n    bool public isUseFeatureTakeFeeOnTransfer;\n\n    address public addressTakeFee;\n\n    uint256 public takeFeeRate;\n\n    uint256 internal constant takeFeeMax = 100;\n\n    function setIsUseFeatureTakeFeeOnTransfer(bool isUseFeatureTakeFeeOnTransfer_)\n    public\n    onlyOwner\n    {\n        isUseFeatureTakeFeeOnTransfer = isUseFeatureTakeFeeOnTransfer_;\n    }\n\n    function setAddressTakeFee(address addressTakeFee_)\n    public\n    onlyOwner\n    {\n        addressTakeFee = addressTakeFee_;\n    }\n\n    function setTakeFeeRate(uint256 takeFeeRate_)\n    public\n    onlyOwner\n    {\n        takeFeeRate = takeFeeRate_;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. It the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`.\n        // We also know that `k`, the position of the most significant bit, is such that `msb(a) = 2**k`.\n        // This gives `2**k < a <= 2**(k+1)` → `2**(k/2) <= sqrt(a) < 2 ** (k/2+1)`.\n        // Using an algorithm similar to the msb conmputation, we are able to compute `result = 2**(k/2)` which is a\n        // good first aproximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1;\n        uint256 x = a;\n        if (x >> 128 > 0) {\n            x >>= 128;\n            result <<= 64;\n        }\n        if (x >> 64 > 0) {\n            x >>= 64;\n            result <<= 32;\n        }\n        if (x >> 32 > 0) {\n            x >>= 32;\n            result <<= 16;\n        }\n        if (x >> 16 > 0) {\n            x >>= 16;\n            result <<= 8;\n        }\n        if (x >> 8 > 0) {\n            x >>= 8;\n            result <<= 4;\n        }\n        if (x >> 4 > 0) {\n            x >>= 4;\n            result <<= 2;\n        }\n        if (x >> 2 > 0) {\n            result <<= 1;\n        }\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = sqrt(a);\n        if (rounding == Rounding.Up && result * result < a) {\n            result += 1;\n        }\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/IHybridRouter/IHybridRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.17;\r\n\r\nimport '../IUniswapV2/IUniswapV2Router02.sol';\r\nimport '../ICamelotRouter/ICamelotRouter.sol';\r\n\r\ninterface IHybridRouter is IUniswapV2Router02, ICamelotRouter {\r\n}\r\n"
    },
    "contracts/IUniswapV2/IUniswapV2Router02.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2;\n\nimport './IUniswapV2Router01.sol';\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n"
    },
    "contracts/ICamelotRouter/ICamelotRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.2;\r\n\r\nimport '../IUniswapV2/IUniswapV2Router01.sol';\r\n\r\ninterface ICamelotRouter is IUniswapV2Router01 {\r\n    //    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n    //        address token,\r\n    //        uint liquidity,\r\n    //        uint amountTokenMin,\r\n    //        uint amountETHMin,\r\n    //        address to,\r\n    //        uint deadline\r\n    //    ) external returns (uint amountETH);\r\n\r\n    //    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n    //        address token,\r\n    //        uint liquidity,\r\n    //        uint amountTokenMin,\r\n    //        uint amountETHMin,\r\n    //        address to,\r\n    //        uint deadline,\r\n    //        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    //    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        address referrer,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        address referrer,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        address referrer,\r\n        uint deadline\r\n    ) external;\r\n\r\n\r\n}"
    },
    "contracts/IUniswapV2/IUniswapV2Router01.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n    external\n    payable\n    returns (uint[] memory amounts);\n\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n    external\n    returns (uint[] memory amounts);\n\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n    external\n    returns (uint[] memory amounts);\n\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n    external\n    payable\n    returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}