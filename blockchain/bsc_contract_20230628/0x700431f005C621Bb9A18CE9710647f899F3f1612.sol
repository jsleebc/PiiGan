{{
  "language": "Solidity",
  "sources": {
    "contracts/PepeAvengers.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.19;\n\ninterface IBEP20 {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    function allowance(\n        address owner,\n        address spender\n    ) external view returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\ninterface IFactory {\n    function createPair(\n        address tokenA,\n        address tokenB\n    ) external returns (address pair);\n}\n\ninterface IRouter {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n}\n\nlibrary Address {\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(\n            address(this).balance >= amount,\n            \"Address: insufficient balance\"\n        );\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(\n            success,\n            \"Address: unable to send value, recipient may have reverted\"\n        );\n    }\n}\n\ncontract PepeAvengers is Context, IBEP20, Ownable {\n    using Address for address payable;\n\n    mapping(address => uint256) private _rOwned;\n    mapping(address => uint256) private _tOwned;\n    mapping(address => mapping(address => uint256)) private _allowances;\n    mapping(address => bool) private _isExcludedFromFee;\n    mapping(address => bool) private _isExcluded;\n\n    address[] private _excluded;\n\n    bool private swapping;\n\n    //Anti Dump\n    mapping(address => uint256) private _lastSell;\n\n    IRouter public router;\n    address public pair;\n\n    uint8 private constant _decimals = 9;\n    uint256 private constant MAX = ~uint256(0);\n\n    uint256 private _tTotal = 10 * 10 ** 9 * 10 ** _decimals;\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\n\n    uint256 public swapTokensAtAmount = (_tTotal * 1) / 1000;\n\n    bool public swapEnabled = true;\n\n    address public deadWallet = 0x000000000000000000000000000000000000dEaD;\n    address public marketingWallet = 0x4c8e1C3db8DA285f9efCB29748246B0e92132cC9;\n    address private opsWallet = 0x4c8e1C3db8DA285f9efCB29748246B0e92132cC9;\n    address private devWallet = 0x4c8e1C3db8DA285f9efCB29748246B0e92132cC9;\n    address public minorSetter;\n\n    string private constant _name = \"Pepe Avengers\";\n    string private constant _symbol = \"PEPEA\";\n\n    struct Taxes {\n        uint256 rfi;\n        uint256 marketing;\n        uint256 ops;\n        uint256 liquidity;\n        uint256 dev;\n    }\n\n    Taxes public taxes = Taxes(5, 5, 0, 0, 0);\n    Taxes public sellTaxes = Taxes(5, 5, 0, 0, 0);\n    Taxes private launchtax = Taxes(0, 99, 0, 0, 0);\n\n    struct TotFeesPaidStruct {\n        uint256 rfi;\n        uint256 marketing;\n        uint256 ops;\n        uint256 liquidity;\n        uint256 dev;\n    }\n\n    TotFeesPaidStruct public totFeesPaid;\n\n    struct valuesFromGetValues {\n        uint256 rAmount;\n        uint256 rTransferAmount;\n        uint256 rRfi;\n        uint256 rMarketing;\n        uint256 rOps;\n        uint256 rLiquidity;\n        uint256 rDev;\n        uint256 tTransferAmount;\n        uint256 tRfi;\n        uint256 tMarketing;\n        uint256 tOps;\n        uint256 tLiquidity;\n        uint256 tDev;\n    }\n\n    event FeesChanged();\n    event UpdatedRouter(address oldRouter, address newRouter);\n\n    modifier lockTheSwap() {\n        swapping = true;\n        _;\n        swapping = false;\n    }\n\n    modifier onlyMinorSetter() {\n        require(msg.sender == minorSetter, \"Only minor setter\");\n        _;\n    }\n\n    constructor(address routerAddress) {\n        IRouter _router = IRouter(routerAddress);\n        address _pair = IFactory(_router.factory()).createPair(\n            address(this),\n            _router.WETH()\n        );\n\n        router = _router;\n        pair = _pair;\n\n        minorSetter = msg.sender;\n        excludeFromReward(pair);\n        excludeFromReward(deadWallet);\n\n        _rOwned[owner()] = _rTotal;\n        _isExcludedFromFee[address(this)] = true;\n        _isExcludedFromFee[owner()] = true;\n        _isExcludedFromFee[marketingWallet] = true;\n        _isExcludedFromFee[opsWallet] = true;\n        _isExcludedFromFee[devWallet] = true;\n        _isExcludedFromFee[deadWallet] = true;\n\n        emit Transfer(address(0), owner(), _tTotal);\n    }\n\n    //std BEP20:\n    function name() public pure returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public pure returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public pure returns (uint8) {\n        return _decimals;\n    }\n\n    //override BEP20:\n    function totalSupply() public view override returns (uint256) {\n        return _tTotal;\n    }\n\n    function balanceOf(address account) public view override returns (uint256) {\n        if (_isExcluded[account]) return _tOwned[account];\n        return tokenFromReflection(_rOwned[account]);\n    }\n\n    function allowance(\n        address owner,\n        address spender\n    ) public view override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function approve(\n        address spender,\n        uint256 amount\n    ) public override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(\n            currentAllowance >= amount,\n            \"BEP20: transfer amount exceeds allowance\"\n        );\n        _approve(sender, _msgSender(), currentAllowance - amount);\n\n        return true;\n    }\n\n    function increaseAllowance(\n        address spender,\n        uint256 addedValue\n    ) public returns (bool) {\n        _approve(\n            _msgSender(),\n            spender,\n            _allowances[_msgSender()][spender] + addedValue\n        );\n        return true;\n    }\n\n    function decreaseAllowance(\n        address spender,\n        uint256 subtractedValue\n    ) public returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(\n            currentAllowance >= subtractedValue,\n            \"BEP20: decreased allowance below zero\"\n        );\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n\n        return true;\n    }\n\n    function transfer(\n        address recipient,\n        uint256 amount\n    ) public override returns (bool) {\n        _transfer(msg.sender, recipient, amount);\n        return true;\n    }\n\n    function isExcludedFromReward(address account) public view returns (bool) {\n        return _isExcluded[account];\n    }\n\n    function reflectionFromToken(\n        uint256 tAmount,\n        bool deductTransferRfi\n    ) public view returns (uint256) {\n        require(tAmount <= _tTotal, \"Amount must be less than supply\");\n        if (!deductTransferRfi) {\n            valuesFromGetValues memory s = _getValues(\n                tAmount,\n                true,\n                false,\n                false\n            );\n            return s.rAmount;\n        } else {\n            valuesFromGetValues memory s = _getValues(\n                tAmount,\n                true,\n                false,\n                false\n            );\n            return s.rTransferAmount;\n        }\n    }\n\n    function tokenFromReflection(\n        uint256 rAmount\n    ) public view returns (uint256) {\n        require(\n            rAmount <= _rTotal,\n            \"Amount must be less than total reflections\"\n        );\n        uint256 currentRate = _getRate();\n        return rAmount / currentRate;\n    }\n\n    //@dev kept original RFI naming -> \"reward\" as in reflection\n    function excludeFromReward(address account) public onlyMinorSetter {\n        require(!_isExcluded[account], \"Account is already excluded\");\n        if (_rOwned[account] > 0) {\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\n        }\n        _isExcluded[account] = true;\n        _excluded.push(account);\n    }\n\n    function includeInReward(address account) external onlyMinorSetter {\n        require(_isExcluded[account], \"Account is not excluded\");\n        for (uint256 i = 0; i < _excluded.length; i++) {\n            if (_excluded[i] == account) {\n                _excluded[i] = _excluded[_excluded.length - 1];\n                _tOwned[account] = 0;\n                _isExcluded[account] = false;\n                _excluded.pop();\n                break;\n            }\n        }\n    }\n\n    function excludeFromFee(address account) public onlyMinorSetter {\n        _isExcludedFromFee[account] = true;\n    }\n\n    function includeInFee(address account) public onlyMinorSetter {\n        _isExcludedFromFee[account] = false;\n    }\n\n    function isExcludedFromFee(address account) public view returns (bool) {\n        return _isExcludedFromFee[account];\n    }\n\n    function _reflectRfi(uint256 rRfi, uint256 tRfi) private {\n        _rTotal -= rRfi;\n        totFeesPaid.rfi += tRfi;\n    }\n\n    function _takeLiquidity(uint256 rLiquidity, uint256 tLiquidity) private {\n        totFeesPaid.liquidity += tLiquidity;\n\n        if (_isExcluded[address(this)]) {\n            _tOwned[address(this)] += tLiquidity;\n        }\n        _rOwned[address(this)] += rLiquidity;\n    }\n\n    function _takeMarketing(uint256 rMarketing, uint256 tMarketing) private {\n        totFeesPaid.marketing += tMarketing;\n\n        if (_isExcluded[address(this)]) {\n            _tOwned[address(this)] += tMarketing;\n        }\n        _rOwned[address(this)] += rMarketing;\n    }\n\n    function _takeOps(uint256 rOps, uint256 tOps) private {\n        totFeesPaid.ops += tOps;\n\n        if (_isExcluded[address(this)]) {\n            _tOwned[address(this)] += tOps;\n        }\n        _rOwned[address(this)] += rOps;\n    }\n\n    function _takeDev(uint256 rDev, uint256 tDev) private {\n        totFeesPaid.dev += tDev;\n\n        if (_isExcluded[address(this)]) {\n            _tOwned[address(this)] += tDev;\n        }\n        _rOwned[address(this)] += rDev;\n    }\n\n    function _getValues(\n        uint256 tAmount,\n        bool takeFee,\n        bool isSell,\n        bool useLaunchTax\n    ) private view returns (valuesFromGetValues memory to_return) {\n        to_return = _getTValues(tAmount, takeFee, isSell, useLaunchTax);\n        (\n            to_return.rAmount,\n            to_return.rTransferAmount,\n            to_return.rRfi,\n            to_return.rMarketing,\n            to_return.rLiquidity\n        ) = _getRValues1(to_return, tAmount, takeFee, _getRate());\n        (to_return.rDev, to_return.rOps) = _getRValues2(\n            to_return,\n            takeFee,\n            _getRate()\n        );\n\n        return to_return;\n    }\n\n    function _getTValues(\n        uint256 tAmount,\n        bool takeFee,\n        bool isSell,\n        bool useLaunchTax\n    ) private view returns (valuesFromGetValues memory s) {\n        if (!takeFee) {\n            s.tTransferAmount = tAmount;\n            return s;\n        }\n        Taxes memory temp;\n        if (isSell && !useLaunchTax) temp = sellTaxes;\n        else if (!useLaunchTax) temp = taxes;\n        else temp = launchtax;\n\n        s.tRfi = (tAmount * temp.rfi) / 100;\n        s.tMarketing = (tAmount * temp.marketing) / 100;\n        s.tOps = (tAmount * temp.ops) / 100;\n        s.tLiquidity = (tAmount * temp.liquidity) / 100;\n        s.tDev = (tAmount * temp.dev) / 100;\n        s.tTransferAmount =\n            tAmount -\n            s.tRfi -\n            s.tMarketing -\n            s.tLiquidity -\n            s.tDev -\n            s.tOps;\n        return s;\n    }\n\n    function _getRValues1(\n        valuesFromGetValues memory s,\n        uint256 tAmount,\n        bool takeFee,\n        uint256 currentRate\n    )\n        private\n        pure\n        returns (\n            uint256 rAmount,\n            uint256 rTransferAmount,\n            uint256 rRfi,\n            uint256 rMarketing,\n            uint256 rLiquidity\n        )\n    {\n        rAmount = tAmount * currentRate;\n\n        if (!takeFee) {\n            return (rAmount, rAmount, 0, 0, 0);\n        }\n\n        rRfi = s.tRfi * currentRate;\n        rMarketing = s.tMarketing * currentRate;\n        rLiquidity = s.tLiquidity * currentRate;\n        uint256 rDev = s.tDev * currentRate;\n        uint256 rOps = s.tOps * currentRate;\n        rTransferAmount =\n            rAmount -\n            rRfi -\n            rMarketing -\n            rLiquidity -\n            rDev -\n            rOps;\n        return (rAmount, rTransferAmount, rRfi, rMarketing, rLiquidity);\n    }\n\n    function _getRValues2(\n        valuesFromGetValues memory s,\n        bool takeFee,\n        uint256 currentRate\n    ) private pure returns (uint256 rDev, uint256 rOps) {\n        if (!takeFee) {\n            return (0, 0);\n        }\n\n        rDev = s.tDev * currentRate;\n        rOps = s.tOps * currentRate;\n        return (rDev, rOps);\n    }\n\n    function _getRate() private view returns (uint256) {\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\n        return rSupply / tSupply;\n    }\n\n    function _getCurrentSupply() private view returns (uint256, uint256) {\n        uint256 rSupply = _rTotal;\n        uint256 tSupply = _tTotal;\n        for (uint256 i = 0; i < _excluded.length; i++) {\n            if (\n                _rOwned[_excluded[i]] > rSupply ||\n                _tOwned[_excluded[i]] > tSupply\n            ) return (_rTotal, _tTotal);\n            rSupply = rSupply - _rOwned[_excluded[i]];\n            tSupply = tSupply - _tOwned[_excluded[i]];\n        }\n        if (rSupply < _rTotal / _tTotal) return (_rTotal, _tTotal);\n        return (rSupply, tSupply);\n    }\n\n    function _approve(address owner, address spender, uint256 amount) private {\n        require(owner != address(0), \"BEP20: approve from the zero address\");\n        require(spender != address(0), \"BEP20: approve to the zero address\");\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function _transfer(address from, address to, uint256 amount) private {\n        require(from != address(0), \"BEP20: transfer from the zero address\");\n        require(to != address(0), \"BEP20: transfer to the zero address\");\n        require(amount > 0, \"Transfer amount must be greater than zero\");\n        require(\n            amount <= balanceOf(from),\n            \"You are trying to transfer more than your balance\"\n        );\n\n        bool canSwap = balanceOf(address(this)) >= swapTokensAtAmount;\n        if (\n            !swapping &&\n            swapEnabled &&\n            canSwap &&\n            from != pair &&\n            !_isExcludedFromFee[from] &&\n            !_isExcludedFromFee[to]\n        ) {\n            if (to == pair) swapAndLiquify(swapTokensAtAmount, sellTaxes);\n            else swapAndLiquify(swapTokensAtAmount, taxes);\n        }\n        bool takeFee = true;\n        bool isSell = false;\n        if (swapping || _isExcludedFromFee[from] || _isExcludedFromFee[to])\n            takeFee = false;\n        if (to == pair) isSell = true;\n\n        _tokenTransfer(from, to, amount, takeFee, isSell);\n    }\n\n    //this method is responsible for taking all fee, if takeFee is true\n    function _tokenTransfer(\n        address sender,\n        address recipient,\n        uint256 tAmount,\n        bool takeFee,\n        bool isSell\n    ) private {\n        valuesFromGetValues memory s = _getValues(\n            tAmount,\n            takeFee,\n            isSell,\n            false\n        );\n\n        if (_isExcluded[sender]) {\n            //from excluded\n            _tOwned[sender] = _tOwned[sender] - tAmount;\n        }\n        if (_isExcluded[recipient]) {\n            //to excluded\n            _tOwned[recipient] = _tOwned[recipient] + s.tTransferAmount;\n        }\n\n        _rOwned[sender] = _rOwned[sender] - s.rAmount;\n        _rOwned[recipient] = _rOwned[recipient] + s.rTransferAmount;\n\n        if (s.rRfi > 0 || s.tRfi > 0) _reflectRfi(s.rRfi, s.tRfi);\n        if (s.rLiquidity > 0 || s.tLiquidity > 0) {\n            _takeLiquidity(s.rLiquidity, s.tLiquidity);\n            emit Transfer(\n                sender,\n                address(this),\n                s.tLiquidity + s.tMarketing + s.tDev + s.tOps\n            );\n        }\n        if (s.rMarketing > 0 || s.tMarketing > 0)\n            _takeMarketing(s.rMarketing, s.tMarketing);\n        if (s.rDev > 0 || s.tDev > 0) _takeDev(s.rDev, s.tDev);\n        if (s.rOps > 0 || s.tOps > 0) _takeOps(s.rOps, s.tOps);\n        emit Transfer(sender, recipient, s.tTransferAmount);\n    }\n\n    function swapAndLiquify(\n        uint256 contractBalance,\n        Taxes memory temp\n    ) private lockTheSwap {\n        uint256 denominator = (temp.liquidity +\n            temp.marketing +\n            temp.dev +\n            temp.ops) * 2;\n\n        if (denominator == 0) {\n            return;\n        }\n\n        uint256 tokensToAddLiquidityWith = (contractBalance * temp.liquidity) /\n            denominator;\n        uint256 toSwap = contractBalance - tokensToAddLiquidityWith;\n\n        uint256 initialBalance = address(this).balance;\n\n        swapTokensForBNB(toSwap);\n\n        uint256 deltaBalance = address(this).balance - initialBalance;\n        uint256 unitBalance = deltaBalance / (denominator - temp.liquidity);\n        uint256 bnbToAddLiquidityWith = unitBalance * temp.liquidity;\n\n        if (bnbToAddLiquidityWith > 0) {\n            // Add liquidity to pancake\n            addLiquidity(tokensToAddLiquidityWith, bnbToAddLiquidityWith);\n        }\n\n        uint256 marketingAmt = unitBalance * 2 * temp.marketing;\n        if (marketingAmt > 0) {\n            payable(marketingWallet).sendValue(marketingAmt);\n        }\n\n        uint256 devAmt = unitBalance * 2 * temp.dev;\n        if (devAmt > 0) {\n            payable(devWallet).sendValue(devAmt);\n        }\n\n        uint256 opsAmt = unitBalance * 2 * temp.ops;\n        if (opsAmt > 0) {\n            payable(opsWallet).sendValue(opsAmt);\n        }\n    }\n\n    function addLiquidity(uint256 tokenAmount, uint256 bnbAmount) private {\n        // approve token transfer to cover all possible scenarios\n        _approve(address(this), address(router), tokenAmount);\n\n        // add the liquidity\n        router.addLiquidityETH{value: bnbAmount}(\n            address(this),\n            tokenAmount,\n            0, // slippage is unavoidable\n            0, // slippage is unavoidable\n            deadWallet,\n            block.timestamp\n        );\n    }\n\n    function swapTokensForBNB(uint256 tokenAmount) private {\n        // generate the pair path of token -> weth\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = router.WETH();\n\n        _approve(address(this), address(router), tokenAmount);\n\n        // make the swap\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0, // accept any amount of ETH\n            path,\n            address(this),\n            block.timestamp\n        );\n    }\n\n    function bulkExcludeFee(\n        address[] memory accounts,\n        bool state\n    ) external onlyMinorSetter {\n        for (uint256 i = 0; i < accounts.length; i++) {\n            _isExcludedFromFee[accounts[i]] = state;\n        }\n    }\n\n    function updateMarketingWallet(address newWallet) external onlyOwner {\n        require(newWallet != address(0), \"Fee Address cannot be zero address\");\n        marketingWallet = newWallet;\n    }\n\n    function updateDevWallet(address newWallet) external onlyOwner {\n        require(newWallet != address(0), \"Fee Address cannot be zero address\");\n        devWallet = newWallet;\n    }\n\n    function updateOpsWallet(address newWallet) external onlyOwner {\n        require(newWallet != address(0), \"Fee Address cannot be zero address\");\n        opsWallet = newWallet;\n    }\n\n    function updateSwapTokensAtAmount(uint256 amount) external onlyMinorSetter {\n        require(\n            amount >= 1000 * 10 ** decimals(),\n            \"Cannot set swap threshold less than 1000 PEPEA\"\n        );\n        swapTokensAtAmount = amount;\n    }\n\n    function updateSwapEnabled(bool _enabled) external onlyOwner {\n        swapEnabled = _enabled;\n    }\n\n    function renounceMinorSetter() external onlyMinorSetter {\n        minorSetter = address(0);\n    }\n\n    //Use this in case BNB are sent to the contract by mistake\n    function rescueBNB(uint256 weiAmount) external onlyMinorSetter {\n        require(address(this).balance >= weiAmount, \"insufficient BNB balance\");\n        payable(msg.sender).transfer(weiAmount);\n    }\n\n    //Use this in case BEP20 Tokens are sent to the contract by mistake\n    function rescueAnyBEP20Tokens(\n        address _tokenAddr,\n        address _to,\n        uint256 _amount\n    ) public onlyMinorSetter {\n        require(\n            _tokenAddr != address(this),\n            \"Owner can't claim contract's balance of its own tokens\"\n        );\n        IBEP20(_tokenAddr).transfer(_to, _amount);\n    }\n\n    receive() external payable {}\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}