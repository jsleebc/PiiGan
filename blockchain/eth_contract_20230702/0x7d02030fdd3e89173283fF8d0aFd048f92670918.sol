{{
  "language": "Solidity",
  "sources": {
    "telegramAI.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.20;\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        return account.code.length > 0;\r\n    }\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IDEXRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ncontract TelegramAI is IERC20, Ownable {\r\n    using Address for address;\r\n\r\n    address DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address ZERO = 0x0000000000000000000000000000000000000000;\r\n\r\n    string constant _name = \"TELEGRAM AI\";\r\n    string constant _symbol = \"TGAI\";\r\n    uint8 constant _decimals = 18;\r\n\r\n    uint256 _totalSupply = 1000_000_000 * (10 ** _decimals);\r\n    uint256 _maxBuyTxAmount = _totalSupply;\r\n    uint256 _maxSellTxAmount = _totalSupply;\r\n    uint256 _maxWalletSize = _totalSupply;\r\n\r\n    mapping (address => uint256) _balances;\r\n    mapping (address => mapping (address => uint256)) _allowances;\r\n\r\n    mapping (address => bool) public isFeeExempt;\r\n    mapping (address => bool) public isTxLimitExempt;\r\n    mapping (address => bool) public liquidityCreator;\r\n\r\n    uint256 totalBuyFee = 0;\r\n    uint256 totalSellFee = 0;\r\n    uint256 feeDenominator = 10000;\r\n\r\n    address payable private marketingFeeReceiver;\r\n\r\n    IDEXRouter public router;\r\n    address routerAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    mapping (address => bool) liquidityPools;\r\n\r\n    address public pair;\r\n\r\n    uint256 public launchedAt;\r\n    uint256 public launchedTime;\r\n    bool startBullRun = false;\r\n\r\n    bool public swapEnabled = false;\r\n    uint256 public swapThreshold = _totalSupply / 1000;\r\n    uint256 public swapMinimum = _totalSupply / 10000;\r\n    bool inSwap;\r\n    modifier swapping() { inSwap = true; _; inSwap = false; }\r\n\r\n    mapping (address => bool) teamMember;\r\n\r\n    modifier onlyTeam() {\r\n        require(teamMember[_msgSender()] || msg.sender == owner(), \"Caller is not a team member\");\r\n        _;\r\n    }\r\n\r\n    constructor (address _marketingWallet, address _promotionWallet, address _cexWallet) {\r\n        router = IDEXRouter(routerAddress);\r\n        pair = IDEXFactory(router.factory()).createPair(router.WETH(), address(this));\r\n        liquidityPools[pair] = true;\r\n        _allowances[owner()][routerAddress] = type(uint256).max;\r\n        _allowances[address(this)][routerAddress] = type(uint256).max;\r\n\r\n        isFeeExempt[owner()] = true;\r\n        liquidityCreator[owner()] = true;\r\n\r\n        marketingFeeReceiver = payable(_marketingWallet);\r\n\r\n        isTxLimitExempt[address(this)] = true;\r\n        isTxLimitExempt[owner()] = true;\r\n        isTxLimitExempt[routerAddress] = true;\r\n        isTxLimitExempt[DEAD] = true;\r\n\r\n        uint256 cexBalance = ( _totalSupply * 5 ) / 100;\r\n        uint256 promotionBalance = ( _totalSupply * 5 ) / 100;\r\n        uint256 devBalance = _totalSupply - cexBalance - promotionBalance;\r\n\r\n        _balances[owner()] = devBalance;\r\n        _balances[_promotionWallet] = promotionBalance;\r\n        _balances[_cexWallet] = cexBalance;\r\n\r\n        emit Transfer(address(0), owner(), devBalance);\r\n        emit Transfer(address(0), _promotionWallet, promotionBalance);\r\n        emit Transfer(address(0), _cexWallet, cexBalance);\r\n    }\r\n\r\n    receive() external payable { }\r\n\r\n    function totalSupply() external view override returns (uint256) { return _totalSupply; }\r\n    function decimals() external pure returns (uint8) { return _decimals; }\r\n    function symbol() external pure returns (string memory) { return _symbol; }\r\n    function name() external pure returns (string memory) { return _name; }\r\n    function getOwner() external view returns (address) { return owner(); }\r\n\r\n    function maxBuyTxTokens() external view returns (uint256) { return _maxBuyTxAmount / (10 ** _decimals); }\r\n    function maxSellTxTokens() external view returns (uint256) { return _maxSellTxAmount / (10 ** _decimals); }\r\n    function maxWalletTokens() external view returns (uint256) { return _maxWalletSize / (10 ** _decimals); }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function approveMax(address spender) external returns (bool) {\r\n        return approve(spender, type(uint256).max);\r\n    }\r\n\r\n    function setTeamMember(address _team, bool _enabled) external onlyOwner {\r\n        teamMember[_team] = _enabled;\r\n    }\r\n\r\n    function clearStuckBalance(uint256 amountPercentage, address adr) external onlyTeam {\r\n        uint256 amountETH = address(this).balance;\r\n\r\n        if(amountETH > 0) {\r\n            (bool sent, ) = adr.call{value: (amountETH * amountPercentage) / 100}(\"\");\r\n            require(sent,\"Failed to transfer funds\");\r\n        }\r\n    }\r\n\r\n    function manualswap(uint256 amount) external {\r\n        require(amount <= balanceOf(address(this)) && amount > 0, \"Wrong amount\");\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function manualsend() external {\r\n        bool success;\r\n        (success, ) = address(marketingFeeReceiver).call{\r\n            value: address(this).balance\r\n        }(\"\");\r\n    }\r\n\r\n    function openTrading() external onlyTeam {\r\n        require(!startBullRun);\r\n        startBullRun = true;\r\n\r\n        totalBuyFee = 9750;\r\n        totalSellFee = 9750;\r\n\r\n        launchedAt = block.number;\r\n        launchedTime = block.timestamp;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        if(_allowances[sender][msg.sender] != type(uint256).max){\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n        }\r\n\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        require(sender != address(0), \"ERC20: transfer from 0x0\");\r\n        require(recipient != address(0), \"ERC20: transfer to 0x0\");\r\n        require(amount > 0, \"Amount must be > zero\");\r\n        require(_balances[sender] >= amount, \"Insufficient balance\");\r\n        if(!launched() && liquidityPools[recipient]){ require(liquidityCreator[sender], \"Liquidity not added yet.\"); }\r\n        if(!startBullRun){ require(liquidityCreator[sender] || liquidityCreator[recipient], \"Trading not open yet.\"); }\r\n\r\n        checkTxLimit(sender, recipient, amount);\r\n\r\n        if (!liquidityPools[recipient] && recipient != DEAD) {\r\n            if (!isTxLimitExempt[recipient]) {\r\n                checkWalletLimit(recipient, amount);\r\n            }\r\n        }\r\n\r\n        if(inSwap){ return _basicTransfer(sender, recipient, amount); }\r\n\r\n        _balances[sender] = _balances[sender] - amount;\r\n\r\n        uint256 amountReceived = amount;\r\n\r\n        if(shouldTakeFee(sender, recipient)) {\r\n            amountReceived = takeFee(recipient, amount);\r\n            if(shouldSwapBack(recipient) && amount > 0) swapBack(amount);\r\n        }\r\n\r\n        _balances[recipient] = _balances[recipient] + amountReceived;\r\n\r\n        emit Transfer(sender, recipient, amountReceived);\r\n        return true;\r\n    }\r\n\r\n    function launched() internal view returns (bool) {\r\n        return launchedAt != 0;\r\n    }\r\n\r\n    function launch() external onlyTeam {\r\n        launchedAt = block.number;\r\n        launchedTime = block.timestamp;\r\n        swapEnabled = true;\r\n\r\n        totalBuyFee = 2000; // 20%\r\n        totalSellFee = 2000; // 20%\r\n\r\n        _maxBuyTxAmount =  ( _totalSupply * 150 ) / 10000; // 1.5%\r\n        _maxWalletSize =   ( _totalSupply * 150 ) / 10000; // 1.5%\r\n\r\n        emit Launched(launchedAt, launchedTime);\r\n    }\r\n\r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        _balances[sender] = _balances[sender] - amount;\r\n        _balances[recipient] = _balances[recipient] + amount;\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function checkWalletLimit(address recipient, uint256 amount) internal view {\r\n        uint256 walletLimit = _maxWalletSize;\r\n        require(_balances[recipient] + amount <= walletLimit, \"Transfer amount exceeds the bag size.\");\r\n    }\r\n\r\n    function checkTxLimit(address sender, address recipient, uint256 amount) internal view {\r\n        if (isTxLimitExempt[sender] || isTxLimitExempt[recipient]) return;\r\n        require(amount <= (liquidityPools[sender] ? _maxBuyTxAmount : _maxSellTxAmount), \"TX Limit Exceeded\");\r\n    }\r\n\r\n    function shouldTakeFee(address sender, address recipient) public view returns (bool) {\r\n        if(!liquidityPools[recipient] && !liquidityPools[sender]) return false;\r\n        return !isFeeExempt[sender] && !isFeeExempt[recipient];\r\n    }\r\n\r\n    function getTotalFee(bool selling) public view returns (uint256) {\r\n        if (selling) return totalSellFee;\r\n        return totalBuyFee;\r\n    }\r\n\r\n    function takeFee(address recipient, uint256 amount) internal returns (uint256) {\r\n        bool selling = liquidityPools[recipient];\r\n        uint256 feeAmount = (amount * getTotalFee(selling)) / feeDenominator;\r\n\r\n        _balances[address(this)] += feeAmount;\r\n\r\n        return amount - feeAmount;\r\n    }\r\n\r\n    function shouldSwapBack(address recipient) internal view returns (bool) {\r\n        return !liquidityPools[msg.sender]\r\n        && !inSwap\r\n        && swapEnabled\r\n        && liquidityPools[recipient]\r\n        && _balances[address(this)] >= swapMinimum\r\n        && totalBuyFee + totalSellFee > 0;\r\n    }\r\n\r\n    function swapBack(uint256 amount) internal swapping {\r\n        uint256 amountToSwap = amount < swapThreshold ? amount : swapThreshold;\r\n        if (_balances[address(this)] < amountToSwap) amountToSwap = _balances[address(this)];\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n\r\n        uint256 balanceBefore = address(this).balance;\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amountToSwap,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 amountETH = address(this).balance - balanceBefore;\r\n\r\n        uint256 amountETHMarketing = amountETH;\r\n\r\n        if (amountETHMarketing > 0) {\r\n            (bool sentMarketing, ) = marketingFeeReceiver.call{value: amountETHMarketing}(\"\");\r\n            if(!sentMarketing) {\r\n                //Failed to transfer to marketing wallet\r\n            }\r\n        }\r\n\r\n        emit FundsDistributed(amountETHMarketing);\r\n    }\r\n\r\n    function addLiquidityPool(address lp, bool isPool) external onlyOwner {\r\n        require(lp != pair, \"Can't alter current liquidity pair\");\r\n        liquidityPools[lp] = isPool;\r\n    }\r\n\r\n\r\n    function setTxLimit(uint256 buyNumerator, uint256 sellNumerator, uint256 divisor) external onlyOwner {\r\n       require(buyNumerator > 0 && sellNumerator > 0 && divisor > 0 && divisor <= 10000);\r\n       _maxBuyTxAmount = (_totalSupply * buyNumerator) / divisor;\r\n       _maxSellTxAmount = (_totalSupply * sellNumerator) / divisor;\r\n    }\r\n\r\n    function setMaxWallet(uint256 numerator, uint256 divisor) external onlyOwner() {\r\n        require(numerator > 0 && divisor > 0 && divisor <= 10000);\r\n        _maxWalletSize = (_totalSupply * numerator) / divisor;\r\n    }\r\n\r\n    function setIsFeeExempt(address holder, bool exempt) external onlyOwner {\r\n        isFeeExempt[holder] = exempt;\r\n    }\r\n\r\n    function setIsTxLimitExempt(address holder, bool exempt) external onlyOwner {\r\n        isTxLimitExempt[holder] = exempt;\r\n    }\r\n\r\n    function setFees(uint256 _buyFee, uint256 _sellFee, uint256 _feeDenominator) external onlyOwner {\r\n        totalBuyFee = _buyFee;\r\n        totalSellFee = _sellFee;\r\n        feeDenominator = _feeDenominator;\r\n\r\n        require(totalBuyFee <= feeDenominator, \"Fees too high\");\r\n        emit FeesSet(totalBuyFee, totalSellFee, feeDenominator);\r\n    }\r\n\r\n    function setFeeReceivers(address _marketingFeeReceiver) external onlyOwner {\r\n        marketingFeeReceiver = payable(_marketingFeeReceiver);\r\n    }\r\n\r\n    function setSwapBackSettings(bool _enabled, uint256 _denominator, uint256 _swapMinimum) external onlyOwner {\r\n        require(_denominator > 0);\r\n        swapEnabled = _enabled;\r\n        swapThreshold = _totalSupply / _denominator;\r\n        swapMinimum = _swapMinimum * (10 ** _decimals);\r\n    }\r\n\r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return _totalSupply - (balanceOf(DEAD) + balanceOf(ZERO));\r\n    }\r\n\r\n    event FundsDistributed(uint256 marketingETH);\r\n    event FeesSet(uint256 totalBuyFees, uint256 totalSellFees, uint256 denominator);\r\n    event Launched(uint256 blockNumber, uint256 timestamp);\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}