{"erc20+antibot+allfee - Copy.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(\r\n            address from,\r\n            address to,\r\n            uint256 amount\r\n        ) external returns (bool);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IPinkAntiBot {\r\n  function setTokenOwner(address owner) external;\r\n\r\n  function onPreTransferCheck(\r\n    address from,\r\n    address to,\r\n    uint256 amount\r\n  ) external;\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    address internal _owner;\r\n    mapping(address =\u003e uint256) private _basic_balances;\r\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\r\n    mapping(address =\u003e bool) private _isExcludedFromFee;\r\n    mapping(address =\u003e bool) private _isExcludedFromReward;\r\n    bool public fee_off; \r\n    uint256 private _totalSupply;\r\n    string private _name;\r\n    string private _symbol;\r\n    // pinksale AntiBot\r\n    IPinkAntiBot public pinkAntiBot;\r\n    bool public antiBotEnabled  = false;\r\n    uint256 totalFees;\r\n    struct Holders{\r\n            uint256 timestamp;\r\n            uint256 fee_stamp;\r\n        }\r\n    mapping(address =\u003e Holders) public holders;\r\n    address internal _marketing;\r\n    address internal _buyback;\r\n    uint256 marketing_fee = 0;\r\n    uint256 burn_fee      = 0;\r\n    uint256 rewards_fee   = 0;\r\n    uint256 buyback_fee   = 0;\r\n    uint256 all_fee = marketing_fee + burn_fee + rewards_fee + buyback_fee;\r\n\r\n    constructor(\r\n        string memory name_, \r\n        string memory symbol_,\r\n        uint256 totalSupply_,\r\n        address marketing_,\r\n        address buyback_,\r\n        address pinkAntiBot_\r\n        ) {\r\n        totalSupply_ = totalSupply_ * 10 ** 18;\r\n        _name = name_;\r\n        _symbol = symbol_;        \r\n        _owner = msg.sender;   \r\n        _buyback = buyback_;        \r\n        _marketing = marketing_;     \r\n        _totalSupply = totalSupply_;\r\n        _isExcludedFromFee[msg.sender] = true;\r\n        _basic_balances[msg.sender] = totalSupply_;        \r\n        emit Transfer(address(0), msg.sender, totalSupply_);\r\n        // Initiate PinkAntiBot instance from its address\r\n        pinkAntiBot = IPinkAntiBot(pinkAntiBot_);\r\n        // Register deployer as the owner of this token with PinkAntiBot contract\r\n        pinkAntiBot.setTokenOwner(msg.sender);\r\n        // Enable using PinkAntiBot in this contract       \r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        uint256 show_balance;\r\n         if (_isExcludedFromReward[account]) {\r\n             show_balance =  _basic_balances[account];\r\n        } else { \r\n             show_balance =  _basic_balances[account] + (totalFees - holders[account].fee_stamp) * _basic_balances[account] / _totalSupply;\r\n        }\r\n        return show_balance;\r\n    }\r\n\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance \u003e= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        // When you done launching, you can call setUsingAntiBot(false) to\r\n        // disable PinkAntiBot in your token instead of interacting with the\r\n        // PinkAntiBot contract\r\n        if (antiBotEnabled) {\r\n        // Check for malicious transfers\r\n        pinkAntiBot.onPreTransferCheck(from, to, amount);\r\n        }        \r\n        _beforeTokenTransfer(from, to, amount);\r\n        uint256 fromBalance = balanceOf(from);\r\n        require(fromBalance \u003e= amount, \"ERC20: transfer amount exceeds balance\");  \r\n        if ( _isExcludedFromFee[from] ||  _isExcludedFromFee[to] || fee_off) {\r\n            _basic_balances[from] = fromBalance - amount;\r\n            _basic_balances[to]  = balanceOf(to) + amount;\r\n            emit Transfer(from, to, amount);\r\n        } else {\r\n            _basic_balances[from] = fromBalance - amount;\r\n            _basic_balances[to]  = balanceOf(to) + amount * (100 - all_fee) / 100;\r\n            emit Transfer(from, to, amount * (100 - all_fee) / 100);\r\n            //rewards  \r\n            holders[from].fee_stamp = totalFees;\r\n            holders[to].fee_stamp = totalFees;\r\n            totalFees += amount * rewards_fee / 100;\r\n            //burn\r\n            _totalSupply -= amount * burn_fee / 100;\r\n            emit Transfer(from, address(0), amount * burn_fee / 100);\r\n            //marketing \r\n            _basic_balances[_marketing]  = balanceOf(_marketing) + amount * marketing_fee / 100;     \r\n            emit Transfer(from, _marketing, amount * marketing_fee  / 100);\r\n            //buyback\r\n             _basic_balances[_buyback]  = balanceOf(_buyback) + amount * buyback_fee / 100; \r\n        }\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    function excludeFromFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = true;\r\n    }\r\n    \r\n    function includeInFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = false;\r\n    }\r\n\r\n    function excludeFromReward(address account) public onlyOwner {\r\n        _isExcludedFromReward[account] = true;\r\n    }\r\n    \r\n    function includeInReward(address account) public onlyOwner {\r\n        _isExcludedFromReward[account] = false;\r\n    }\r\n\r\n    function flip_fee_off() public onlyOwner {\r\n        fee_off = !fee_off;\r\n    }   \r\n    \r\n    function flip_antiBotEnabled() public onlyOwner {\r\n        antiBotEnabled = !antiBotEnabled;\r\n    }   \r\n    \r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance \u003e= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}"},"erc20+antibot+allfee.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(\r\n            address from,\r\n            address to,\r\n            uint256 amount\r\n        ) external returns (bool);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IPinkAntiBot {\r\n  function setTokenOwner(address owner) external;\r\n\r\n  function onPreTransferCheck(\r\n    address from,\r\n    address to,\r\n    uint256 amount\r\n  ) external;\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    address internal _owner;\r\n    mapping(address =\u003e uint256) private _basic_balances;\r\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\r\n    mapping(address =\u003e bool) private _isExcludedFromFee;\r\n    mapping(address =\u003e bool) private _isExcludedFromReward;\r\n    bool public fee_off; \r\n    uint256 private _totalSupply;\r\n    string private _name;\r\n    string private _symbol;\r\n    // pinksale AntiBot\r\n    IPinkAntiBot public pinkAntiBot;\r\n    bool public antiBotEnabled  = false;\r\n    uint256 totalFees;\r\n    struct Holders{\r\n            uint256 timestamp;\r\n            uint256 fee_stamp;\r\n        }\r\n    mapping(address =\u003e Holders) public holders;\r\n    address internal _marketing;\r\n    address internal _buyback;\r\n    uint256 marketing_fee = 0;\r\n    uint256 burn_fee      = 0;\r\n    uint256 rewards_fee   = 0;\r\n    uint256 buyback_fee   = 0;\r\n    uint256 all_fee = marketing_fee + burn_fee + rewards_fee + buyback_fee;\r\n\r\n    constructor(\r\n        string memory name_, \r\n        string memory symbol_,\r\n        uint256 totalSupply_,\r\n        address marketing_,\r\n        address buyback_,\r\n        address pinkAntiBot_\r\n        ) {\r\n        totalSupply_ = totalSupply_ * 10 ** 18;\r\n        _name = name_;\r\n        _symbol = symbol_;        \r\n        _owner = msg.sender;   \r\n        _buyback = buyback_;        \r\n        _marketing = marketing_;     \r\n        _totalSupply = totalSupply_;\r\n        _isExcludedFromFee[msg.sender] = true;\r\n        _basic_balances[msg.sender] = totalSupply_;        \r\n        emit Transfer(address(0), msg.sender, totalSupply_);\r\n        // Initiate PinkAntiBot instance from its address\r\n        pinkAntiBot = IPinkAntiBot(pinkAntiBot_);\r\n        // Register deployer as the owner of this token with PinkAntiBot contract\r\n        pinkAntiBot.setTokenOwner(msg.sender);\r\n        // Enable using PinkAntiBot in this contract       \r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        uint256 show_balance;\r\n         if (_isExcludedFromReward[account]) {\r\n             show_balance =  _basic_balances[account];\r\n        } else { \r\n             show_balance =  _basic_balances[account] + (totalFees - holders[account].fee_stamp) * _basic_balances[account] / _totalSupply;\r\n        }\r\n        return show_balance;\r\n    }\r\n\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance \u003e= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        // When you done launching, you can call setUsingAntiBot(false) to\r\n        // disable PinkAntiBot in your token instead of interacting with the\r\n        // PinkAntiBot contract\r\n        if (antiBotEnabled) {\r\n        // Check for malicious transfers\r\n        pinkAntiBot.onPreTransferCheck(from, to, amount);\r\n        }        \r\n        _beforeTokenTransfer(from, to, amount);\r\n        uint256 fromBalance = balanceOf(from);\r\n        require(fromBalance \u003e= amount, \"ERC20: transfer amount exceeds balance\");  \r\n        if ( _isExcludedFromFee[from] ||  _isExcludedFromFee[to] || fee_off) {\r\n            _basic_balances[from] = fromBalance - amount;\r\n            _basic_balances[to]  = balanceOf(to) + amount;\r\n            emit Transfer(from, to, amount);\r\n        } else {\r\n            _basic_balances[from] = fromBalance - amount;\r\n            _basic_balances[to]  = balanceOf(to) + amount * (100 - all_fee) / 100;\r\n            emit Transfer(from, to, amount * (100 - all_fee) / 100);\r\n            //rewards  \r\n            holders[from].fee_stamp = totalFees;\r\n            holders[to].fee_stamp = totalFees;\r\n            totalFees += amount * rewards_fee / 100;\r\n            //burn\r\n            _totalSupply -= amount * burn_fee / 100;\r\n            emit Transfer(from, address(0), amount * burn_fee / 100);\r\n            //marketing \r\n            _basic_balances[_marketing]  = balanceOf(_marketing) + amount * marketing_fee / 100;     \r\n            emit Transfer(from, _marketing, amount * marketing_fee  / 100);\r\n            //buyback\r\n             _basic_balances[_buyback]  = balanceOf(_buyback) + amount * buyback_fee / 100; \r\n        }\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    function excludeFromFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = true;\r\n    }\r\n    \r\n    function includeInFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = false;\r\n    }\r\n\r\n    function excludeFromReward(address account) public onlyOwner {\r\n        _isExcludedFromReward[account] = true;\r\n    }\r\n    \r\n    function includeInReward(address account) public onlyOwner {\r\n        _isExcludedFromReward[account] = false;\r\n    }\r\n\r\n    function flip_fee_off() public onlyOwner {\r\n        fee_off = !fee_off;\r\n    }   \r\n    \r\n    function flip_antiBotEnabled() public onlyOwner {\r\n        antiBotEnabled = !antiBotEnabled;\r\n    }   \r\n    \r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance \u003e= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}"}}