{{
  "language": "Solidity",
  "sources": {
    "autoburneth.sol": {
      "content": "//SPDX-License-Identifier: Unlicensed\npragma solidity 0.8.17;\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; \n        return msg.data;\n    }\n}\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\ninterface IERC20 {\n    \n    function totalSupply() external view returns (uint256);\n\n    \n    function balanceOf(address account) external view returns (uint256);\n\n    \n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    \n    function allowance(address owner, address spender) external view returns (uint256);\n\n    \n      function approve(address spender, uint256 amount) external returns (bool);\n\n  \n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n\n    ) external returns (bool);\n\n    \n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    \n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n}\n\ninterface IERC20Metadata is IERC20 {\n    \n     function name() external view returns (string memory);\n\n    \n    function symbol() external view returns (string memory);\n\n   \n    function decimals() external view returns (uint8);\n}\n\n\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    \n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    \n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    \n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n\n    }\n    \n    function decimals() public view virtual override returns (uint8) {\n        return 9;\n    }\n\n\n    \n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n   \n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    \n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    \n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    \n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n   \n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n\n    }\n\n    \n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n\n    }\n\n    \n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n        ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n\n   \n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    \n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n\n    \n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    \n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n}\n\nlibrary SafeMath {\n    \n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    \n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n\n    \n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n   \n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        \n        if (a == 0) {\n            return 0;\n        }\n         uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    \n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    \n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n       \n        return c;\n    }\n\n\n    \n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n     \n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n\n        return a % b;\n    }\n}\n\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    \n    \n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    \n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    \n    \n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    \n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n   \n\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n\n        _owner = newOwner;\n    }\n}\n\n\n\nlibrary SafeMathInt {\n    int256 private constant MIN_INT256 = int256(1) << 255;\n    int256 private constant MAX_INT256 = ~(int256(1) << 255);\n\n   \n    function mul(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a * b;\n\n        \n        require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\n        require((b == 0) || (c / b == a));\n        return c;\n    }\n\n    \n    function div(int256 a, int256 b) internal pure returns (int256) {\n        \n        require(b != -1 || a != MIN_INT256);\n\n\n        return a / b;\n    }\n\n    \n    function sub(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a - b;\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\n        return c;\n    }\n\n    \n    function add(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a + b;\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\n        return c;\n    }\n   \n    function abs(int256 a) internal pure returns (int256) {\n        require(a != MIN_INT256);\n\n        return a < 0 ? -a : a;\n    }\n\n\n    function toUint256Safe(int256 a) internal pure returns (uint256) {\n        require(a >= 0);\n        return uint256(a);\n    }\n}\n\nlibrary SafeMathUint {\n  function toInt256Safe(uint256 a) internal pure returns (int256) {\n    int256 b = int256(a);\n    require(b >= 0);\n    return b;\n  }\n}\n\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n     function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n         function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n\n        uint deadline\n    ) external;\n}\ncontract UBOB is ERC20, Ownable {\n    using SafeMath for uint256;\n\n    IUniswapV2Router02 public immutable uniswapV2Router;\n    address public immutable uniswapV2Pair;\n    address public constant deadAddress = address(0xdead);\n\n    bool private swapping;\n\n    address public deployerAddress;\n    address public marketingWallet;\n    address public lpLocker;\n    \n    uint256 public maxTransactionAmount;\n    uint256 public swapTokensAtAmount;\n    uint256 public maxWallet;\n\n    bool public swapEnabled = true;\n\n    uint256 public buyTotalFees;\n    uint256 public buyMarketingFee;\n    uint256 public buyLiquidityFee;\n    uint256 public buyBurnFee;\n    \n    uint256 public sellTotalFees;\n    uint256 public sellMarketingFee;\n    uint256 public sellLiquidityFee;\n    uint256 public sellBurnFee;\n    \n    uint256 public tokensForMarketing;\n    uint256 public tokensForLiquidity;\n    uint256 public tokensForBurn;\n    \n    /******************/\n\n   \n    mapping (address => bool) private _isExcludedFromFees;\n    mapping (address => bool) public _isExcludedMaxTransactionAmount;\n\n  \n    mapping (address => bool) public automatedMarketMakerPairs;\n\n    event UpdateUniswapV2Router(address indexed newAddress, address indexed oldAddress);\n\n    event ExcludeFromFees(address indexed account, bool isExcluded);\n\n\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\n\n    event marketingWalletUpdated(address indexed newWallet, address indexed oldWallet);\n    event SwapAndLiquify(\n        uint256 tokensSwapped,\n        uint256 ethReceived,\n        uint256 tokensIntoLiquidity\n    );\n\n    event BuyBackTriggered(uint256 amount);\n\n    constructor() ERC20(\"Uncle BOB\", \"UBOB\") {\n\n        address newOwner = address(owner());\n        \n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n        \n        excludeFromMaxTransaction(address(_uniswapV2Router), true);\n        uniswapV2Router = _uniswapV2Router;\n        \n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\n        excludeFromMaxTransaction(address(uniswapV2Pair), true);\n        _setAutomatedMarketMakerPair(address(uniswapV2Pair), true);\n        \n        uint256 _buyMarketingFee = 2;\n        uint256 _buyLiquidityFee = 1;\n\n        uint256  _buyBurnFee = 2;\n\n    \n        uint256 _sellMarketingFee = 2;\n        uint256 _sellLiquidityFee = 1;\n        uint256 _sellBurnFee = 2;\n        \n        uint256 totalSupply = 1 * 1e9 * 1e9;\n        \n        maxTransactionAmount = totalSupply * 2 / 100; // 2% maxTransactionAmountTxn\n        swapTokensAtAmount = totalSupply * 5 / 10000; // 0.05% swap wallet\n        maxWallet = totalSupply * 2 / 100; // 2% max wallet\n\n        buyMarketingFee = _buyMarketingFee;\n        buyLiquidityFee = _buyLiquidityFee;\n        buyBurnFee = _buyBurnFee;\n        buyTotalFees = buyMarketingFee + buyLiquidityFee + buyBurnFee;\n        \n        sellMarketingFee = _sellMarketingFee;\n        sellLiquidityFee = _sellLiquidityFee;\n        sellBurnFee = _sellBurnFee;\n        sellTotalFees = sellMarketingFee + sellLiquidityFee + sellBurnFee;\n        \n        deployerAddress = address(0x8425343d3B10Cc11135dD3932A6E591E07381EAd); \n    \tmarketingWallet = address(0x8425343d3B10Cc11135dD3932A6E591E07381EAd); \n        lpLocker = address(0x663A5C229c09b049E36dCc11a9B0d4a8Eb9db214); \n\n        \n        excludeFromFees(newOwner, true); // Owner address\n        excludeFromFees(address(this), true); // CA\n        excludeFromFees(address(0xdead), true); // Burn address\n        excludeFromFees(marketingWallet, true); // Marketing wallet\n        excludeFromFees(lpLocker, true); // LP Locker\n        excludeFromFees(deployerAddress, true); // Deployer Address\n        \n        excludeFromMaxTransaction(newOwner, true); // Owner address\n        excludeFromMaxTransaction(address(this), true); // CA\n        excludeFromMaxTransaction(address(0xdead), true); // Burn address\n        excludeFromMaxTransaction(marketingWallet, true); // Marketing wallet\n        excludeFromMaxTransaction(lpLocker, true); // LP Locker\n        excludeFromMaxTransaction(deployerAddress, true); // Deployer Address\n\n        \n        /*\n            _mint is an internal function in ERC20.sol that is only called here,\n            and CANNOT be called ever again\n        */\n        _mint(newOwner, totalSupply);\n\n        transferOwnership(newOwner);\n    }\n\n    receive() external payable {\n\n  \t}\n\n     \n    function updateSwapTokensAtAmount(uint256 newAmount) external onlyOwner returns (bool){\n  \t    require(newAmount >= totalSupply() * 1 / 100000, \"Swap amount cannot be lower than 0.001% total supply.\");\n  \t    require(newAmount <= totalSupply() * 5 / 1000, \"Swap amount cannot be higher than 0.5% total supply.\");\n  \t    swapTokensAtAmount = newAmount;\n  \t    return true;\n  \t}\n    \n    function updateMaxAmount(uint256 newNum) external onlyOwner {\n        require(newNum >= (totalSupply() * 5 / 1000)/1e9, \"Cannot set maxTransactionAmount lower than 0.5%\");\n        maxTransactionAmount = newNum * (10**18);\n    }\n      function updateMaxWallet(uint256 newNum) external onlyOwner {\n        require(newNum >= (totalSupply() * 5 / 1000)/1e9, \"Cannot set maxWallet lower than 0.5%\");\n        maxWallet = newNum * (10**18);\n    }\n    \n    function excludeFromMaxTransaction(address updAds, bool isEx) public onlyOwner {\n        _isExcludedMaxTransactionAmount[updAds] = isEx;\n    }\n    \n    \n    function updateSwapEnabled(bool enabled) external onlyOwner(){\n\n        swapEnabled = enabled;\n    }\n\n    \n    function updateBuyFees(uint256 _marketingFee, uint256 _liquidityFee, uint256 _burnFee) external onlyOwner {\n        buyMarketingFee = _marketingFee;\n        buyLiquidityFee = _liquidityFee;\n        buyBurnFee = _burnFee;\n        buyTotalFees = buyMarketingFee + buyLiquidityFee + buyBurnFee;\n        require(buyTotalFees <= 35, \"Must keep fees at 35% or less\");\n    }\n     function updateSellFees(uint256 _marketingFee, uint256 _liquidityFee, uint256 _burnFee) external onlyOwner {\n        sellMarketingFee = _marketingFee;\n        sellLiquidityFee = _liquidityFee;\n        sellBurnFee = _burnFee;\n        sellTotalFees = sellMarketingFee + sellLiquidityFee + sellBurnFee;\n        require(sellTotalFees <= 35, \"Must keep fees at 35% or less\");\n    }\n\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\n        _isExcludedFromFees[account] = excluded;\n        emit ExcludeFromFees(account, excluded);\n    }\n\n    function setAutomatedMarketMakerPair(address pair, bool value) public onlyOwner {\n        require(pair != uniswapV2Pair, \"The pair cannot be removed from automatedMarketMakerPairs\");\n\n        _setAutomatedMarketMakerPair(pair, value);\n    }\n\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\n        automatedMarketMakerPairs[pair] = value;\n\n        emit SetAutomatedMarketMakerPair(pair, value);\n    }\n\n    function updateMarketingWallet(address newMarketingWallet) external onlyOwner {\n        emit marketingWalletUpdated(newMarketingWallet, marketingWallet);\n        marketingWallet = newMarketingWallet;\n    }\n\n    function isExcludedFromFees(address account) public view returns(bool) {\n        return _isExcludedFromFees[account];\n\n    }\n\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal override {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n        \n         if(amount == 0) {\n            super._transfer(from, to, 0);\n            return;\n        }\n        \n\n            if (\n                from != owner() &&\n                to != owner() &&\n                to != address(0) &&\n                to != address(0xdead) &&\n                !swapping\n            ){\n                 \n                //when buy\n                if (automatedMarketMakerPairs[from] && !_isExcludedMaxTransactionAmount[to]) {\n                        require(amount <= maxTransactionAmount, \"Buy transfer amount exceeds the maxTransactionAmount.\");\n                        require(amount + balanceOf(to) <= maxWallet, \"Max wallet exceeded\");\n\n                }\n                \n                //when sell\n                else if (automatedMarketMakerPairs[to] && !_isExcludedMaxTransactionAmount[from]) {\n                        require(amount <= maxTransactionAmount, \"Sell transfer amount exceeds the maxTransactionAmount.\");\n                }\n                else if (!_isExcludedMaxTransactionAmount[to]){\n                    require(amount + balanceOf(to) <= maxWallet, \"Max wallet exceeded\");\n                }\n\n            }\n        \n        \n        \n        \n\t\tuint256 contractTokenBalance = balanceOf(address(this));\n        \n        bool canSwap = contractTokenBalance >= swapTokensAtAmount;\n\n        if( \n            canSwap &&\n            swapEnabled &&\n            !swapping &&\n            !automatedMarketMakerPairs[from] &&\n            !_isExcludedFromFees[from] &&\n            !_isExcludedFromFees[to]\n        ) {\n            swapping = true;\n            \n            swapBack();\n\n            swapping = false;\n        }\n        \n        bool takeFee = !swapping;\n\n        \n        if(_isExcludedFromFees[from] || _isExcludedFromFees[to]) {\n\n            takeFee = false;\n        }\n        \n        uint256 fees = 0;\n        // only take fees on buys/sells, do not take on wallet transfers\n        if(takeFee){\n            if (automatedMarketMakerPairs[to] && sellTotalFees > 0){\n                fees = amount.mul(sellTotalFees).div(100);\n                tokensForLiquidity += fees * sellLiquidityFee / sellTotalFees;\n                tokensForMarketing += fees * sellMarketingFee / sellTotalFees;\n                tokensForBurn += fees * sellBurnFee / sellTotalFees;\n            }\n              // on buy\n            else if(automatedMarketMakerPairs[from] && buyTotalFees > 0) {\n        \t    fees = amount.mul(buyTotalFees).div(100);\n        \t    tokensForLiquidity += fees * buyLiquidityFee / buyTotalFees;\n                tokensForMarketing += fees * buyMarketingFee / buyTotalFees;\n                tokensForBurn += fees * buyBurnFee / buyTotalFees;\n            }\n            \n            if(fees > 0){    \n\n                super._transfer(from, address(this), (fees - tokensForBurn));\n            }\n\n            if(tokensForBurn > 0){\n                super._transfer(from, deadAddress, tokensForBurn);\n                tokensForBurn = 0;\n            }\n        \t\n        \tamount -= fees;\n        }\n\n        super._transfer(from, to, amount);\n    }\n\n    function swapTokensForEth(uint256 tokenAmount) private {\n\n        // generate the uniswap pair path of token -> weth\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = uniswapV2Router.WETH();\n\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\n\n        // make the swap\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0, \n            path,\n            address(this),\n            block.timestamp\n        );\n        \n    }\n    \n    \n    \n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\n        \n\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\n\n        \n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\n            address(this),\n            tokenAmount,\n            0, \n            0, \n            deadAddress,\n            block.timestamp\n        );\n\n    }\n\n    function swapBack() private {\n        uint256 contractBalance = balanceOf(address(this));\n        uint256 totalTokensToSwap = tokensForLiquidity + tokensForMarketing;\n        \n        if(contractBalance == 0 || totalTokensToSwap == 0) {return;}\n        \n        \n        uint256 liquidityTokens = contractBalance * tokensForLiquidity / totalTokensToSwap / 2;\n        uint256 amountToSwapForETH = contractBalance.sub(liquidityTokens);\n        \n        uint256 initialETHBalance = address(this).balance;\n\n        swapTokensForEth(amountToSwapForETH); \n        \n        uint256 ethBalance = address(this).balance.sub(initialETHBalance);\n        \n        uint256 ethForMarketing = ethBalance.mul(tokensForMarketing).div(totalTokensToSwap);\n        \n        \n        uint256 ethForLiquidity = ethBalance - ethForMarketing;\n        tokensForLiquidity = 0;\n        tokensForMarketing = 0;\n        \n        (bool success,) = address(marketingWallet).call{value: ethForMarketing}(\"\");\n        if(liquidityTokens > 0 && ethForLiquidity > 0){\n\n            addLiquidity(liquidityTokens, ethForLiquidity);\n            emit SwapAndLiquify(amountToSwapForETH, ethForLiquidity, tokensForLiquidity);\n        }\n        \n        \n        (success,) = address(marketingWallet).call{value: address(this).balance}(\"\");\n    }\n    \n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}