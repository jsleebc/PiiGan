{{
  "language": "Solidity",
  "sources": {
    "contracts/CGVETToken.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\n/*\r\n*\r\n* CGVET Token\r\n*\r\n*\r\n* ========================\r\n* https://citizengreen.io/\r\n* ========================\r\n*\r\n* The Citizen Green app aims to work within a consumables regulatory constraints in the \r\n* US, and allows military veterans to anonymously share their consumption experiences for the \r\n* benefit of other veterans on a similar journey and in return earn NFT discount coupons on \r\n* their purchases. \r\n*\r\n* The Citizen Green Veteran NFT discount couponing program is made possible because cultivators \r\n* attest to a product lifecycle story on the Efixii blockchain and receive CGVET tokens as truth\r\n* rewards.  \r\n*\r\n* CGVET rewards may also be issued to retailers to help offset the cost of a offering an NFT \r\n* coupon discount for veterans.\r\n*\r\n*\r\n* =================\r\n* https://abbey.ch/\r\n* =================\r\n* \r\n* Abbey is a Uniswap-based DeFi solution provider that allows companies to offer people a \r\n* novel way to participate in the success a business may have in a decentralized manner.\r\n* \r\n* The premise is both elegant and simple, the company performs token buybacks based on \r\n* its revenues.\r\n* \r\n* Using Abbey as a Uniswap DeFi management agency, the company spends some revenues \r\n* buying one side of a bespoke Uniswap trading pair. The other side of the Uniswap pair \r\n* is the CGVET token.\r\n* \r\n* DeFi traders wishing to participate in the success a business may have deposit USDC in \r\n* return for CGVET tokens. The Uniswap Automated Market Maker ensures DeFi market liquidity \r\n* and legitimate price discovery. The more USDC that the company spends in buy backs over \r\n* time, the higher the potential rise in the long term value of the CGVET token.\r\n*\r\n*\r\n* =========================\r\n* https://cross-fi.finance/\r\n* =========================\r\n* \r\n* CGVET also operates a 'stake and earn' smart contract which distributes CGVET tokens as\r\n* rewards to stakers over time. The CGVET smart contract owner deposits tokens into a \r\n* staking contracts rewards pool. As time goes by, stakers earn reward tokens and, after \r\n* the staker-pledged lock-up term expires, stakers may claim rewards and withdraw their \r\n* deposits.\r\n*\r\n* The longer tokens are staked for, the higher the earned reward. If tokens are withdrawn \r\n* prior to the staker-pledged lock-up term, then only the original deposit-amount of tokens \r\n* is returned, without reward.\r\n*\r\n* Staking is only allowed when there is sufficient collateral for token-rewards deposited \r\n* in the contract. Anyone may use the stake and earn contract, free of charge or commission.\r\n*\r\n* APY formula is (1+i)^(n/12)^a\r\n* where:\r\n*  i=target 12 month APY\r\n*  n=number of months locked\r\n*  a=scaling factor 1 <= a <= 2\r\n*\r\n*/\r\n\r\npragma solidity 0.8.19;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\n\r\n/**\r\n * @title CGVET Token contract for Uniswap v3.\r\n * @author Abbey Technology GmbH\r\n * @notice Token contract for use with Uniswap. Enforces restrictions outlined on the website.\r\n */\r\ncontract CGVETToken is ERC20 {\r\n\r\n    /**\r\n     * @notice The details of a future withdraw.\r\n     */\r\n    struct Notice {\r\n        // The maximum number of tokens proposed to withdraw.\r\n        uint256 amount;\r\n\r\n        // The date after which tokens can be swapped.\r\n        uint256 releaseDate;\r\n    }\r\n\r\n    // Event fired when a restricted wallet gives notice of a potential future trade.\r\n    event NoticeGiven(address indexed who, uint256 amount, uint256 releaseDate);\r\n\r\n    /**\r\n     * @notice Notice must be given to the public before treasury tokens can be swapped.\r\n     */\r\n    Notice public noticeTreasury;\r\n\r\n    /**\r\n     * @notice Notice must be given to the public before Liquidity Tokens can be removed from the pool.\r\n     */\r\n    Notice public noticeLiquidity;\r\n\r\n    /**\r\n    * @notice The account that created this contract, also functions as the liquidity provider.\r\n    */\r\n    address public owner;\r\n\r\n    /**\r\n     * @notice Holder of the L1 tokens.  Must give notice before tokens are moved.\r\n     */\r\n    address public treasury;\r\n\r\n    /**\r\n     * @notice The account that performs the buyback of tokens, all bought tokens are burned.\r\n     * @dev They cannot be autoburned during transfer as the Uniswap client prevents the transaction.\r\n     */\r\n    address public buyback;\r\n\r\n    /**\r\n     * @notice The account that facilitates moving tokens between Mainnet and Efixii L2.\r\n     */\r\n    address public flip;    \r\n\r\n    /**\r\n     * @notice The address of the Uniswap Pool ERC20 contract holding the Liquidity Pool tokens.\r\n     */\r\n    address public poolAddress;\r\n\r\n    /**\r\n     * @notice The address of the Uniswap NFT ERC721 Positions contract that tracks ownership of liquidity pools.\r\n     */\r\n    address public positionsAddress;\r\n\r\n    /**\r\n     * @notice The NFT id of the Liquidity Pool in the Uniswap Positions contract.\r\n     */\r\n    uint256 public nftId;    \r\n\r\n    /**\r\n     * @notice The minimum duration notice given (to give the public a chance to act and to prevent a rug pull).\r\n     */\r\n    uint256 private MinimumNotice = 7 days;\r\n\r\n    /**\r\n     * @notice Restrict functionaly to the contract owner.\r\n     */\r\n    modifier onlyOwner {\r\n        require(_msgSender() == owner, \"You are not Owner.\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Create the contract setting already known values that are unlikely to change.  The tokens for the Uniswap\r\n     *         liquidity pool are also created.\r\n     * \r\n     * @param initialSupply The number of tokens to create the Uniswap pool.\r\n     * @param name          The name of the token.\r\n     * @param symbol        The short symbol for this token.\r\n     * @param treasuryAddr  The address of the treasury wallet.\r\n     * @param buybackAddr   The wallet that performs buybacks and optional burns of tokens.\r\n     * @param flipAddr      The wallet used to move tokens between L2 and Mainnet.\r\n     */\r\n    constructor(uint256 initialSupply, string memory name, string memory symbol, address treasuryAddr, address buybackAddr, address flipAddr, address positionsAddr) ERC20(name, symbol) {\r\n        owner = _msgSender();\r\n\r\n        treasury = treasuryAddr;\r\n        buyback = buybackAddr;\r\n        flip = flipAddr;\r\n        positionsAddress = positionsAddr;\r\n\r\n        _mint(owner, initialSupply);\r\n    }\r\n\r\n    /**\r\n     * @notice Set the address of the account holding CGVET tokens.\r\n     */\r\n    function setTreasury(address who) public onlyOwner {\r\n        require(who != address(0x0), \"Cannot assign to null address\");\r\n\r\n        _migrateTokens(treasury, who);\r\n        treasury = who;\r\n    }\r\n\r\n    /**\r\n     * @notice Set the address of the company account that buys tokens to increase the token price.\r\n     */\r\n    function setBuyback(address who) public onlyOwner {\r\n        require(who != address(0x0), \"Cannot assign to null address\");\r\n\r\n        _migrateTokens(buyback, who);\r\n        buyback = who;\r\n    }\r\n\r\n    /**\r\n     * @notice Set the address of the account that allows moving tokens between L2 and Mainnet.\r\n     */\r\n    function setFlip(address who) public onlyOwner {\r\n        require(who != address(0x0), \"Cannot assign to null address\");\r\n\r\n        _migrateTokens(flip, who);\r\n        flip = who;\r\n    }\r\n\r\n    /**\r\n     * When changing the address of a role in the contract move all tokens to the new\r\n     * address - the tokens are restricted by role so need to move with the role address\r\n     * change.\r\n     */\r\n    function _migrateTokens(address from, address to) private {\r\n        if(from != address(0x0) && balanceOf(from) > 0)\r\n            _transfer(from, to, balanceOf(from));\r\n    }\r\n\r\n    /**\r\n     * @notice Set the address of the Uniswap Pool contract.\r\n     */\r\n    function setPoolAddress(address who) public onlyOwner {\r\n        poolAddress = who;\r\n    }\r\n\r\n    /**\r\n     * @notice Set the address of the Uniswap NFT contract that tracks Liquidity Pool ownership.\r\n     */\r\n    function setPositionsAddress(address who) public onlyOwner {\r\n        positionsAddress = who;\r\n    }\r\n\r\n    /**\r\n     * @notice Set the id of the position token that determines ownership of the Liquidity Pool.\r\n     */\r\n    function setNftId(uint256 id) public onlyOwner {\r\n        nftId = id;\r\n    }\r\n\r\n    /**\r\n     * @notice Treasury tokens must give advanced notice to the public before they can be used.\r\n     * A public announcement will be made at the same time this notice is set in the contract.\r\n     *\r\n     * @param who The treasury address.\r\n     * @param amount The maximum number of tokens (in wei).\r\n     * @param numSeconds The number of seconds the tokens are held before being acted on.\r\n     */\r\n    function treasuryTransferNotice(address who, uint256 amount, uint256 numSeconds) public onlyOwner {\r\n        require(who == treasury, \"Specified address is not Treasury.\");\r\n        require(numSeconds >= MinimumNotice, \"Not enough notice given.\");\r\n\r\n        uint256 when = block.timestamp + (numSeconds * 1 seconds);\r\n\r\n        require(noticeTreasury.releaseDate == 0 || block.timestamp >= noticeTreasury.releaseDate, \"Cannot overwrite an active existing notice.\");\r\n        require(amount <= balanceOf(who), \"Can't give notice for more CGVET tokens than owned.\");\r\n        noticeTreasury = Notice(amount, when);\r\n        emit NoticeGiven(who, amount, when);\r\n    }\r\n\r\n    /**\r\n     * @notice Liquidity Pool tokens must give advanced notice to the public before they can be used.\r\n     * A public announcement will be made at the same time this notice is set in the contract.     \r\n     *\r\n     * @param who The owner of the Uniswap Positions NFT token.\r\n     * @param amount The maximum number of tokens (in wei).\r\n     * @param numSeconds The number of seconds the tokens are held before being acted on.\r\n     */\r\n    function liquidityRedemptionNotice(address who, uint256 amount, uint256 numSeconds) public onlyOwner {\r\n        require(positionsAddress != address(0), \"Uniswap Position Manager must be set.\");\r\n        require(numSeconds >= MinimumNotice, \"Not enough notice given.\");\r\n        require(nftId != 0, \"Uniswap Position NFT Id must be set.\");\r\n        require(poolAddress != address(0), \"The Uniswap Pool contract address must be set.\");\r\n\r\n        IERC721 positions = IERC721(positionsAddress);\r\n        address lpOwner = positions.ownerOf(nftId);\r\n        require(who == lpOwner, \"The specified address does not own the Positions NFT Token.\");\r\n\r\n        uint256 when = block.timestamp + (numSeconds * 1 seconds);\r\n\r\n        require(noticeLiquidity.releaseDate == 0 || block.timestamp >= noticeLiquidity.releaseDate, \"Cannot overwrite an active existing notice.\");\r\n        require(amount <= balanceOf(poolAddress), \"Can't give notice for more Liquidity Tokens than owned.\");\r\n        noticeLiquidity = Notice(amount, when);\r\n        emit NoticeGiven(who, amount, when);\r\n    }\r\n\r\n    /**\r\n     * @notice Enforce rules around the company accounts:\r\n     * - Once buyback buys tokens they can never be moved, the only real option is to burn.\r\n     * - Two key accounts: treasury and the owner of the liquidity pool are restricted.\r\n     * - A public announcement of the company's intent along with a time locked notice set in this contract before any token movement.\r\n     * - Only after the deadline can these restricted tokens move.\r\n     * - No restrictions are in place for any other wallet.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal override {\r\n        require(sender != buyback, \"Buyback cannot transfer tokens, it can only burn.\");\r\n        if(sender == treasury) {\r\n            require(noticeTreasury.releaseDate != 0 && block.timestamp >= noticeTreasury.releaseDate, \"Notice period has not been set or has not expired.\");\r\n            require(amount <= noticeTreasury.amount, \"Treasury can't transfer more tokens than given notice for.\");\r\n\r\n            // Clear the remaining notice balance, this prevents giving notice on all tokens and\r\n            // trickling them out.\r\n            noticeTreasury = Notice(0, 0);\r\n        }\r\n        else if(nftId != 0) { // Check if the receiver is the Liquidity Pool owner.\r\n            IERC721 positions = IERC721(positionsAddress);\r\n            address lpOwner = positions.ownerOf(nftId);\r\n            if(recipient == lpOwner) {\r\n                require(noticeLiquidity.releaseDate != 0 && block.timestamp >= noticeLiquidity.releaseDate, \"LP notice period has not been set or has not expired.\");\r\n                require(amount <= noticeLiquidity.amount, \"LP can't transfer more tokens than given notice for.\");\r\n\r\n                // Clear the remaining notice balance, this prevents giving notice on all tokens and\r\n                // trickling them out.\r\n                noticeLiquidity = Notice(0, 0);\r\n            }\r\n        }\r\n\r\n        super._transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /**\r\n     * @notice mint may be called when CGVET tokens are burned on the L2 side of the CGVET bridge \r\n     * and minted one-for-one to this contract on the Mainnet L1 side of the CGVET bridge.\r\n     *\r\n     * @param who The address to mint to the tokens to.\r\n     * @param quantity The number of tokens to create, in wei.\r\n     */\r\n    function mint(address who, uint256 quantity) public onlyOwner {\r\n        _mint(who, quantity);\r\n    }\r\n\r\n    /**\r\n     * @notice Tokens are burned here on Mainnet to reduce total supply available.\r\n     *\r\n     * @param quantity The number of tokens to destroy, in wei.\r\n     */\r\n    function burn(uint256 quantity) public {\r\n        _burn(_msgSender(), quantity);\r\n    }\r\n}"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}