{{
  "language": "Solidity",
  "sources": {
    "AntiJeet.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.19;\r\n                                                                                      \r\n//                                                                      \r\n//                             .:-------::.                             \r\n//                       :=+#%%%%%%%%%%%%%%%%*+-.                       \r\n//                   :=#%%%%%%%%%%######%%%%%%%%%%*-.                   \r\n//                .=#%%%%%%*+++*##%%%%%##*++=*#%%%%%%*-                 \r\n//              :*%%%%%#+:.-#%%%%%%%%%%%%%%%%+..-+#%%%%%=.              \r\n//            .*%%%%%+:  .#%%%%%%%%%%%%%%%%%%%%-   -*%%%%%=             \r\n//           =%%%%%%-    #%%%%%%%%%%*-+:+-:+--%%-    :+%%%%#:           \r\n//          *%%%%%%%%#- *%%%%%%%%%%+=:*:+==*#+%%%      :#%%%%=          \r\n//        .#%%%%-=#%%%%%#*#%%%%%%%%%%%%%%%%%%%%%%=       +%%%%+         \r\n//        #%%%#:   -*%%%%%+::-=+*#@@@@@@@%@@@@@@@%-       =%%%%+        \r\n//       *%%%%:      .*#%%%%#-    :*%%%%%%%%%%%%%%%%*-.    =%%%%-       \r\n//      :%%%%-        - -*%%%%%+:::----*##%%%#*+=-+-=+*+.   *%%%#       \r\n//      *%%%#         -   :*%%%%%*==+==::..:=++-. :         :%%%%-      \r\n//      %%%%+          :    .=#%%%%%#=+.    -++*- :          #%%%*      \r\n//     .%%%%-          :     . -#%%%%%#:   :..-:- -.         *%%%#      \r\n//     :%%%%-           :.  .:  ::+%%%%%#-  -. :: :.         *%%%#      \r\n//     .%%%%=            :   =     -+#%%%%%+:+ :: -          #%%%*      \r\n//      #%%%#            :   .-   .:- -*%%%%%#-:::          .%%%%=      \r\n//      -%%%%:           :   ..:: := ==-=*%%%%%#+           +%%%%.      \r\n//       #%%%#           :   .   :=:::-:===*#%%%%%+.       :%%%%=       \r\n//       :%%%%*        =+-         .--   . ..=*%%%%%*-    :%%%%*        \r\n//        -%%%%#.    =%%%%+--:       .::.:==:  .=#%%%%#= :%%%%#.        \r\n//         :#%%%%=+*%@@@%%%%%#=.       .  #%%*=:  -*%%%%%%%%%*.         \r\n//          *%%%%%%%@@@@@@%%%%%%*:   -=-=#%%%@@@%%*+++%%%%%%=           \r\n//           -%%%%%%%@@@@@@%%%@%%%*:=@@@%%%%@@@@@@@%%%%%%%*:            \r\n//              *#%%%%%%#+++++++++++++++++++++++#%%%%%%%*:              \r\n//                -*%%%%%%#+-.             .:=+#%%%%%#+:                \r\n//                  .=*%%%%%%%%%#***++**##%%%%%%%%#+-                   \r\n//                     .:=*#%%%%%%%%%%%%%%%%%##+-.                      \r\n//                          ..:-=+++++++==-:.                           \r\n                                                                     \r\n//\r\n//     ░█████╗░███╗░░██╗████████╗██╗░░░░░██╗███████╗███████╗████████╗\r\n//     ██╔══██╗████╗░██║╚══██╔══╝██║░░░░░██║██╔════╝██╔════╝╚══██╔══╝\r\n//     ███████║██╔██╗██║░░░██║░░░██║░░░░░██║█████╗░░█████╗░░░░░██║░░░\r\n//     ██╔══██║██║╚████║░░░██║░░░██║██╗░░██║██╔══╝░░██╔══╝░░░░░██║░░░\r\n//     ██║░░██║██║░╚███║░░░██║░░░██║╚█████╔╝███████╗███████╗░░░██║░░░\r\n//     ╚═╝░░╚═╝╚═╝░░╚══╝░░░╚═╝░░░╚═╝░╚════╝░╚══════╝╚══════╝░░░╚═╝░░░\r\n\r\n// https://antijeet.xyz\r\n// https://twitter.com/AntiJeetETH\r\n// https://t.me/AntiJeetETH\r\n\r\nimport \"openzeppelin-contracts-master/openzeppelin-contracts-master/contracts/token/ERC20/IERC20.sol\";\r\nimport \"openzeppelin-contracts-master/openzeppelin-contracts-master/contracts/access/Ownable.sol\";\r\n\r\ninterface IUniswapV2Router02 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address UNISWAP_V2_PAIR);\r\n}\r\n\r\ncontract AntiJeet is IERC20, Ownable {\r\n        \r\n\r\n\r\n    \r\n    event Reflect(uint256 amountReflected, uint256 newTotalProportion);\r\n\r\n    \r\n    address constant DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address constant ZERO = 0x0000000000000000000000000000000000000000;\r\n\r\n    uint256 constant MAX_FEE = 20;\r\n\r\n   \r\n    IUniswapV2Router02 public constant UNISWAP_V2_ROUTER =\r\n        IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    address public immutable UNISWAP_V2_PAIR;\r\n\r\n    struct Fee {\r\n        uint8 reflection;\r\n        uint8 marketing;\r\n        uint8 lp;\r\n        uint8 buyback;\r\n        uint8 burn;\r\n        uint128 total;\r\n    }\r\n\r\n    string _name = \"AntiJeet\";\r\n    string _symbol = \"ANTIJEET\";\r\n\r\n    uint256 _totalSupply = 1_000_000_000 ether;\r\n    uint256 public _maxTxAmount = _totalSupply * 2 / 100;\r\n\r\n    /* rOwned = ratio of tokens owned relative to circulating supply (NOT total supply, since circulating <= total) */\r\n    mapping(address => uint256) public _rOwned;\r\n    uint256 public _totalProportion = _totalSupply;\r\n\r\n    mapping(address => mapping(address => uint256)) _allowances;\r\n\r\n    bool public limitsEnabled = true;\r\n    mapping(address => bool) isFeeExempt;\r\n    mapping(address => bool) isTxLimitExempt;\r\n\r\n    Fee public buyFee = Fee({reflection: 0, marketing: 0, lp: 0, buyback: 0, burn: 0, total: 0});\r\n    Fee public sellFee = Fee({reflection: 10, marketing: 5, lp: 2, buyback: 2, burn: 1, total: 20});\r\n\r\n    address private marketingFeeReceiver;\r\n    address private lpFeeReceiver;\r\n    address private buybackFeeReceiver;\r\n\r\n    bool public claimingFees = true;\r\n    uint256 public swapThreshold = (_totalSupply * 2) / 1000;\r\n    bool inSwap;\r\n    mapping(address => bool) public blacklists;\r\n\r\n    \r\n    modifier swapping() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    \r\n    constructor() Ownable(msg.sender) {\r\n    // create uniswap pair\r\n    address _uniswapPair =\r\n        IUniswapV2Factory(UNISWAP_V2_ROUTER.factory()).createPair(address(this), UNISWAP_V2_ROUTER.WETH());\r\n    UNISWAP_V2_PAIR = _uniswapPair;\r\n\r\n    _allowances[address(this)][address(UNISWAP_V2_ROUTER)] = type(uint256).max;\r\n    _allowances[address(this)][tx.origin] = type(uint256).max;\r\n\r\n    isTxLimitExempt[address(this)] = true;\r\n    isTxLimitExempt[address(UNISWAP_V2_ROUTER)] = true;\r\n    isTxLimitExempt[_uniswapPair] = true;\r\n    isTxLimitExempt[tx.origin] = true;\r\n    isFeeExempt[tx.origin] = true;\r\n\r\n    marketingFeeReceiver = 0xde103E305E7912876F6BF92CBdd41F73757510D4;\r\n    lpFeeReceiver = 0xBB4b347f0148623Bf5632fE0ea2566204c758Ab9;\r\n    buybackFeeReceiver = 0xfF368bBB432c4bF385cA91570C713560A45fFeA4;\r\n\r\n    _rOwned[tx.origin] = _totalSupply;\r\n    emit Transfer(address(0), tx.origin, _totalSupply);\r\n}\r\n\r\n\r\n    receive() external payable {}\r\n\r\n    \r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function approveMax(address spender) external returns (bool) {\r\n        return approve(spender, type(uint256).max);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        if (_allowances[sender][msg.sender] != type(uint256).max) {\r\n            require(_allowances[sender][msg.sender] >= amount, \"ERC20: insufficient allowance\");\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n        }\r\n\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    \r\n    function totalSupply() external view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function decimals() external pure returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function name() external view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() external view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function allowance(address holder, address spender) external view override returns (uint256) {\r\n        return _allowances[holder][spender];\r\n    }\r\n\r\n    function tokensToProportion(uint256 tokens) public view returns (uint256) {\r\n        return tokens * _totalProportion / _totalSupply;\r\n    }\r\n\r\n    function tokenFromReflection(uint256 proportion) public view returns (uint256) {\r\n        return proportion * _totalSupply / _totalProportion;\r\n    }\r\n\r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return _totalSupply - balanceOf(DEAD) - balanceOf(ZERO);\r\n    }\r\n\r\n    \r\n    function clearStuckBalance() external onlyOwner {\r\n        (bool success,) = payable(msg.sender).call{value: address(this).balance}(\"\");\r\n        require(success);\r\n    }\r\n\r\n    function clearStuckToken() external onlyOwner {\r\n        _transferFrom(address(this), msg.sender, balanceOf(address(this)));\r\n    }\r\n\r\n    function setSwapBackSettings(bool _enabled, uint256 _amount) external onlyOwner {\r\n        claimingFees = _enabled;\r\n        swapThreshold = _amount;\r\n    }\r\n\r\n    function changeFees(\r\n        uint8 reflectionFeeBuy,\r\n        uint8 marketingFeeBuy,\r\n        uint8 lpFeeBuy,\r\n        uint8 buybackFeeBuy,\r\n        uint8 burnFeeBuy,\r\n        uint8 reflectionFeeSell,\r\n        uint8 marketingFeeSell,\r\n        uint8 lpFeeSell,\r\n        uint8 buybackFeeSell,\r\n        uint8 burnFeeSell\r\n    ) external onlyOwner {\r\n        uint128 __totalBuyFee = reflectionFeeBuy + marketingFeeBuy + lpFeeBuy + buybackFeeBuy + burnFeeBuy;\r\n        uint128 __totalSellFee = reflectionFeeSell + marketingFeeSell + lpFeeSell + buybackFeeSell + burnFeeSell;\r\n\r\n        require(__totalBuyFee <= MAX_FEE, \"Buy fees too high\");\r\n        require(__totalSellFee <= MAX_FEE, \"Sell fees too high\");\r\n\r\n        buyFee = Fee({\r\n            reflection: reflectionFeeBuy,\r\n            marketing: reflectionFeeBuy,\r\n            lp: reflectionFeeBuy,\r\n            buyback: reflectionFeeBuy,\r\n            burn: burnFeeBuy,\r\n            total: __totalBuyFee\r\n        });\r\n\r\n        sellFee = Fee({\r\n            reflection: reflectionFeeSell,\r\n            marketing: reflectionFeeSell,\r\n            lp: reflectionFeeSell,\r\n            buyback: reflectionFeeSell,\r\n            burn: burnFeeSell,\r\n            total: __totalSellFee\r\n        });\r\n    }\r\n\r\n    function setIsFeeExempt(address holder, bool exempt) external onlyOwner {\r\n        isFeeExempt[holder] = exempt;\r\n    }\r\n\r\n    function setIsTxLimitExempt(address holder, bool exempt) external onlyOwner {\r\n        isTxLimitExempt[holder] = exempt;\r\n    }\r\n\r\n    function setFeeReceivers(address m_, address lp_, address b_) external onlyOwner {\r\n        marketingFeeReceiver = m_;\r\n        lpFeeReceiver = lp_;\r\n        buybackFeeReceiver = b_;\r\n    }\r\n\r\n    function setMaxTxBasisPoint(uint256 p_) external onlyOwner {\r\n        _maxTxAmount = _totalSupply * p_ / 10000;\r\n    }\r\n\r\n    function setLimitsEnabled(bool e_) external onlyOwner {\r\n        limitsEnabled = e_;\r\n    }\r\n\r\n    function blacklist(address _address, bool _isBlacklisting) external onlyOwner {\r\n        blacklists[_address] = _isBlacklisting;\r\n    }\r\n\r\n    \r\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        require(!blacklists[recipient] && !blacklists[sender], \"Blacklisted\");\r\n\r\n        if (inSwap) {\r\n            return _basicTransfer(sender, recipient, amount);\r\n        }\r\n\r\n        if (limitsEnabled && !isTxLimitExempt[sender] && !isTxLimitExempt[recipient]) {\r\n            require(amount <= _maxTxAmount, \"Transfer amount exceeds the maxTxAmount.\");\r\n        }\r\n\r\n        if (_shouldSwapBack()) {\r\n            _swapBack();\r\n        }\r\n\r\n        uint256 proportionAmount = tokensToProportion(amount);\r\n        require(_rOwned[sender] >= proportionAmount, \"Insufficient Balance\");\r\n        _rOwned[sender] = _rOwned[sender] - proportionAmount;\r\n\r\n        uint256 proportionReceived = _shouldTakeFee(sender, recipient)\r\n            ? _takeFeeInProportions(sender == UNISWAP_V2_PAIR ? true : false, sender, proportionAmount)\r\n            : proportionAmount;\r\n        _rOwned[recipient] = _rOwned[recipient] + proportionReceived;\r\n\r\n        emit Transfer(sender, recipient, tokenFromReflection(proportionReceived));\r\n        return true;\r\n    }\r\n\r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        uint256 proportionAmount = tokensToProportion(amount);\r\n        require(_rOwned[sender] >= proportionAmount, \"Insufficient Balance\");\r\n        _rOwned[sender] = _rOwned[sender] - proportionAmount;\r\n        _rOwned[recipient] = _rOwned[recipient] + proportionAmount;\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function _takeFeeInProportions(bool buying, address sender, uint256 proportionAmount) internal returns (uint256) {\r\n        Fee memory __buyFee = buyFee;\r\n        Fee memory __sellFee = sellFee;\r\n\r\n        uint256 proportionFeeAmount =\r\n            buying == true ? proportionAmount * __buyFee.total / 100 : proportionAmount * __sellFee.total / 100;\r\n\r\n        // reflect\r\n        uint256 proportionReflected = buying == true\r\n            ? proportionFeeAmount * __buyFee.reflection / __buyFee.total\r\n            : proportionFeeAmount * __sellFee.reflection / __sellFee.total;\r\n\r\n        _totalProportion = _totalProportion - proportionReflected;\r\n\r\n        // take fees\r\n        uint256 _proportionToContract = proportionFeeAmount - proportionReflected;\r\n        if (_proportionToContract > 0) {\r\n            _rOwned[address(this)] = _rOwned[address(this)] + _proportionToContract;\r\n\r\n            emit Transfer(sender, address(this), tokenFromReflection(_proportionToContract));\r\n        }\r\n        emit Reflect(proportionReflected, _totalProportion);\r\n        return proportionAmount - proportionFeeAmount;\r\n    }\r\n\r\n    function _shouldSwapBack() internal view returns (bool) {\r\n        return msg.sender != UNISWAP_V2_PAIR && !inSwap && claimingFees && balanceOf(address(this)) >= swapThreshold;\r\n    }\r\n\r\n    function _swapBack() internal swapping {\r\n        Fee memory __sellFee = sellFee;\r\n\r\n        uint256 __swapThreshold = swapThreshold;\r\n        uint256 amountToBurn = __swapThreshold * __sellFee.burn / __sellFee.total;\r\n        uint256 amountToSwap = __swapThreshold - amountToBurn;\r\n        approve(address(UNISWAP_V2_ROUTER), amountToSwap);\r\n\r\n        // burn\r\n        _transferFrom(address(this), DEAD, amountToBurn);\r\n\r\n        // swap\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = UNISWAP_V2_ROUTER.WETH();\r\n\r\n        UNISWAP_V2_ROUTER.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amountToSwap, 0, path, address(this), block.timestamp\r\n        );\r\n\r\n        uint256 amountETH = address(this).balance;\r\n\r\n        uint256 totalSwapFee = __sellFee.total - __sellFee.reflection - __sellFee.burn;\r\n        uint256 amountETHMarketing = amountETH * __sellFee.marketing / totalSwapFee;\r\n        uint256 amountETHLP = amountETH * __sellFee.lp / totalSwapFee;\r\n        uint256 amountETHBuyback = amountETH * __sellFee.buyback / totalSwapFee;\r\n\r\n        // send\r\n        (bool tmpSuccess,) = payable(marketingFeeReceiver).call{value: amountETHMarketing}(\"\");\r\n        (tmpSuccess,) = payable(lpFeeReceiver).call{value: amountETHLP}(\"\");\r\n        (tmpSuccess,) = payable(buybackFeeReceiver).call{value: amountETHBuyback}(\"\");\r\n    }\r\n\r\n    function _shouldTakeFee(address sender, address recipient) internal view returns (bool) {\r\n        return !isFeeExempt[sender] && !isFeeExempt[recipient];\r\n    }\r\n}"
    },
    "openzeppelin-contracts-master/openzeppelin-contracts-master/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.19;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "openzeppelin-contracts-master/openzeppelin-contracts-master/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.19;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "openzeppelin-contracts-master/openzeppelin-contracts-master/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.19;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}