{{
  "language": "Solidity",
  "sources": {
    "contracts/SFROGContract.sol": {
      "content": "/**\n *Submitted for verification at Etherscan.io on 2023-06-01\n*/\n\n/**\n\n$SFROG - SALUTING FROG\n\nhttps://salutingfrog.xyz\n\nhttps://t.me/SFROGPORTAL\n\nhttps://twitter.com/salutingfrog\n\n\n*/\n\n// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n   \n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ninterface IERC20Metadata is IERC20 {\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n}\n\nlibrary Address {\n    function sendValue(address payable recipient, uint256 amount) internal returns(bool){\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        return success;\n    }\n}\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n            unchecked {\n                _approve(sender, _msgSender(), currentAllowance - amount);\n            }\n        }\n\n        _transfer(sender, recipient, amount);\n\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n\ncontract SFROGContract is ERC20, Ownable {\n    using Address for address payable;\n\n    IUniswapV2Router02 public uniswapV2Router;\n    address public  uniswapV2Pair;\n\n    mapping (address => bool) private _isExcludedFromFees;\n\n    uint256 public  liquidityFeeOnBuy;\n    uint256 public  liquidityFeeOnSell;\n\n    uint256 public  marketingFeeOnBuy;\n    uint256 public  marketingFeeOnSell;\n\n    uint256 private _totalFeesOnBuy;\n    uint256 private _totalFeesOnSell;\n\n    // addresses\n    address public developmentWallet;\n    address public marketingWallet;\n\n    uint256 public  swapTokensAtAmount;\n    bool    private swapping;\n\n    bool    public swapEnabled;\n\n    uint256 public launchTime;\n    bool    public ladderTaxEnabled;\n\n    event ExcludeFromFees(address indexed account, bool isExcluded);\n    event MarketingWalletChanged(address marketingWallet);\n    event UpdateBuyFees(uint256 liquidityFeeOnBuy, uint256 marketingFeeOnBuy);\n    event UpdateSellFees(uint256 liquidityFeeOnSell, uint256 marketingFeeOnSell);\n    event UpdateWalletToWalletTransferFee(uint256 walletToWalletTransferFee);\n    event SwapAndLiquify(uint256 tokensSwapped,uint256 bnbReceived,uint256 tokensIntoLiqudity);\n    event SwapAndSendMarketing(uint256 tokensSwapped, uint256 bnbSend);\n    event SwapTokensAtAmountUpdated(uint256 swapTokensAtAmount);\n\n    constructor () ERC20(\"Saluting Frog\", \"SFROG\") \n    {   \n        address router;\n        if (block.chainid == 56) {\n            router = 0x10ED43C718714eb63d5aA57B78B54704E256024E; // BSC Pancake Mainnet Router\n        } else if (block.chainid == 97) {\n            router = 0xD99D1c33F9fC3444f8101754aBC46c52416550D1; // BSC Pancake Testnet Router\n        } else if (block.chainid == 1 || block.chainid == 5) {\n            router = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D; // ETH Uniswap Mainnet % Testnet\n        } else {\n            revert();\n        }\n\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(router);\n        address _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\n            .createPair(address(this), _uniswapV2Router.WETH());\n\n        uniswapV2Router = _uniswapV2Router;\n        uniswapV2Pair   = _uniswapV2Pair;\n\n        _approve(address(this), address(uniswapV2Router), type(uint256).max);\n\n        liquidityFeeOnBuy  = 0;\n        liquidityFeeOnSell = 0;\n\n        marketingFeeOnBuy  = 3000; // 30%\n        marketingFeeOnSell = 3000; // 30%\n\n        _totalFeesOnBuy    = liquidityFeeOnBuy  + marketingFeeOnBuy;\n        _totalFeesOnSell   = liquidityFeeOnSell + marketingFeeOnSell;\n\n        marketingWallet = 0xEcD9c2cB26a7D6DC56D41c2129FeBCc26d2E06f2;\n        developmentWallet = 0x3265403897b80DB188a240f3D49673b82ae60177;\n\n        maxTransactionLimitEnabled = false;\n\n        _isExcludedFromMaxTxLimit[owner()] = true;\n        _isExcludedFromMaxTxLimit[address(this)] = true;\n        _isExcludedFromMaxTxLimit[address(0xdead)] = true;\n        _isExcludedFromMaxTxLimit[marketingWallet] = true;\n\n        maxWalletLimitEnabled = false;\n\n        _isExcludedFromMaxWalletLimit[owner()] = true;\n        _isExcludedFromMaxWalletLimit[address(this)] = true;\n        _isExcludedFromMaxWalletLimit[address(0xdead)] = true;\n        _isExcludedFromMaxWalletLimit[marketingWallet] = true;\n\n        _isExcludedFromFees[owner()] = true;\n        _isExcludedFromFees[address(0xdead)] = true;\n        _isExcludedFromFees[address(this)] = true;\n\n        uint256 _totalSupply =  9_999_999_999_999 * (10 ** decimals());\n        uint256 devSupply = _totalSupply * 690 / 10000; // 6.9%\n        uint256 marketingSupply = _totalSupply * 1000 / 10000; // 10%\n        uint256 poolSupply = _totalSupply - (marketingSupply + devSupply); // 83.1%\n\n        _mint(marketingWallet, marketingSupply);\n        _mint(developmentWallet, devSupply);\n        _mint(msg.sender, poolSupply);\n\n        swapTokensAtAmount = totalSupply() / 5_000;\n\t\n        maxTransactionAmountBuy     = totalSupply() * 30 / 1000; // 3%\n        maxTransactionAmountSell    = totalSupply() * 30 / 1000; // 3%\n        maxWalletAmount             = totalSupply() * 30 / 1000; // 3%\n\n        tradingEnabled = false;\n        swapEnabled = false;\n    }\n\n    receive() external payable {\n\n  \t}\n\n    function claimStuckTokens(address token) external onlyOwner {\n        require(token != address(this), \"Owner cannot claim contract's balance of its own tokens\");\n        if (token == address(0x0)) {\n            payable(msg.sender).sendValue(address(this).balance);\n            return;\n        }\n        IERC20 ERC20token = IERC20(token);\n        uint256 balance = ERC20token.balanceOf(address(this));\n        ERC20token.transfer(msg.sender, balance);\n    }\n\n    function excludeFromFees(address account, bool excluded) external onlyOwner{\n        require(_isExcludedFromFees[account] != excluded,\"Account is already the value of 'excluded'\");\n        _isExcludedFromFees[account] = excluded;\n\n        emit ExcludeFromFees(account, excluded);\n    }\n\n    function isExcludedFromFees(address account) public view returns(bool) {\n        return _isExcludedFromFees[account];\n    }\n\n    function updateBuyFees(uint256 _liquidityFeeOnBuy, uint256 _marketingFeeOnBuy) external onlyOwner {\n        liquidityFeeOnBuy = _liquidityFeeOnBuy;\n        marketingFeeOnBuy = _marketingFeeOnBuy;\n\n        _totalFeesOnBuy   = liquidityFeeOnBuy + marketingFeeOnBuy;\n\n        require(_totalFeesOnBuy + _totalFeesOnSell <= 40000, \"Total Fees cannot exceed the maximum\");\n\n        emit UpdateBuyFees(liquidityFeeOnBuy, marketingFeeOnBuy);\n    }\n\n    function updateSellFees(uint256 _liquidityFeeOnSell, uint256 _marketingFeeOnSell) external onlyOwner {\n        liquidityFeeOnSell = _liquidityFeeOnSell;\n        marketingFeeOnSell = _marketingFeeOnSell;\n\n        _totalFeesOnSell   = liquidityFeeOnSell + marketingFeeOnSell;\n\n        require(_totalFeesOnBuy + _totalFeesOnSell <= 40000, \"Total Fees cannot exceed the maximum\");\n\n        emit UpdateSellFees(liquidityFeeOnSell, marketingFeeOnSell);\n    }\n\n    function serLadderTaxEnabled(bool _enabled) external onlyOwner {\n        ladderTaxEnabled = _enabled;\n    }\n\n    function changeMarketingWallet(address _marketingWallet) external onlyOwner{\n        require(_marketingWallet != marketingWallet,\"Marketing wallet is already that address\");\n        require(_marketingWallet != address(0),\"Marketing wallet cannot be the zero address\");\n        marketingWallet = _marketingWallet;\n\n        emit MarketingWalletChanged(marketingWallet);\n    }\n\n    bool public tradingEnabled;\n\n    function enableTrading() external onlyOwner{\n        require(!tradingEnabled, \"Trading already enabled.\");\n        tradingEnabled = true;\n        swapEnabled = true;\n        launchTime = block.timestamp;\n        ladderTaxEnabled = true;\n    }\n\n    function _transfer(address from,address to,uint256 amount) internal  override {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n        require(tradingEnabled || _isExcludedFromFees[from] || _isExcludedFromFees[to], \"Trading not yet enabled!\");\n       \n        if (amount == 0) {\n            super._transfer(from, to, 0);\n            return;\n        }\n\n        if (maxTransactionLimitEnabled) \n        {\n            if ((from == uniswapV2Pair || to == uniswapV2Pair) &&\n                !_isExcludedFromMaxTxLimit[from] && \n                !_isExcludedFromMaxTxLimit[to]\n            ) {\n                if (from == uniswapV2Pair) {\n                    require(\n                        amount <= maxTransactionAmountBuy,  \n                        \"AntiWhale: Transfer amount exceeds the maxTransactionAmount\"\n                    );\n                } else {\n                    require(\n                        amount <= maxTransactionAmountSell, \n                        \"AntiWhale: Transfer amount exceeds the maxTransactionAmount\"\n                    );\n                }\n            }\n        }\n\n\t\tuint256 contractTokenBalance = balanceOf(address(this));\n\n        bool canSwap = contractTokenBalance >= swapTokensAtAmount;\n\n        if (canSwap &&\n            !swapping &&\n            to == uniswapV2Pair &&\n            _totalFeesOnBuy + _totalFeesOnSell > 0 &&\n            swapEnabled\n        ) {\n            swapping = true;\n\n            uint256 totalFee = _totalFeesOnBuy + _totalFeesOnSell;\n            uint256 liquidityShare = liquidityFeeOnBuy + liquidityFeeOnSell;\n            uint256 marketingShare = marketingFeeOnBuy + marketingFeeOnSell;\n\n            if (liquidityShare > 0) {\n                uint256 liquidityTokens = contractTokenBalance * liquidityShare / totalFee;\n                swapAndLiquify(liquidityTokens);\n            }\n            \n            if (marketingShare > 0) {\n                uint256 marketingTokens = contractTokenBalance * marketingShare / totalFee;\n                swapAndSendMarketing(marketingTokens);\n            }          \n\n            swapping = false;\n        }\n\n        uint256 _totalFees;\n        if (_isExcludedFromFees[from] || _isExcludedFromFees[to] || swapping) {\n            _totalFees = 0;\n        } else if (from == uniswapV2Pair) {\n            _totalFees = _totalFeesOnBuy;\n        } else if (to == uniswapV2Pair) {\n            _totalFees = _totalFeesOnSell;\n        } else {\n            _totalFees = 0;\n        }\n\n        if (_totalFees > 0) {\n            uint256 fees = (amount * _totalFees) / 10_000;\n            amount = amount - fees;\n            super._transfer(from, address(this), fees);\n        }\n\n        if (maxWalletLimitEnabled) \n        {\n            if (!_isExcludedFromMaxWalletLimit[from] && \n                !_isExcludedFromMaxWalletLimit[to] &&\n                to != uniswapV2Pair\n            ) {\n                uint256 balance  = balanceOf(to);\n                require(\n                    balance + amount <= maxWalletAmount, \n                    \"MaxWallet: Recipient exceeds the maxWalletAmount\"\n                );\n            }\n        }\n\n        super._transfer(from, to, amount);\n    }\n\n    function setSwapEnabled(bool _enabled) external onlyOwner{\n        require(swapEnabled != _enabled, \"swapEnabled already at this state.\");\n        swapEnabled = _enabled;\n    }\n\n    function setSwapTokensAtAmount(uint256 newAmount) external onlyOwner{\n        require(newAmount > totalSupply() / 1_000_000, \"SwapTokensAtAmount must be greater than 0.0001% of total supply\");\n        swapTokensAtAmount = newAmount;\n\n        emit SwapTokensAtAmountUpdated(swapTokensAtAmount);\n    }\n\n    function swapAndLiquify(uint256 tokens) private {\n        uint256 half = tokens / 2;\n        uint256 otherHalf = tokens - half;\n\n        uint256 initialBalance = address(this).balance;\n\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = uniswapV2Router.WETH();\n\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            half,\n            0,\n            path,\n            address(this),\n            block.timestamp);\n        \n        uint256 newBalance = address(this).balance - initialBalance;\n\n        uniswapV2Router.addLiquidityETH{value: newBalance}(\n            address(this),\n            otherHalf,\n            0,\n            0,\n            address(0xdead),\n            block.timestamp\n        );\n\n        emit SwapAndLiquify(half, newBalance, otherHalf);\n    }\n\n    function swapAndSendMarketing(uint256 tokenAmount) private {\n        uint256 initialBalance = address(this).balance;\n\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = uniswapV2Router.WETH();\n\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0,\n            path,\n            address(this),\n            block.timestamp);\n\n        uint256 newBalance = address(this).balance - initialBalance;\n\n        payable(marketingWallet).sendValue(newBalance);\n\n        emit SwapAndSendMarketing(tokenAmount, newBalance);\n    }\n\n    mapping(address => bool) private _isExcludedFromMaxWalletLimit;\n    bool    public maxWalletLimitEnabled;\n    uint256 public maxWalletAmount;\n\n    event ExcludedFromMaxWalletLimit(address indexed account, bool isExcluded);\n    event MaxWalletLimitStateChanged(bool maxWalletLimit);\n    event MaxWalletLimitAmountChanged(uint256 maxWalletAmount);\n\n    function setEnableMaxWalletLimit(bool enable) external onlyOwner {\n        require(enable != maxWalletLimitEnabled,\"Max wallet limit is already set to that state\");\n        maxWalletLimitEnabled = enable;\n\n        emit MaxWalletLimitStateChanged(maxWalletLimitEnabled);\n    }\n\n    function setMaxWalletAmount(uint256 _maxWalletAmount) external onlyOwner {\n        require(_maxWalletAmount >= (totalSupply() / (10 ** decimals())) / 100, \"Max wallet percentage cannot be lower than 1%\");\n        maxWalletAmount = _maxWalletAmount * (10 ** decimals());\n\n        emit MaxWalletLimitAmountChanged(maxWalletAmount);\n    }\n\n    function excludeFromMaxWallet(address account, bool exclude) external onlyOwner {\n        require( _isExcludedFromMaxWalletLimit[account] != exclude,\"Account is already set to that state\");\n        _isExcludedFromMaxWalletLimit[account] = exclude;\n\n        emit ExcludedFromMaxWalletLimit(account, exclude);\n    }\n\n    function isExcludedFromMaxWalletLimit(address account) public view returns(bool) {\n        return _isExcludedFromMaxWalletLimit[account];\n    }\n\n    mapping(address => bool) private _isExcludedFromMaxTxLimit;\n    bool    public  maxTransactionLimitEnabled;\n    uint256 public  maxTransactionAmountBuy;\n    uint256 public  maxTransactionAmountSell;\n\n    event ExcludedFromMaxTransactionLimit(address indexed account, bool isExcluded);\n    event MaxTransactionLimitStateChanged(bool maxTransactionLimit);\n    event MaxTransactionLimitAmountChanged(uint256 maxTransactionAmountBuy, uint256 maxTransactionAmountSell);\n\n    function setEnableMaxTransactionLimit(bool enable) external onlyOwner {\n        require(enable != maxTransactionLimitEnabled, \"Max transaction limit is already set to that state\");\n        maxTransactionLimitEnabled = enable;\n\n        emit MaxTransactionLimitStateChanged(maxTransactionLimitEnabled);\n    }\n\n    function setMaxTransactionAmounts(uint256 _maxTransactionAmountBuy, uint256 _maxTransactionAmountSell) external onlyOwner {\n        require(\n            _maxTransactionAmountBuy  >= (totalSupply() / (10 ** decimals())) / 1_000 && \n            _maxTransactionAmountSell >= (totalSupply() / (10 ** decimals())) / 1_000, \n            \"Max Transaction limis cannot be lower than 0.1% of total supply\"\n        ); \n        maxTransactionAmountBuy  = _maxTransactionAmountBuy  * (10 ** decimals());\n        maxTransactionAmountSell = _maxTransactionAmountSell * (10 ** decimals());\n\n        emit MaxTransactionLimitAmountChanged(maxTransactionAmountBuy, maxTransactionAmountSell);\n    }\n\n    function excludeFromMaxTransactionLimit(address account, bool exclude) external onlyOwner {\n        require( _isExcludedFromMaxTxLimit[account] != exclude, \"Account is already set to that state\");\n        require(account != address(this), \"Can't set this address.\");\n\n        _isExcludedFromMaxTxLimit[account] = exclude;\n\n        emit ExcludedFromMaxTransactionLimit(account, exclude);\n    }\n\n    function isExcludedFromMaxTransaction(address account) public view returns(bool) {\n        return _isExcludedFromMaxTxLimit[account];\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}