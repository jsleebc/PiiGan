{{
  "language": "Solidity",
  "sources": {
    "MB_VERIFY.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\";\nimport \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\";\nimport \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\";\nimport \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\";\n\ncontract MagicBag is Ownable, IERC20 {\n    using SafeMath for uint256;\n\n    string  private _name;\n    string  private _symbol;\n    uint8   private _decimals;\n    uint256 private _totalSupply;\n\n    uint256 public maxWalletLimit;\n    uint256 public maxTxLimit;\n\n    address payable public treasury;\n    address private constant DEAD = 0x000000000000000000000000000000000000dEaD;\n\n    uint256 public buyTax;\n    uint256 public sellTax;\n    bool    public tradingActive;\n\n    uint256 public totalBurned;\n    uint256 public totalLpAdded;\n    uint256 public totalReflected;\n    uint256 public totalTreasury;\n    bool    public burnStatus;\n    bool    public autoLpStatus;\n    bool    public reflectionStatus;\n    bool    public treasuryStatus;\n\n    uint256 public swapableRefection;\n    uint256 public swapableTreasury;\n\n    IUniswapV2Router02 public dexRouter; \n    address public lpPair;\n\n    uint256 public ethReflectionBasis;\n    uint256 public reflectionCooldown;\n\n    mapping(address => uint256) private _balances;\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    mapping(address => uint256) public  lastReflectionBasis;\n    mapping(address => uint256) public  totalClaimedReflection;\n    mapping(address => uint256) public  lastReflectionCooldown;\n    mapping(address => uint256) private _claimableReflection;\n    mapping(address => bool)    private _reflectionExcluded;\n\n    mapping(address => bool) public  lpPairs;\n    mapping(address => bool) private _isExcludedFromTax;\n    mapping(address => bool) private _bots;\n\n    event functionType (uint Type, address indexed sender, uint256 amount);\n    event reflectionClaimed (address indexed recipient, uint256 amount);\n    event burned (address indexed sender, uint256 amount);\n    event autoLpadded (address indexed sender, uint256 amount);\n    event reflected (address indexed sender, uint256 amount);\n    event addedTreasury (address indexed sender, uint256 amount);\n    event buyTaxStatus (uint256 previousBuyTax, uint256 newBuyTax);\n    event sellTaxStatus (uint256 previousSellTax, uint256 newSellTax);\n\n    constructor(string memory name_, \n                string memory symbol_,\n                uint256 totalSupply_,\n                address payable _treasury,\n                uint256 _reflectionCooldown,\n                uint256 maxTxLimit_, \n                uint256 maxWalletLimit_) {\n        _name              = name_;\n        _symbol            = symbol_;\n        _decimals          = 18;\n        _totalSupply       = totalSupply_.mul(10 ** _decimals);\n        _balances[owner()] = _balances[owner()].add(_totalSupply);\n\n        treasury       = payable(_treasury);\n        sellTax        = 40;\n        buyTax         = 10;\n        maxTxLimit     = maxTxLimit_;\n        maxWalletLimit = maxWalletLimit_;\n        reflectionCooldown = _reflectionCooldown; \n\n        // BSC Router: 0xD99D1c33F9fC3444f8101754aBC46c52416550D1\n        // ETH Router: 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\n        dexRouter = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n        lpPair    = IUniswapV2Factory(dexRouter.factory()).createPair(address(this), dexRouter.WETH());\n        lpPairs[lpPair] = true;\n\n        _approve(owner(), address(dexRouter), type(uint256).max);\n        _approve(address(this), address(dexRouter), type(uint256).max);\n\n        _isExcludedFromTax[owner()]       = true;\n        _isExcludedFromTax[address(this)] = true;\n        _isExcludedFromTax[lpPair]        = true;\n        _isExcludedFromTax[treasury]      = true;\n\n        emit Transfer(address(0), owner(), _totalSupply);\n        emit Approval(owner(), address(dexRouter), type(uint256).max);\n        emit Approval(address(this), address(dexRouter), type(uint256).max);\n    }\n\n    receive() external payable {}\n\n    /// @notice ERC20 functionalities\n\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address account) public override view returns (uint256) {\n        return _balances[account];\n    }\n\n    function approve(address spender, uint256 amount) public override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function _approve(address sender, address spender, uint256 amount) internal {\n        require(sender  != address(0), \"ERC20: Zero Address\");\n        require(spender != address(0), \"ERC20: Zero Address\");\n\n        _allowances[sender][spender] = amount;\n        emit Approval(sender, spender, amount);\n    }\n\n    function allowance(address sender, address spender) public override view returns (uint256) {\n        return _allowances[sender][spender];\n    }\n\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\n        address _sender = _msgSender();\n        require(_sender   != address(0), \"ERC20: Zero Address\");\n        require(recipient != address(0), \"ERC20: Zero Address\");\n        require(recipient != DEAD, \"ERC20: Dead Address\");\n        require(_balances[_sender] >= amount, \"ERC20: Amount exceeds account balance\");\n\n        _transfer(_sender, recipient, amount);\n\n        return true;\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n        require(sender    != address(0), \"ERC20: Zero Address\");\n        require(recipient != address(0), \"ERC20: Zero Address\");\n        require(recipient != DEAD, \"ERC20: Dead Address\");\n        require(_allowances[sender][_msgSender()] >= amount, \"ERC20: Insufficient allowance.\");\n        require(_balances[sender] >= amount, \"ERC20: Amount exceeds sender's account balance\");\n\n        if (_allowances[sender][_msgSender()] != type(uint256).max) {\n            _allowances[sender][_msgSender()]  = _allowances[sender][_msgSender()].sub(amount);\n        }\n        _transfer(sender, recipient, amount);\n\n        return true;\n    }\n\n    function _transfer(address sender, address recipient, uint256 amount) internal {\n        require(_bots[sender] == false && _bots[recipient] == false, \"ERC20: Bots can't trade\");\n\n        if (sender == owner() && lpPairs[recipient]) {\n            _transferBothExcluded(sender, recipient, amount);\n        }\n        else if (lpPairs[sender] || lpPairs[recipient]){\n            require(tradingActive == true, \"ERC20: Trading is not active.\");\n            \n            if (_isExcludedFromTax[sender] && !_isExcludedFromTax[recipient]){\n                if (_checkMaxWalletLimit(recipient, amount) && _checkMaxTxLimit(amount)) {\n                    _transferFromExcluded(sender, recipient, amount);//buy\n                } \n            }   \n            else if (!_isExcludedFromTax[sender] && _isExcludedFromTax[recipient]){\n                if (_checkMaxTxLimit(amount)) {\n                    _transferToExcluded(sender, recipient, amount);//sell\n                }\n            }\n            else if (_isExcludedFromTax[sender] && _isExcludedFromTax[recipient]) {\n                if (sender == owner() || recipient == owner() || sender == address(this) || recipient == address(this)) {\n                    _transferBothExcluded(sender, recipient, amount);\n                } else if (lpPairs[recipient]) {\n                    if (_checkMaxTxLimit(amount)) {\n                        _transferBothExcluded(sender, recipient, amount);\n                    }\n                } else if (_checkMaxWalletLimit(recipient, amount) && _checkMaxTxLimit(amount)){\n                    _transferBothExcluded(sender, recipient, amount);\n                }\n            } \n        } else {\n            if (sender == owner() || recipient == owner() || sender == address(this) || recipient == address(this)) {\n                    _transferBothExcluded(sender, recipient, amount);\n            } else if(_checkMaxWalletLimit(recipient, amount) && _checkMaxTxLimit(amount)){\n                    _transferBothExcluded(sender, recipient, amount);\n            }\n        }\n    }\n\n    function _transferFromExcluded(address sender, address recipient, uint256 amount) private { //Buy\n        uint256 _randomNumber = _generateRandomNumber();\n        uint256 taxAmount     = amount.mul(buyTax).div(100);\n        uint256 receiveAmount = amount.sub(taxAmount);\n\n        _claimableReflection[recipient] = _claimableReflection[recipient].add(_unclaimedReflection(recipient)); \n        lastReflectionBasis[recipient]  = ethReflectionBasis;\n\n        _balances[sender]    = _balances[sender].sub(amount);\n        _balances[recipient] = _balances[recipient].add(receiveAmount);\n        _balances[address(this)] = _balances[address(this)].add(taxAmount);\n\n        if (_randomNumber == 1) {\n            _balances[address(this)] = _balances[address(this)].sub(taxAmount);\n            _burn(recipient, taxAmount);\n        } else if (_randomNumber == 2) {\n            _balances[address(this)] = _balances[address(this)].sub(taxAmount);\n            _autoLp(recipient, taxAmount);\n        } else if (_randomNumber == 3) {\n            swapableRefection = swapableRefection.add(taxAmount);\n            totalReflected    = totalReflected.add(taxAmount);\n            emit reflected(recipient, taxAmount);\n        } else if(_randomNumber == 4) {\n            swapableTreasury = swapableTreasury.add(taxAmount);\n            totalTreasury    = totalTreasury.add(taxAmount);\n            emit addedTreasury(recipient, taxAmount);\n        }\n\n        emit functionType(_randomNumber, sender, taxAmount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    function _transferToExcluded(address sender, address recipient, uint256 amount) private { //Sell\n        uint256 _randomNumber = _generateRandomNumber();\n        uint256 taxAmount     = amount.mul(sellTax).div(100);\n        uint256 sentAmount = amount.sub(taxAmount);\n\n        _balances[sender]    = _balances[sender].sub(amount);\n        _balances[recipient] = _balances[recipient].add(sentAmount);\n        _balances[address(this)] = _balances[address(this)].add(taxAmount);\n\n        if(_balances[sender] == 0) {\n            _claimableReflection[recipient] = 0;\n        }\n\n        if (_randomNumber == 1) {\n            _balances[address(this)] = _balances[address(this)].sub(taxAmount);\n            _burn(sender, taxAmount);\n        } else if (_randomNumber == 2) {\n            _balances[address(this)] = _balances[address(this)].sub(taxAmount);\n            _autoLp(sender, taxAmount);\n        } else if (_randomNumber == 3) {\n            swapableRefection = swapableRefection.add(taxAmount);\n            totalReflected    = totalReflected.add(taxAmount);\n            emit reflected(sender, taxAmount);\n        } else if(_randomNumber == 4) {\n            swapableTreasury = swapableTreasury.add(taxAmount);\n            totalTreasury    = totalTreasury.add(taxAmount);\n            emit addedTreasury(sender, taxAmount);\n        }\n\n        emit functionType(_randomNumber, sender, taxAmount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    function _transferBothExcluded(address sender, address recipient, uint256 amount) private {\n        if(recipient == owner() || recipient == address(this)){\n            _balances[sender]    = _balances[sender].sub(amount);\n            _balances[recipient] = _balances[recipient].add(amount);\n        } else {\n            _claimableReflection[recipient] = _claimableReflection[recipient].add(_unclaimedReflection(recipient)); \n            lastReflectionBasis[recipient]  = ethReflectionBasis;\n\n            _balances[sender]    = _balances[sender].sub(amount);\n            _balances[recipient] = _balances[recipient].add(amount);\n        }\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /// @notice Burn Functionalities\n\n    function burn(uint256 amount) public returns (bool) {\n        address sender = _msgSender();\n        require(_balances[sender] >= amount, \"ERC20: Burn Amount exceeds account balance\");\n        require(amount > 0, \"ERC20: Enter some amount to burn\");\n\n        _balances[sender] = _balances[sender].sub(amount);\n        _burn(sender, amount);\n\n        return true;\n    }\n\n    function _burn(address from, uint256 amount) internal {\n        _totalSupply = _totalSupply.sub(amount);\n        totalBurned  = totalBurned.add(amount);\n\n        emit Transfer(from, address(0), amount);\n        emit burned(from, amount);\n    }\n\n    /// @notice AutoLp Functionalities\n\n    function _autoLp(address from, uint256 amount) private {\n        if (amount > 0) {\n            _balances[lpPair]  = _balances[lpPair].add(amount);\n            totalLpAdded = totalLpAdded.add(amount);\n\n            emit Transfer(from, lpPair, amount);\n            emit autoLpadded(from, amount);\n        }\n    }\n\n    /// @notice Reflection Functionalities\n\n    function addReflection() public payable returns (bool) {\n        ethReflectionBasis = ethReflectionBasis.add(msg.value);\n        return true;\n    }\n\n    function excludeFromReflection(address account) public onlyOwner returns (bool) {\n        require(!_reflectionExcluded[account], \"ERC20: Account is already excluded from reflection\");\n        _reflectionExcluded[account] = true;\n        return true;\n    }\n\n    function includeInReflection(address account) public onlyOwner returns (bool) {\n        require(_reflectionExcluded[account], \"ERC20: Account is not excluded from reflection\");\n        _reflectionExcluded[account] = false;\n        return true;\n    }\n\n    function isReflectionExcluded(address account) public view returns (bool) {\n        return _reflectionExcluded[account];\n    }\n\n    function setReflectionCooldown(uint256 unixTime) public onlyOwner returns (bool) {\n        require(reflectionCooldown != unixTime, \"ERC20: New Timestamp can't be the previous one\");\n        reflectionCooldown = unixTime;\n        return true;\n    }\n\n    function unclaimedReflection(address account) public view returns (uint256) {\n        if (account == lpPair || account == address(dexRouter)) return 0;\n\n        uint256 basisDifference = ethReflectionBasis - lastReflectionBasis[account];\n        return ((basisDifference * balanceOf(account)) / _totalSupply) + (_claimableReflection[account]);\n    }\n\n    function _unclaimedReflection(address account) private view returns(uint256) {\n        if (account == lpPair || account == address(dexRouter)) return 0;\n\n        uint256 basisDifference = ethReflectionBasis - lastReflectionBasis[account];\n        return (basisDifference * balanceOf(account)) / _totalSupply;\n    }\n\n    function claimReflection() external returns (bool) {\n        address sender = _msgSender(); \n        require(!_isContract(sender), \"ERC20: Sender can't be a contract\"); \n        require(lastReflectionCooldown[sender] + reflectionCooldown <= block.timestamp, \"ERC20: Reflection cool down is implemented, try again later\");\n        _claimReflection(payable(sender));\n        return true;\n    }\n\n    function _claimReflection(address payable account) private {\n        uint256 unclaimed = unclaimedReflection(account);\n        require(unclaimed > 0, \"ERC20: Claim amount should be more then 0\");\n        require(isReflectionExcluded(account) == false, \"ERC20: Address is excluded to claim reflection\");\n        \n        lastReflectionBasis[account]  = ethReflectionBasis;\n        lastReflectionCooldown[account] = block.timestamp;\n        _claimableReflection[account] = 0;\n        account.transfer(unclaimed);\n\n        totalClaimedReflection[account] = totalClaimedReflection[account].add(unclaimed);\n        emit reflectionClaimed(account, unclaimed);\n    }\n\n    /// @notice Magic Bag Functionalities\n\n    function enableTrading() public onlyOwner returns (bool) {\n        require(tradingActive == false, \"ERC20: Trading is already active\");\n        tradingActive = true;\n        return true;\n    }\n\n    function disableTrading() public onlyOwner returns (bool) {\n        require(tradingActive == true, \"ERC20: Trading is already un-active\");\n        tradingActive = false;\n        return true;\n    }\n\n    function setBuyTax(uint256 _buyTax) public onlyOwner returns (bool) {\n        require(_buyTax <= 15, \"ERC20: The buy tax can't be more then 15 percentage\");\n        uint256 _prevBuyTax = buyTax;\n        buyTax = _buyTax;\n\n        emit buyTaxStatus(_prevBuyTax, buyTax);\n        return true;\n    }\n\n    function setSellTax(uint256 _sellTax) public onlyOwner returns (bool) {\n        require(_sellTax <= 15, \"ERC20: The sell tax can't be more then 15 percentage\");\n        uint256 _prevSellTax = sellTax;\n        sellTax = _sellTax;\n\n        emit sellTaxStatus(_prevSellTax, sellTax);\n        return true;\n    }\n\n    function removeAllTax() public onlyOwner returns (bool) {\n        require(buyTax > 0 && sellTax > 0, \"ERC20: Taxes are already removed\");\n        uint256 _prevBuyTax = buyTax;\n        uint256 _prevSellTax = sellTax;\n\n        buyTax  = 0;\n        sellTax = 0;\n\n        emit buyTaxStatus(_prevBuyTax, buyTax);\n        emit sellTaxStatus(_prevSellTax, sellTax);\n        return true;\n    }\n\n    function reduceTaxes() public onlyOwner returns (bool) {\n        uint256 _prevBuyTax = buyTax;\n        uint256 _prevSellTax = sellTax;\n\n        buyTax  = 5;\n        sellTax = 5;\n\n        emit buyTaxStatus(_prevBuyTax, buyTax);\n        emit sellTaxStatus(_prevSellTax, sellTax);\n        return true;\n    }\n\n    function excludeFromTax(address account) public onlyOwner returns (bool) {\n        require(!_isExcludedFromTax[account], \"ERC20: Account is already excluded from tax\");\n        _isExcludedFromTax[account] = true;\n        return true;\n    }\n\n    function includeInTax(address account) public onlyOwner returns (bool) {\n        require(_isExcludedFromTax[account], \"ERC20: Account is already included from tax\");\n        _isExcludedFromTax[account] = false;\n        return true;\n    }\n\n    function isExcludedFromTax(address account) public view returns (bool) {\n        return _isExcludedFromTax[account];\n    }\n\n    function setTreasuryAddress(address payable account) public onlyOwner returns (bool) {\n        require(treasury != account, \"ERC20: Account is already treasury address\");\n        treasury = account;\n        return true;\n    }\n\n    function setMaxWalletLimit(uint256 amount) public onlyOwner returns (bool) {\n        maxWalletLimit = amount;\n        return true;\n    }\n\n    function setMaxTxLimit(uint256 amount) public onlyOwner returns (bool) {\n        maxTxLimit = amount;\n        return true;\n    }\n\n    function addBot(address botAccount) public onlyOwner returns (bool) {\n        _bots[botAccount] = true;\n        return true;\n    }\n\n    function addBotsInBulk(address[] memory botsAccounts) public onlyOwner returns (bool) {\n        for(uint i = 0; i < botsAccounts.length; i++) {\n            _bots[botsAccounts[i]] = true;\n        }\n        return true;\n    }\n\n    function removeBot(address botAccount) public onlyOwner returns (bool) {\n        _bots[botAccount] = false;\n        return true;\n    }\n\n    function isBot(address botAccount) public view returns (bool) {\n        return _bots[botAccount];\n    }\n\n    function setLpPair(address LpAddress, bool status) public onlyOwner returns (bool) {\n        lpPairs[LpAddress] = status;\n        _isExcludedFromTax[LpAddress] = status;\n\n        return true;\n    }\n\n    function swapReflection(uint256 amount) public onlyOwner returns (bool) {\n        require(swapableRefection > 0, \"ERC20: There are no tokens to swap\");\n        require(swapableRefection >= amount, \"ERC20: Low swapable reflection\");\n \n        uint256 currentBalance = address(this).balance;\n        _swap(address(this), amount);\n        swapableRefection = swapableRefection - amount;\n\n        uint256 ethTransfer = (address(this).balance).sub(currentBalance);\n        ethReflectionBasis  = ethReflectionBasis.add(ethTransfer);\n        return true;\n    }\n\n    function swapTreasury(uint256 amount) public returns (bool) { // add only owner\n        require(swapableTreasury > 0, \"ERC20: There are no tokens to swap\");\n        require(swapableTreasury >= amount, \"ERC20: Low swapable reflection\");\n\n        _swap(treasury, amount);\n        swapableTreasury = swapableTreasury - amount;\n\n        return true;\n    }\n\n    function recoverAllEth(address to) public onlyOwner returns (bool) {\n        payable(to).transfer(address(this).balance);\n        return true;\n    }\n\n    function recoverAllERC20Tokens(address to, address tokenAddress, uint256 amount) public onlyOwner returns (bool) {\n        IERC20(tokenAddress).transfer(to, amount);\n        return true;\n    }\n\n    /// @notice Magical Functionalities\n\n    function pauseBurn() public onlyOwner returns (bool) {\n        require(burnStatus == false, \"ERC20: Token Burn is already paused\");\n\n        if(autoLpStatus == true && reflectionStatus == true && treasuryStatus == true) {\n            revert(\"ERC20: All four functionalities can't get paused at the same time\");\n        } else {\n            burnStatus = true;\n        }\n        return true;\n    }\n\n    function pauseAutoLp() public onlyOwner returns (bool) {\n        require(autoLpStatus == false, \"ERC20: Auto LP is already paused\");\n\n        if(burnStatus == true && reflectionStatus == true && treasuryStatus == true) {\n            revert(\"ERC20: All four functionalities can't get paused at the same time\");\n        } else {\n            autoLpStatus = true;\n        }\n        return true;\n    }\n\n    function pauseReflection() public onlyOwner returns (bool) {\n        require(reflectionStatus == false, \"ERC20: Reflection is already paused\");\n\n        if(burnStatus == true && autoLpStatus == true && treasuryStatus == true) {\n            revert(\"ERC20: All four functionalities can't get paused at the same time\");\n        } else {\n            reflectionStatus = true;\n        }\n        return true;\n    }\n\n    function pauseTreasury() public onlyOwner returns (bool) {\n        require(treasuryStatus == false, \"ERC20: Treasury is already paused\");\n\n        if(burnStatus == true && autoLpStatus == true && reflectionStatus == true) {\n            revert(\"ERC20: All four functionalities can't get paused at the same time\");\n        } else {\n            treasuryStatus = true;\n        }\n        return true;\n    }\n\n    function unpauseBurn() public onlyOwner returns (bool) {\n        require(burnStatus == true, \"ERC20: Token Burn is already not paused\");\n        burnStatus = false;\n        return true;\n    }\n\n    function unpauseAutoLp() public onlyOwner returns (bool) {\n        require(autoLpStatus == true, \"ERC20: Auto LP is already not paused\");\n        autoLpStatus = false;\n        return true;\n    }\n\n    function unpauseReflection() public onlyOwner returns (bool) {\n        require(reflectionStatus == true, \"ERC20: Reflection is already not paused\");\n        reflectionStatus = false;\n        return true;\n    }\n\n    function unpauseTreasury() public onlyOwner returns (bool) {\n        require(treasuryStatus == true, \"ERC20: Treasury is already paused\");\n        treasuryStatus = false;\n        return true;\n    }\n\n    /// @notice Private Functionalities \n\n    function _generateRandomNumber() private view returns (uint256) {\n        uint256 returnNumber;\n        uint256 rem1 = uint256(keccak256(abi.encodePacked(block.timestamp, block.difficulty, block.gaslimit, tx.origin, block.number, tx.gasprice))) % 2;\n        uint256 rem2 = uint256(keccak256(abi.encodePacked(block.timestamp, block.difficulty, block.gaslimit, tx.origin, block.number, tx.gasprice))) % 3; \n\n        if(burnStatus == true && autoLpStatus == true && reflectionStatus == true) { \n            returnNumber = 4;\n        } \n        else if(burnStatus == true && autoLpStatus == true && treasuryStatus == true) {\n            returnNumber = 3;\n        } \n        else if(burnStatus == true && reflectionStatus == true && treasuryStatus == true) {\n            returnNumber = 2;\n        } \n        else if(autoLpStatus == true && reflectionStatus == true && treasuryStatus == true) {\n            returnNumber = 1;\n        } \n        \n        else if(burnStatus == true && autoLpStatus == true) {\n            if (rem1 == 0) {returnNumber = 3;}\n            else if (rem1 == 1) {returnNumber = 4;}\n        } \n        else if(burnStatus == true && reflectionStatus == true) {\n            if (rem1 == 0) {returnNumber = 2;}\n            else if (rem1 == 1) {returnNumber = 4;}\n        } \n        else if(burnStatus == true && treasuryStatus == true) {\n            if (rem1 == 0) {returnNumber = 2;}\n            else if (rem1 == 1) {returnNumber = 3;}\n        } \n        else if(autoLpStatus == true && reflectionStatus == true) {\n            if (rem1 == 0) {returnNumber = 1;}\n            else if (rem1 == 1) {returnNumber = 4;}\n        } else if(autoLpStatus == true && treasuryStatus == true) {\n            if (rem1 == 0) {returnNumber = 1;}\n            else if (rem1 == 1) {returnNumber = 3;}\n        } \n        else if(reflectionStatus == true && treasuryStatus == true) {\n            if (rem1 == 0) {returnNumber = 1;}\n            else if (rem1 == 1) {returnNumber = 2;}\n        } \n\n        else if(burnStatus == true) {\n            returnNumber = (uint256(keccak256(abi.encodePacked(block.timestamp, block.difficulty, block.gaslimit, tx.origin, block.number, tx.gasprice))) % 3) + 2;\n        }\n        else if(autoLpStatus == true) {\n            if(rem2 == 0) {returnNumber = 1;}\n            else if(rem2 == 1) {returnNumber = 3;}\n            else if(rem2 == 2) {returnNumber = 4;}\n        }\n        else if(reflectionStatus == true) {\n            if(rem2 == 0) {returnNumber = 1;}\n            else if(rem2 == 1) {returnNumber = 2;}\n            else if(rem2 == 2) {returnNumber = 4;}\n        }\n        else if(treasuryStatus == true) {\n            returnNumber = (uint256(keccak256(abi.encodePacked(block.timestamp, block.difficulty, block.gaslimit, tx.origin, block.number, tx.gasprice))) % 3) + 1;\n        }\n        else {\n            returnNumber = (uint256(keccak256(abi.encodePacked(block.timestamp, block.difficulty, block.gaslimit, tx.origin, block.number, tx.gasprice))) % 4) + 1;\n        }\n\n        return returnNumber;\n    }\n\n    function _checkMaxWalletLimit(address recipient, uint256 amount) private view returns (bool) {\n        require(maxWalletLimit >= balanceOf(recipient).add(amount), \"ERC20: Wallet limit exceeds\");\n        return true;\n    }\n\n    function _checkMaxTxLimit(uint256 amount) private view returns (bool) {\n        require(amount <= maxTxLimit, \"ERC20: Transaction limit exceeds\");\n        return true;\n    }\n\n    function _isContract(address _addr) private view returns (bool){\n        uint32 size;\n        assembly {\n            size := extcodesize(_addr)\n        }\n        return (size > 0);\n    }\n\n    function _swap(address recipient, uint256 amount) private {\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = dexRouter.WETH();\n\n        dexRouter.swapExactTokensForETH(\n            amount,\n            0,\n            path,\n            recipient, \n            block.timestamp\n        );\n    }\n}"
    },
    "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol": {
      "content": "pragma solidity >=0.6.2;\n\nimport './IUniswapV2Router01.sol';\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n"
    },
    "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol": {
      "content": "pragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"
    },
    "@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n"
    },
    "@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}