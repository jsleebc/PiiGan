{{
  "language": "Solidity",
  "sources": {
    "interfaces/IUniswapV2Factory.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}"
    },
    "interfaces/IUniswapV2Pair.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}"
    },
    "interfaces/IUniswapV2Router01.sol": {
      "content": "pragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}"
    },
    "interfaces/IUniswapV2Router02.sol": {
      "content": "pragma solidity >=0.6.2;\n\nimport './IUniswapV2Router01.sol';\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "src/ReapersPump.sol": {
      "content": "/* o__ __o         o__ __o__/_          o           o__ __o     o__ __o__/_   o__ __o         o       o__ __o    \n* <|     v\\       <|    v              <|>         <|     v\\   <|    v       <|     v\\       <|>     /v     v\\   \n* / \\     <\\      < >                  / \\         / \\     <\\  < >           / \\     <\\      < >    />       <\\  \n* \\o/     o/       |                 o/   \\o       \\o/     o/   |            \\o/     o/            _\\o____       \n*  |__  _<|        o__/_            <|__ __|>       |__  _<|/   o__/_         |__  _<|                  \\_\\__o__ \n*  |       \\       |                /       \\       |           |             |       \\                       \\  \n* <o>       \\o    <o>             o/         \\o    <o>         <o>           <o>       \\o           \\         /  \n*  |         v\\    |             /v           v\\    |           |             |         v\\           o       o   \n* / \\         <\\  / \\  _\\o__/_  />             <\\  / \\         / \\  _\\o__/_  / \\         <\\          <\\__ __/>   \n*\n*                                 \n*  o__ __o     o         o    o          o    o__ __o   \n* <|     v\\   <|>       <|>  <|\\        /|>  <|     v\\  \n* / \\     <\\  / \\       / \\  / \\\\o    o// \\  / \\     <\\ \n* \\o/     o/  \\o/       \\o/  \\o/ v\\  /v \\o/  \\o/     o/ \n*  |__  _<|/   |         |    |   <\\/>   |    |__  _<|/ \n*  |          < >       < >  / \\        / \\   |         \n* <o>          \\         /   \\o/        \\o/  <o>        \n*  |            o       o     |          |    |         \n* / \\           <\\__ __/>    / \\        / \\  / \\                                                                                                                      \n*                                                                                                                                                                                                                                                                       \n*                                                                                                                                                                          \n* Reaper will come for you in three days, but in the meantime he has more important things to do.\n* Reaper kills 13% of tokens in lp daily.\n*\n* https://twitter.com/ReapersPump\n* https://reaperspump.xyz/\n* https://t.me/reaperspump\n**/\n\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.17;\n\nimport \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\";\nimport \"interfaces/IUniswapV2Router02.sol\";\nimport \"interfaces/IUniswapV2Pair.sol\";\nimport \"interfaces/IUniswapV2Factory.sol\";\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract ReapersPump is IERC20, Ownable {\n    string public name = \"REAPERS PUMP\";\n    string public symbol = \"RP\";\n    uint8 public decimals = 18;\n    uint256 public totalSupply;\n    bool reaperAwake;\n\n    uint256 public sellTax = 300;\n    uint256 public lastKillTimestamp;\n\n    uint256 maxWallet;\n\n    mapping(address => uint256) public balanceOf;\n    mapping(address => mapping(address => uint256)) private _allowances;\n    mapping(address => bool) isExcludedFromTax;\n\n    mapping(address => uint256) public _firstReceivedBlock;\n    mapping(address => bool) public _immortal;\n\n    IUniswapV2Pair public uniswapV2Pair;\n    IUniswapV2Router02 public uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n    address payable treasury = payable(0x4234D583a7E2ec78aC5A172a96FD443c584028A7);\n\n    constructor() {\n        totalSupply = 66_666_666e18;\n        balanceOf[msg.sender] = totalSupply;\n\n        maxWallet = totalSupply / 50;\n\n        uniswapV2Pair = IUniswapV2Pair(\n            IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH())\n        );\n        _immortal[msg.sender] = true;\n        _immortal[address(this)] = true;\n        _immortal[address(uniswapV2Pair)] = true;\n        _immortal[address(uniswapV2Router)] = true;\n\n        isExcludedFromTax[msg.sender] = true;\n        isExcludedFromTax[address(this)] = true;\n        isExcludedFromTax[treasury] = true;\n        isExcludedFromTax[address(uniswapV2Router)] = true;\n    }\n\n    event KillTokens(uint256 prevReserve, uint256 newReserve);\n\n    bool inSwap = false;\n\n    modifier lockTheSwap() {\n        inSwap = true;\n        _;\n        inSwap = false;\n    }\n\n    receive() external payable {}\n\n    function allowance(address owner, address spender) public view override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint256 amount) public override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function _approve(address owner, address spender, uint256 amount) private {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function _spendAllowance(address owner, address spender, uint256 amount) private {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    function CheatDeath(address account) public onlyOwner {\n        _immortal[account] = true;\n    }\n\n    function AcceptDeath(address account) public onlyOwner {\n        _immortal[account] = false;\n        _firstReceivedBlock[account] = 0;\n    }\n\n    function KnowDeath(address account) public view returns (uint256) {\n        uint256 deathBlock;\n        if (_firstReceivedBlock[account] != 0) {\n            deathBlock = _firstReceivedBlock[account] + 3 days;\n        }\n        if (_firstReceivedBlock[account] == 0 || _immortal[account]) {\n            deathBlock = 0;\n        }\n        return deathBlock;\n    }\n\n    function transfer(address recipient, uint256 amount) external returns (bool) {\n        require(\n            _firstReceivedBlock[msg.sender] + 3 days > block.timestamp || _immortal[msg.sender], \"cannot escape death\"\n        );\n        _transfer(_msgSender(), recipient, amount);\n        emit Transfer(msg.sender, recipient, amount);\n        return true;\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool) {\n        require(_firstReceivedBlock[sender] + 3 days > block.timestamp || _immortal[sender], \"cannot escape death\");\n        _spendAllowance(sender, _msgSender(), amount);\n        _transfer(sender, recipient, amount);\n        emit Transfer(sender, recipient, amount);\n        return true;\n    }\n\n    function _transfer(address sender, address recipient, uint256 amount) private {\n        if (sender == address(uniswapV2Pair) && !isExcludedFromTax[recipient]) {\n            require(amount + balanceOf[recipient] <= maxWallet, \"Transfer amount exceeds the maxWallet\");\n        }\n\n        if (recipient == address(uniswapV2Pair) && !isExcludedFromTax[sender]) {\n            uint256 tax = (amount * sellTax) / 10000;\n            amount -= tax;\n            balanceOf[address(this)] += tax;\n            balanceOf[sender] -= tax;\n        }\n\n        uint256 contractTokenBalance = balanceOf[address(this)];\n        bool canSwap = contractTokenBalance > 0;\n\n        if (\n            canSwap && !inSwap && sender != address(uniswapV2Pair) && !isExcludedFromTax[sender]\n                && !isExcludedFromTax[recipient]\n        ) {\n            swapTokensForEth(contractTokenBalance);\n        }\n\n        if (_firstReceivedBlock[recipient] == 0) {\n            _firstReceivedBlock[recipient] = block.timestamp;\n        }\n\n        balanceOf[sender] -= amount;\n        balanceOf[recipient] += amount;\n    }\n\n    bool isReserve0;\n\n    function killTokens() public {\n        require(reaperAwake, \"Reaper is not awake\");\n        require(lastKillTimestamp != block.timestamp, \"Reaper cooldown\");\n\n        (uint112 reserve0, uint112 reserve1,) = uniswapV2Pair.getReserves();\n        uint112 reserve = isReserve0 ? reserve0 : reserve1;\n\n        uint256 toBurn = viewKillTokens();\n        lastKillTimestamp = block.timestamp;\n\n        burnFrom(address(uniswapV2Pair), toBurn);\n\n        uniswapV2Pair.sync();\n\n        emit KillTokens(reserve, reserve - toBurn);\n    }\n\n    function viewKillTokens() public view returns (uint256) {\n        (uint112 reserve0, uint112 reserve1,) = uniswapV2Pair.getReserves();\n        uint112 reserve = isReserve0 ? reserve0 : reserve1;\n\n        uint256 timePassed = viewTime();\n        uint256 toBurn;\n\n        toBurn = (reserve * timePassed) / ((769 * 86400) / 100);\n\n        return toBurn;\n    }\n\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = uniswapV2Router.WETH();\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount, 0, path, treasury, block.timestamp\n        );\n    }\n\n    function burnFrom(address account, uint256 amount) private {\n        balanceOf[account] -= amount;\n        totalSupply -= amount;\n        emit Transfer(account, address(0), amount);\n    }\n\n    function awakenReaper() public onlyOwner {\n        require(!reaperAwake, \"Reaper is up\");\n        reaperAwake = true;\n        maxWallet = type(uint256).max;\n        lastKillTimestamp = block.timestamp;\n    }\n\n    function viewTime() public view returns (uint256) {\n        uint256 timePassed;\n        if (block.timestamp - lastKillTimestamp > 3 days) {\n            timePassed = 3 days;\n        } else {\n            timePassed = block.timestamp - lastKillTimestamp;\n        }\n        return timePassed;\n    }\n\n    function setReserve(bool _isReserve0) public onlyOwner {\n        isReserve0 = _isReserve0;\n    }\n}\n"
    }
  },
  "settings": {
    "remappings": [
      "ds-test/=lib/forge-std/lib/ds-test/src/",
      "forge-std/=lib/forge-std/src/",
      "openzeppelin-contracts/=lib/openzeppelin-contracts/"
    ],
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "metadata": {
      "bytecodeHash": "ipfs",
      "appendCBOR": true
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "evmVersion": "london",
    "libraries": {}
  }
}}