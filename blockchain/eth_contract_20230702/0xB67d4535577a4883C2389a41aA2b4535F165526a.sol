{{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "contracts/PrintThePepe2.sol": {
      "content": "// SPDX-License-Identifier: Unlicensed\npragma solidity 0.8.17;\n\nimport {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\n\ninterface IDEXFactory {\n    function createPair(\n        address tokenA,\n        address tokenB\n    ) external returns (address pair);\n}\n\ninterface IDEXRouter {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    )\n        external\n        payable\n        returns (uint amountToken, uint amountETH, uint liquidity);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n\ninterface IDividendDistributor {\n    function setShare(address shareholder, uint256 amount) external;\n\n    function deposit(uint256 amount) external;\n\n    function claimDividend(address shareholder) external;\n\n    function getDividendsClaimedOf(\n        address shareholder\n    ) external returns (uint256);\n}\n\ncontract DividendDistributor is IDividendDistributor {\n    using SafeMath for uint256;\n\n    address public _token;\n    address public _owner;\n\n    address public immutable PEPE =\n        address(0xfb66321D7C674995dFcC2cb67A30bC978dc862AD); //UNI\n\n    struct Share {\n        uint256 amount;\n        uint256 totalExcluded;\n        uint256 totalClaimed;\n    }\n\n    address[] private shareholders;\n    mapping(address => uint256) private shareholderIndexes;\n\n    mapping(address => Share) public shares;\n\n    uint256 public totalShares;\n    uint256 public totalDividends;\n    uint256 public totalClaimed;\n    uint256 public dividendsPerShare;\n    uint256 private dividendsPerShareAccuracyFactor = 10 ** 36;\n\n    modifier onlyToken() {\n        require(msg.sender == _token);\n        _;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == _owner);\n        _;\n    }\n\n    constructor(address owner) {\n        _token = msg.sender;\n        _owner = owner;\n    }\n\n    receive() external payable {}\n\n    function setShare(\n        address shareholder,\n        uint256 amount\n    ) external override onlyToken {\n        if (shares[shareholder].amount > 0) {\n            distributeDividend(shareholder);\n        }\n\n        if (amount > 0 && shares[shareholder].amount == 0) {\n            addShareholder(shareholder);\n        } else if (amount == 0 && shares[shareholder].amount > 0) {\n            removeShareholder(shareholder);\n        }\n\n        totalShares = totalShares.sub(shares[shareholder].amount).add(amount);\n        shares[shareholder].amount = amount;\n        shares[shareholder].totalExcluded = getCumulativeDividends(\n            shares[shareholder].amount\n        );\n    }\n\n    function deposit(uint256 amount) external override onlyToken {\n        if (amount > 0) {\n            totalDividends = totalDividends.add(amount);\n            dividendsPerShare = dividendsPerShare.add(\n                dividendsPerShareAccuracyFactor.mul(amount).div(totalShares)\n            );\n        }\n    }\n\n    function distributeDividend(address shareholder) internal {\n        if (shares[shareholder].amount == 0) {\n            return;\n        }\n\n        uint256 amount = getClaimableDividendOf(shareholder);\n        if (amount > 0) {\n            totalClaimed = totalClaimed.add(amount);\n            shares[shareholder].totalClaimed = shares[shareholder]\n                .totalClaimed\n                .add(amount);\n            shares[shareholder].totalExcluded = getCumulativeDividends(\n                shares[shareholder].amount\n            );\n            IERC20(PEPE).transfer(shareholder, amount);\n        }\n    }\n\n    function claimDividend(address shareholder) external override onlyToken {\n        distributeDividend(shareholder);\n    }\n\n    function getClaimableDividendOf(\n        address shareholder\n    ) public view returns (uint256) {\n        if (shares[shareholder].amount == 0) {\n            return 0;\n        }\n\n        uint256 shareholderTotalDividends = getCumulativeDividends(\n            shares[shareholder].amount\n        );\n        uint256 shareholderTotalExcluded = shares[shareholder].totalExcluded;\n\n        if (shareholderTotalDividends <= shareholderTotalExcluded) {\n            return 0;\n        }\n\n        return shareholderTotalDividends.sub(shareholderTotalExcluded);\n    }\n\n    function getCumulativeDividends(\n        uint256 share\n    ) internal view returns (uint256) {\n        return\n            share.mul(dividendsPerShare).div(dividendsPerShareAccuracyFactor);\n    }\n\n    function addShareholder(address shareholder) internal {\n        shareholderIndexes[shareholder] = shareholders.length;\n        shareholders.push(shareholder);\n    }\n\n    function removeShareholder(address shareholder) internal {\n        shareholders[shareholderIndexes[shareholder]] = shareholders[\n            shareholders.length - 1\n        ];\n        shareholderIndexes[\n            shareholders[shareholders.length - 1]\n        ] = shareholderIndexes[shareholder];\n        shareholders.pop();\n    }\n\n    function manualSend(uint256 amount, address holder) external onlyOwner {\n        uint256 contractETHBalance = address(this).balance;\n        payable(holder).transfer(amount > 0 ? amount : contractETHBalance);\n    }\n\n    function getDividendsClaimedOf(\n        address shareholder\n    ) external view returns (uint256) {\n        require(\n            shares[shareholder].amount > 0,\n            \"You're not a PRINTER shareholder!\"\n        );\n        return shares[shareholder].totalClaimed;\n    }\n}\n\ncontract PrintThePepe2 is IERC20, Ownable {\n    using SafeMath for uint256;\n\n    address private WETH;\n    address private DEAD = 0x000000000000000000000000000000000000dEaD;\n    address private ZERO = 0x0000000000000000000000000000000000000000;\n\n    address public immutable PEPE =\n        address(0xfb66321D7C674995dFcC2cb67A30bC978dc862AD); //UNI\n\n    string private constant _name = \"Print The Pepe 2.0\";\n    string private constant _symbol = \"PP2\";\n    uint8 private constant _decimals = 9;\n\n    uint256 private _totalSupply = 69696969 * (10 ** _decimals);\n    uint256 private _maxTxAmountBuy = _totalSupply;\n\n    mapping(address => uint256) private _balances;\n    mapping(address => mapping(address => uint256)) private _allowances;\n    mapping(address => uint256) private cooldown;\n\n    mapping(address => bool) private isFeeExempt;\n    mapping(address => bool) private isDividendExempt;\n    mapping(address => bool) private isBot;\n\n    uint256 private totalFee = 14;\n    uint256 private feeDenominator = 100;\n\n    address payable public marketingWallet;\n\n    IDEXRouter public router;\n    address public pair;\n\n    bool private tradingOpen;\n    bool private buyLimit = true;\n    uint256 private maxBuy = 1393939 * (10 ** _decimals);\n    uint256 public numTokensSellToAddToLiquidity = 278787 * 10 ** 9;\n\n    DividendDistributor private distributor;\n\n    bool public blacklistEnabled = false;\n    bool private inSwap;\n    modifier swapping() {\n        inSwap = true;\n        _;\n        inSwap = false;\n    }\n\n    constructor(address _marketingWallet) {\n        marketingWallet = payable(_marketingWallet);\n        router = IDEXRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n\n        WETH = router.WETH();\n\n        pair = IDEXFactory(router.factory()).createPair(WETH, address(this));\n\n        _allowances[address(this)][address(router)] = type(uint256).max;\n\n        distributor = new DividendDistributor(msg.sender);\n\n        isFeeExempt[msg.sender] = true;\n        isFeeExempt[address(this)] = true;\n        isFeeExempt[marketingWallet] = true;\n\n        isDividendExempt[pair] = true;\n        isDividendExempt[address(this)] = true;\n        isDividendExempt[DEAD] = true;\n\n        _balances[msg.sender] = _totalSupply;\n\n        emit Transfer(address(0), msg.sender, _totalSupply);\n    }\n\n    receive() external payable {}\n\n    function totalSupply() external view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function decimals() external pure returns (uint8) {\n        return _decimals;\n    }\n\n    function symbol() external pure returns (string memory) {\n        return _symbol;\n    }\n\n    function name() external pure returns (string memory) {\n        return _name;\n    }\n\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    function allowance(\n        address holder,\n        address spender\n    ) external view override returns (uint256) {\n        return _allowances[holder][spender];\n    }\n\n    function approve(\n        address spender,\n        uint256 amount\n    ) public override returns (bool) {\n        _allowances[msg.sender][spender] = amount;\n        emit Approval(msg.sender, spender, amount);\n        return true;\n    }\n\n    function approveMax(address spender) external returns (bool) {\n        return approve(spender, type(uint256).max);\n    }\n\n    function transfer(\n        address recipient,\n        uint256 amount\n    ) external override returns (bool) {\n        return _transferFrom(msg.sender, recipient, amount);\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external override returns (bool) {\n        if (_allowances[sender][msg.sender] != type(uint256).max) {\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender]\n                .sub(amount, \"Insufficient Allowance\");\n        }\n\n        return _transferFrom(sender, recipient, amount);\n    }\n\n    function _transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal returns (bool) {\n        address own = owner();\n        if (sender != own && recipient != own)\n            require(tradingOpen, \"Trading not yet enabled.\"); //transfers disabled before openTrading\n\n        if (blacklistEnabled) {\n            require(!isBot[sender] && !isBot[recipient], \"Bot!\");\n        }\n\n        if (buyLimit) {\n            if (sender != own && recipient != own)\n                require(amount <= maxBuy, \"Too much sir\");\n        }\n\n        if (inSwap) {\n            return _basicTransfer(sender, recipient, amount);\n        }\n\n        uint256 contractTokenBalance = balanceOf(address(this));\n\n        bool overMinTokenBalance = contractTokenBalance >=\n            numTokensSellToAddToLiquidity;\n\n        bool shouldSwapBack = (overMinTokenBalance &&\n            !isFeeExempt[sender] &&\n            recipient == pair &&\n            balanceOf(address(this)) > 0);\n        if (shouldSwapBack) {\n            swapBack();\n        }\n\n        _balances[sender] = _balances[sender].sub(\n            amount,\n            \"Insufficient Balance\"\n        );\n\n        uint256 amountReceived = shouldTakeFee(sender, recipient)\n            ? takeFee(sender, amount)\n            : amount;\n\n        _balances[recipient] = _balances[recipient].add(amountReceived);\n\n        if (sender != pair && !isDividendExempt[sender]) {\n            try distributor.setShare(sender, _balances[sender]) {} catch {}\n        }\n        if (recipient != pair && !isDividendExempt[recipient]) {\n            try\n                distributor.setShare(recipient, _balances[recipient])\n            {} catch {}\n        }\n\n        emit Transfer(sender, recipient, amountReceived);\n        return true;\n    }\n\n    function _basicTransfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal returns (bool) {\n        _balances[sender] = _balances[sender].sub(\n            amount,\n            \"Insufficient Balance\"\n        );\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n        return true;\n    }\n\n    function shouldTakeFee(\n        address sender,\n        address recipient\n    ) internal view returns (bool) {\n        return (!(isFeeExempt[sender] || isFeeExempt[recipient]) &&\n            (sender == pair || recipient == pair));\n    }\n\n    function takeFee(\n        address sender,\n        uint256 amount\n    ) internal returns (uint256) {\n        uint256 feeAmount;\n        feeAmount = amount.mul(totalFee).div(feeDenominator);\n        _balances[address(this)] = _balances[address(this)].add(feeAmount);\n        emit Transfer(sender, address(this), feeAmount);\n\n        return amount.sub(feeAmount);\n    }\n\n    function swapBack() internal swapping {\n        uint256 amountToSwap = balanceOf(address(this));\n\n        swapTokensForEth(amountToSwap.div(2));\n        swapTokensForPEPE(amountToSwap.div(2));\n\n        uint256 dividends = IERC20(PEPE).balanceOf(address(this));\n\n        bool success = IERC20(PEPE).transfer(address(distributor), dividends);\n\n        if (success) {\n            distributor.deposit(dividends);\n        }\n\n        payable(marketingWallet).transfer(address(this).balance);\n    }\n\n    function swapTokensForPEPE(uint256 tokenAmount) private {\n        address[] memory path = new address[](3);\n        path[0] = address(this);\n        path[1] = WETH;\n        path[2] = PEPE;\n\n        // make the swap\n        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0,\n            path,\n            address(this),\n            block.timestamp\n        );\n    }\n\n    function swapTokensForEth(uint256 tokenAmount) private {\n        // generate the uniswap pair path of token -> weth\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = WETH;\n\n        // make the swap\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0, // accept any amount of ETH\n            path,\n            address(this),\n            block.timestamp\n        );\n    }\n\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\n        // add the liquidity\n        router.addLiquidityETH{value: ethAmount}(\n            address(this),\n            tokenAmount,\n            0, // slippage is unavoidable\n            0, // slippage is unavoidable\n            owner(),\n            block.timestamp\n        );\n    }\n\n    function openTrading() external onlyOwner {\n        tradingOpen = true;\n    }\n\n    function setBot(address _address, bool toggle) external onlyOwner {\n        isBot[_address] = toggle;\n        _setIsDividendExempt(_address, toggle);\n    }\n\n    function _setIsDividendExempt(address holder, bool exempt) internal {\n        require(holder != address(this) && holder != pair);\n        isDividendExempt[holder] = exempt;\n        if (exempt) {\n            distributor.setShare(holder, 0);\n        } else {\n            distributor.setShare(holder, _balances[holder]);\n        }\n    }\n\n    function setIsDividendExempt(\n        address holder,\n        bool exempt\n    ) external onlyOwner {\n        _setIsDividendExempt(holder, exempt);\n    }\n\n    function setIsFeeExempt(address holder, bool exempt) external onlyOwner {\n        isFeeExempt[holder] = exempt;\n    }\n\n    function setFee(uint256 _fee) external onlyOwner {\n        require(_fee <= 14, \"Fee can't exceed 14%\");\n        totalFee = _fee;\n    }\n\n    function manualSend() external onlyOwner {\n        uint256 contractETHBalance = address(this).balance;\n        payable(marketingWallet).transfer(contractETHBalance);\n    }\n\n    function claimDividend() external {\n        distributor.claimDividend(msg.sender);\n    }\n\n    function claimDividend(address holder) external onlyOwner {\n        distributor.claimDividend(holder);\n    }\n\n    function getClaimableDividendOf(\n        address shareholder\n    ) public view returns (uint256) {\n        return distributor.getClaimableDividendOf(shareholder);\n    }\n\n    function manualBurn(uint256 amount) external onlyOwner returns (bool) {\n        return _basicTransfer(address(this), DEAD, amount);\n    }\n\n    function getCirculatingSupply() public view returns (uint256) {\n        return _totalSupply.sub(balanceOf(DEAD)).sub(balanceOf(ZERO));\n    }\n\n    function setMarketingWallet(address _marketingWallet) external onlyOwner {\n        marketingWallet = payable(_marketingWallet);\n    }\n\n    function getTotalDividends() external view returns (uint256) {\n        return distributor.totalDividends();\n    }\n\n    function getTotalClaimed() external view returns (uint256) {\n        return distributor.totalClaimed();\n    }\n\n    function getDividendsClaimedOf(\n        address shareholder\n    ) external view returns (uint256) {\n        return distributor.getDividendsClaimedOf(shareholder);\n    }\n\n    function removeBuyLimit() external onlyOwner {\n        buyLimit = false;\n    }\n\n    function checkBot(address account) public view returns (bool) {\n        return isBot[account];\n    }\n\n    function setBlacklistEnabled() external onlyOwner {\n        require(blacklistEnabled == false, \"can only be called once\");\n        blacklistEnabled = true;\n    }\n\n    function setSwapThresholdAmount(uint256 amount) external onlyOwner {\n        require(amount <= _totalSupply.div(100), \"can't exceed 1%\");\n        numTokensSellToAddToLiquidity = amount * 10 ** 9;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}