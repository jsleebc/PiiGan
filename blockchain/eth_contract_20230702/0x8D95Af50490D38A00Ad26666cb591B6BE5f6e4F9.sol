{{
  "language": "Solidity",
  "sources": {
    "contracts/AGIcoin.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/*\n\n █████╗  ██████╗ ██╗ ██████╗ ██████╗ ██╗███╗   ██╗\n██╔══██╗██╔════╝ ██║██╔════╝██╔═══██╗██║████╗  ██║\n███████║██║  ███╗██║██║     ██║   ██║██║██╔██╗ ██║\n██╔══██║██║   ██║██║██║     ██║   ██║██║██║╚██╗██║\n██║  ██║╚██████╔╝██║╚██████╗╚██████╔╝██║██║ ╚████║\n╚═╝  ╚═╝ ╚═════╝ ╚═╝ ╚═════╝ ╚═════╝ ╚═╝╚═╝  ╚═══╝\n\nToken Rules: https://agicoin.co/rules\nTwitter: https://twitter.com/AGI_COIN\n\n*/\npragma solidity 0.8.19;\n// @openzeppelin/contracts/utils/Context.sol@v4.8.3\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n// @openzeppelin/contracts/access/Ownable.sol@v4.8.3\nabstract contract Ownable is Context {\n    address private _owner;\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n// @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.8.3\ninterface IERC20 {\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address to, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n// @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol@v4.8.3\ninterface IERC20Metadata is IERC20 {\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n}\n// @openzeppelin/contracts/token/ERC20/ERC20.sol@v4.8.3\ncontract AGIcoin is Context, IERC20, IERC20Metadata, Ownable {\n    mapping(address => uint256) private _balances;\n    mapping(address => mapping(address => uint256)) private _allowances;\n    mapping(address => uint256) private _lastTimeTraded;\n    mapping(address => bool) private _isExcludedFromFees;\n\n    address public DEADAddress;\n    address public uniswapV2Pair;\n\n    bool public islive;\n    bool public takeFees;\n\n    string private _name;\n    string private _symbol;\n\n    uint256 private maxHoldingAmount = 10000010000000000; // 10 Mill,10\n    uint256 private maxSellingAmount = 10000010000000000; // 10 Mill,10\n    uint256 private _totalSupply;\n\n    uint256 private _SECONDS_IN_1_DAYS = 86400;\n    uint256 private _SECONDS_IN_3_DAYS = 259200;\n    uint256 private _SECONDS_IN_7_DAYS = 604800;\n    uint256 private _SECONDS_IN_14_DAYS = 1209600;\n    uint256 private _SECONDS_IN_21_DAYS = 1814400;\n\n    constructor(string memory name_, string memory symbol_, uint256 totalsupply) {\n        _name = name_;\n        _symbol = symbol_;\n        _mint(msg.sender, totalsupply);\n    }\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n    function decimals() public view virtual override returns (uint8) {\n        return 9;\n    }\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n        return true;\n    }\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n        _beforeTokenTransfer(from, to, amount);\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            _balances[to] += amount;\n        }\n        emit Transfer(from, to, amount);\n        _afterTokenTransfer(from, to, amount);\n    }\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n        _beforeTokenTransfer(address(0), account, amount);\n        _totalSupply += amount;\n        unchecked {\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n        _afterTokenTransfer(address(0), account, amount);\n    }\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n        _beforeTokenTransfer(account, address(0), amount);\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            _totalSupply -= amount;\n        }\n        emit Transfer(account, address(0), amount);\n        _afterTokenTransfer(account, address(0), amount);\n    }\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        if (uniswapV2Pair == address(0)) {\n            require(from == owner() || to == owner(), \"trading is not started\");\n            return;\n        }\n        if (islive && from == uniswapV2Pair) {\n            require((balanceOf(to) + amount) < maxHoldingAmount, \"You cannot buy these many tokens.\");\n        }\n        if (islive && takeFees && to == uniswapV2Pair) {\n            uint256 amountWithFee;\n            uint256 accountBalance;\n            uint256 maxsellingwithFee;\n            uint256 lastTimeTraded = _lastTimeTraded[from];\n            uint256 timestamp = (block.timestamp - lastTimeTraded);\n            if(timestamp > _SECONDS_IN_21_DAYS){\n                amountWithFee = (amount * 102) / 100;\n                accountBalance = (balanceOf(from) * 99) / 100;\n                maxsellingwithFee = (maxSellingAmount * 99) / 100;\n                require(amountWithFee < accountBalance && amountWithFee < maxSellingAmount && maxsellingwithFee < maxSellingAmount, \"You can only sell 99% of your tokens\");\n            } else if(timestamp < _SECONDS_IN_21_DAYS && timestamp > _SECONDS_IN_14_DAYS){\n                amountWithFee = (amount * 106) / 100;\n                accountBalance = (balanceOf(from) * 90) / 100;\n                maxsellingwithFee = (maxSellingAmount * 90) / 100;\n                require(amountWithFee < accountBalance && amountWithFee < maxSellingAmount && maxsellingwithFee < maxSellingAmount, \"You can only sell 90% of your tokens\");\n            } else if(timestamp < _SECONDS_IN_14_DAYS && timestamp > _SECONDS_IN_7_DAYS){\n                amountWithFee = (amount * 111) / 100;\n                accountBalance = (balanceOf(from) * 80) / 100;\n                maxsellingwithFee = (maxSellingAmount * 80) / 100;\n                require(amountWithFee < accountBalance && amountWithFee < maxSellingAmount && maxsellingwithFee < maxSellingAmount, \"You can only sell 80% of your tokens\");\n            } else if(timestamp < _SECONDS_IN_7_DAYS && timestamp > _SECONDS_IN_3_DAYS){\n                amountWithFee = (amount * 116) / 100;\n                accountBalance = (balanceOf(from) * 60) / 100;\n                maxsellingwithFee = (maxSellingAmount * 60) / 100;\n                require(amountWithFee < accountBalance && amountWithFee < maxSellingAmount && maxsellingwithFee < maxSellingAmount, \"You can only sell 60% of your tokens\");\n            } else if(timestamp < _SECONDS_IN_3_DAYS && timestamp > _SECONDS_IN_1_DAYS){\n                amountWithFee = (amount * 121) / 100;\n                accountBalance = (balanceOf(from) * 40) / 100;\n                maxsellingwithFee = (maxSellingAmount * 40) / 100;\n                require(amountWithFee < accountBalance && amountWithFee < maxSellingAmount && maxsellingwithFee < maxSellingAmount, \"You can only sell 40% of your tokens\");\n            } else{\n                amountWithFee = (amount * 131) / 100;\n                accountBalance = (balanceOf(from) * 25) / 100;\n                maxsellingwithFee = (maxSellingAmount * 25) / 100;\n                require(amountWithFee < accountBalance && amountWithFee < maxSellingAmount && maxsellingwithFee < maxSellingAmount, \"You can only sell 25% of your tokens\");\n            }\n        }\n    }\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        if (islive && takeFees && to == uniswapV2Pair) {\n            uint256 burntokens;\n            uint256 lastTimeTraded = _lastTimeTraded[from];\n            uint256 timestamp = (block.timestamp - lastTimeTraded);\n            if(timestamp > _SECONDS_IN_21_DAYS){\n                burntokens = (amount * 1) / 100;\n            } else if(timestamp < _SECONDS_IN_21_DAYS && timestamp > _SECONDS_IN_14_DAYS){\n                burntokens = (amount * 5) / 100;\n            } else if(timestamp < _SECONDS_IN_14_DAYS && timestamp > _SECONDS_IN_7_DAYS){\n                burntokens = (amount * 10) / 100;\n            } else if(timestamp < _SECONDS_IN_7_DAYS && timestamp > _SECONDS_IN_3_DAYS){\n                burntokens = (amount * 15) / 100;\n            } else if(timestamp < _SECONDS_IN_3_DAYS && timestamp > _SECONDS_IN_1_DAYS){\n                burntokens = (amount * 20) / 100;\n            } else{\n                burntokens = (amount * 30) / 100;\n            }\n            _approve(from, address(this), burntokens);\n            _transfer(from, address(DEADAddress), burntokens);            \n        }\n        _lastTimeTraded[from] = block.timestamp;\n        _lastTimeTraded[to] = block.timestamp;\n    }\n    function setUniswapV2Pair(bool _islive, bool _takeFees, address _uniswapV2Pair, address _deadAddress) external onlyOwner {\n        islive = _islive;\n        takeFees = _takeFees;\n        uniswapV2Pair = _uniswapV2Pair;\n        DEADAddress = _deadAddress;\n    }\n    receive() external payable {}\n    fallback() external payable {}\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 69
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}