{{
  "language": "Solidity",
  "sources": {
    "/contracts/Vitalinci.sol": {
      "content": "/*\n    // SPDX-License-Identifier: MIT\n\n    Leonardo's last living descendant, who conquered the blockchain with his giant dick.\n    He is a legend. He is the god of ETH. He is Vitalik. \n    (or she, not confirmed yet but got a huge fat cock btw.)\n\n    TG: https://t.me/leonardodavitalinci\n\n*/\n\npragma solidity 0.8.7;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account)\n        public\n        view\n        virtual\n        override\n        returns (uint256)\n    {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount)\n        public\n        virtual\n        override\n        returns (bool)\n    {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender)\n        public\n        view\n        virtual\n        override\n        returns (uint256)\n    {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount)\n        public\n        virtual\n        override\n        returns (bool)\n    {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue)\n        public\n        virtual\n        returns (bool)\n    {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue)\n        public\n        virtual\n        returns (bool)\n    {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(\n            currentAllowance >= subtractedValue,\n            \"ERC20: decreased allowance below zero\"\n        );\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(\n            fromBalance >= amount,\n            \"ERC20: transfer amount exceeds balance\"\n        );\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(\n                currentAllowance >= amount,\n                \"ERC20: insufficient allowance\"\n            );\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n\ninterface IUniswapV2Factory {\n    event PairCreated(\n        address indexed token0,\n        address indexed token1,\n        address pair,\n        uint256\n    );\n\n    function feeTo() external view returns (address);\n\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB)\n        external\n        view\n        returns (address pair);\n\n    function allPairs(uint256) external view returns (address pair);\n\n    function allPairsLength() external view returns (uint256);\n\n    function createPair(address tokenA, address tokenB)\n        external\n        returns (address pair);\n\n    function setFeeTo(address) external;\n\n    function setFeeToSetter(address) external;\n}\n\ninterface IUniswapV2Pair {\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function name() external pure returns (string memory);\n\n    function symbol() external pure returns (string memory);\n\n    function decimals() external pure returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256);\n\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    function nonces(address owner) external view returns (uint256);\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\n    event Burn(\n        address indexed sender,\n        uint256 amount0,\n        uint256 amount1,\n        address indexed to\n    );\n    event Swap(\n        address indexed sender,\n        uint256 amount0In,\n        uint256 amount1In,\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\n\n    function factory() external view returns (address);\n\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n\n    function getReserves()\n        external\n        view\n        returns (\n            uint112 reserve0,\n            uint112 reserve1,\n            uint32 blockTimestampLast\n        );\n\n    function price0CumulativeLast() external view returns (uint256);\n\n    function price1CumulativeLast() external view returns (uint256);\n\n    function kLast() external view returns (uint256);\n\n    function mint(address to) external returns (uint256 liquidity);\n\n    function burn(address to)\n        external\n        returns (uint256 amount0, uint256 amount1);\n\n    function swap(\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address to,\n        bytes calldata data\n    ) external;\n\n    function skim(address to) external;\n\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        returns (\n            uint256 amountA,\n            uint256 amountB,\n            uint256 liquidity\n        );\n\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        returns (\n            uint256 amountToken,\n            uint256 amountETH,\n            uint256 liquidity\n        );\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETH(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactETHForTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function swapTokensForExactETH(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactTokensForETH(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapETHForExactTokens(\n        uint256 amountOut,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function quote(\n        uint256 amountA,\n        uint256 reserveA,\n        uint256 reserveB\n    ) external pure returns (uint256 amountB);\n\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountOut);\n\n    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountIn);\n\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n}\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountETH);\n\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable;\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n}\n\ncontract Vitalinci is ERC20, Ownable {\n    IUniswapV2Router02 private _uniswapV2Router;\n    address private _uniswapV2Pair;\n    address private _feeWallet;\n\n    bool private _swapping;\n    bool public limitsInEffect;\n    bool private _isTradingActive;\n    bool private _nodeReward;\n\n    uint256 private _startAt;\n    uint256 private _deadBlocks;\n\n    uint256 public maxTxAmount;\n    uint256 public maxWallet;\n\n    uint256 public swapTokensAtAmount;\n\n    uint256 private _buyFees;\n    uint256 private _sellFees;\n\n    uint256 private _buyMarketingFee;\n    uint256 private _buyLiquidityFee;\n\n    uint256 private _sellMarketingFee;\n    uint256 private _sellLiquidityFee;\n\n    uint256 private _tokensForMarketing;\n    uint256 private _tokensForLiquidity;\n\n    // exlcude from fees and max transaction amount\n    mapping(address => bool) private _isExcludedFromFees;\n    mapping(address => bool) private _isExcludedMaxTxAmount;\n    mapping(address => bool) private automatedMarketMakerPairs;\n    // blacklist snipers\n    mapping(address => bool) public blacklist;\n\n    // Events\n    event ExcludeFromFees(address indexed account, bool isExcluded);\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\n    event FeeWalletUpdated(\n        address indexed newWallet,\n        address indexed oldWallet\n    );\n    event SwapAndLiquify(\n        uint256 tokensSwapped,\n        uint256 ethReceived,\n        uint256 tokensIntoLiquidity\n    );\n\n    constructor() ERC20(\"Leonardo Da Vitalinci\", \"Vitalinci\") {\n        _uniswapV2Router = IUniswapV2Router02(\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\n        );\n        _uniswapV2Pair = address(0);\n\n        // Total supply 100,000,000,000\n        uint256 totalSupply = 100_000_000_000 * 1e18;\n\n        // Set default fees\n        _buyMarketingFee = 20; // 2%\n        _buyLiquidityFee = 30; // 3%\n\n        _sellMarketingFee = 20; // 2%\n        _sellLiquidityFee = 30; // 3%\n\n        // No trading yet\n        _isTradingActive = false;\n        _nodeReward = false;\n        _startAt = 0;\n        _deadBlocks = 0;\n        limitsInEffect = true;\n\n        // Set fees for buy and sell side\n        _buyFees = _buyMarketingFee + _buyLiquidityFee;\n        _sellFees = _sellMarketingFee + _sellLiquidityFee;\n\n        // Max TX amount is 2% of total supply\n        maxTxAmount = (totalSupply * 20) / 1000;\n\n        // Max wallet amount is 2.5% of total supply\n        maxWallet = (totalSupply * 30) / 1000;\n\n        // Set auto lp limit\n        swapTokensAtAmount = (totalSupply * 30) / 10000;\n\n        _feeWallet = address(owner()); // set as fee wallet\n\n        // exclude from paying fees or having max transaction amount\n        excludeFromFees(address(0xdead), true);\n        excludeFromFees(owner(), true);\n        excludeFromFees(address(this), true);\n\n        excludeFromMaxTransaction(address(this), true);\n        excludeFromMaxTransaction(address(0xdead), true);\n        excludeFromMaxTransaction(owner(), true);\n\n        /*\n            _mint is an internal function in ERC20.sol that is only called here,\n            and CANNOT be called ever again\n        */\n        _mint(address(owner()), totalSupply);\n    }\n\n    /**\n     * @dev Change state, to prevent infinite loop during transfer\n     * modifier.\n     *\n     */\n    modifier lockSwap() {\n        _swapping = true;\n        _;\n        _swapping = false;\n    }\n\n    /**\n     * @dev Create a Uniswap pair contract\n     *\n     * This function can only be called by the owner. It will create a Uniswap pair and saves the pair address\n     *\n     * Emits an {Pair Created} event.\n     *\n     * Requirements:\n     *\n     * - `_uniswapV2Pair` must be the zero address.\n     */\n    function initializeContract() external onlyOwner {\n        require(_uniswapV2Pair == address(0), \"pair already created\");\n        // Create pair\n        _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\n            .createPair(address(this), _uniswapV2Router.WETH());\n        // Store the pair\n        automatedMarketMakerPairs[_uniswapV2Pair] = true;\n    }\n\n    /**\n     * @dev Add liquidity to the pair contract and allow trading\n     *\n     * This function can only be called by the owner. It will fund the pair contract with WETH + FRAC token combinations.\n     * all FRAC token will be transfered to the pair\n     *\n     * Emits an {Liquidity Added} event.\n     *\n     * Requirements:\n     *\n     * - `_uniswapV2Pair` must not be the zero address.\n     * - `_isTradingActive` must be false.\n     */\n    function allowTrading(uint256 deadblock) external onlyOwner {\n        require(_uniswapV2Pair != address(0), \"pair not yet created\");\n        require(!_isTradingActive, \"trade is already open\");\n        // Allow trading\n        _isTradingActive = true;\n        _deadBlocks = deadblock;\n        _startAt = block.number;\n    }\n\n    /**\n     * @dev Update the Auto Liqify feature's token limit\n     *\n     * This function can only be called by the owner. The new limits for the Auto Liquify feature will be updated\n     *\n     *\n     * Requirements:\n     *\n     * - `newAmount` must be greater than 0.001% of the total supply\n     * - `newAmount` must be less than 0.5% of the total supply\n     */\n    function updateMaxTxAmount(uint256 newNum) external onlyOwner {\n        require(\n            newNum >= ((totalSupply() * 1) / 1000),\n            \"Cannot set maxTransactionAmount lower than 0.1%\"\n        );\n        maxTxAmount = newNum;\n    }\n\n    function updateMaxWallet(uint256 newNum) external onlyOwner {\n        maxWallet = newNum;\n    }\n\n    /**\n     * @dev Update the Auto Liqify feature's token limit\n     *\n     * This function can only be called by the owner. The new limits for the Auto Liquify feature will be updated\n     *\n     *\n     * Requirements:\n     *\n     * - `newAmount` must be greater than 0.001% of the total supply\n     * - `newAmount` must be less than 0.5% of the total supply\n     */\n    function updateSwapTokensAtAmount(uint256 newAmount) external onlyOwner {\n        require(\n            newAmount >= (totalSupply() * 1) / 100000,\n            \"cannot be lower than 0.001% total supply.\"\n        );\n        require(\n            newAmount <= (totalSupply() * 5) / 1000,\n            \"cannot be higher than 0.5% total supply.\"\n        );\n        swapTokensAtAmount = newAmount;\n    }\n\n    /**\n     * @dev Remove the trading limits\n     *\n     * This function can only be called by the owner. It will remove the transfer limits from the contract.\n     */\n    function removeLimits() external {\n        limitsInEffect = false;\n    }\n\n    /**\n     * @dev Remove a dedicated address from the blacklist\n     *\n     * This function can only be called by the owner. It remove one dedicated address from the blacklist\n     *\n     * Requirements:\n     *\n     * - `account` must be blacklisted.\n     */\n    function removeFromBlacklist(address account) external onlyOwner {\n        require(blacklist[account] == true, \"account is not in the blacklist\");\n        blacklist[account] = false;\n    }\n\n    /**\n     * @dev Update the trading fees\n     *\n     * This function can only be called by the owner. It will update the trading fees of the contrcat\n     *\n     * Requirements:\n     *\n     * - `buyMarketingFee` must not greater than 10%.\n     * - `buyLiquidityFee` must not greater than 10%.\n     * - `sellMarketingFee` must not greater than 10%.\n     * - `sellLiquidityFee` must not greater than 10%.\n     */\n    function setFee(\n        uint256 buyMarketingFee,\n        uint256 buyLiquidityFee,\n        uint256 sellMarketingFee,\n        uint256 sellLiquidityFee\n    ) external onlyOwner {\n        _buyMarketingFee = buyMarketingFee;\n        _buyLiquidityFee = buyLiquidityFee;\n\n        _sellMarketingFee = sellMarketingFee;\n        _sellLiquidityFee = sellLiquidityFee;\n\n        _buyFees = _buyMarketingFee + _buyLiquidityFee;\n        _sellFees = _sellMarketingFee + _sellLiquidityFee;\n    }\n\n    /**\n     * @dev Exclude a dedicated address from the trading fees\n     *\n     * This function can only be called by the owner. It will exclude a given address from the trading fees.\n     *\n     * Emits an {ExcludeFromFees} event.\n     *\n     */\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\n        _isExcludedFromFees[account] = excluded;\n        emit ExcludeFromFees(account, excluded);\n    }\n\n    /**\n     * @dev Exclude a dedicated address from max transactions\n     *\n     * This function can only be called by the owner. It will exclude a given address from the transaction limits.\n     *\n     */\n    function excludeFromMaxTransaction(address account, bool excluded)\n        public\n        onlyOwner\n    {\n        _isExcludedMaxTxAmount[account] = excluded;\n    }\n\n    /**\n     * @dev Add liquidity to the pair contract and allow trading\n     *\n     * This function can only be called by the owner. It will fund the pair contract with WETH + FRAC token combinations.\n     * all FRAC token will be transfered to the pair\n     *\n     * Emits an {Liquidity Added} event.\n     *\n     * Requirements:\n     *\n     * - `_uniswapV2Pair` must not be the zero address.\n     * - `_isTradingActive` must be false.\n     */\n    function updateFeeWallet(address newWallet) external onlyOwner {\n        emit FeeWalletUpdated(newWallet, _feeWallet);\n        _feeWallet = newWallet;\n    }\n\n    /**\n     * @dev Check if the conditions are met for Auto Liquify\n     *\n     * Internal function to determine if the Auto Liquify feature should perform a swap or not\n     *\n     * Requirements:\n     *\n     */\n    function _canSwap(address from, address to) private view returns (bool) {\n        uint256 totalTokensForSwap = _tokensForLiquidity + _tokensForMarketing;\n        bool canSwap = totalTokensForSwap >= swapTokensAtAmount;\n        return\n            canSwap &&\n            !_swapping &&\n            !automatedMarketMakerPairs[from] &&\n            !_isExcludedFromFees[from] &&\n            !_isExcludedFromFees[to];\n    }\n\n    /**\n     * @dev Check if limits are applicable\n     *\n     * Internal function to check if limits are applicable\n     *\n     */\n    function _hasLimits(\n        address from,\n        address to,\n        bool takeFee\n    ) private view returns (bool) {\n        return\n            from != owner() &&\n            to != owner() &&\n            !_isExcludedMaxTxAmount[tx.origin] &&\n            !_isExcludedMaxTxAmount[from] &&\n            !_isExcludedMaxTxAmount[to] &&\n            to != address(0xdead) &&\n            to != address(0) &&\n            limitsInEffect &&\n            takeFee &&\n            from != address(this);\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal override {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n        require(amount > 0, \"ERC20: amount must be greater than 0\");\n        require(!blacklist[from], \"Bot detected\");\n\n        if (!(_isExcludedFromFees[from] || _isExcludedFromFees[to]))\n            require(_isTradingActive, \"trading is not active\");\n        if (_canSwap(from, to)) swapBack();\n        bool takeFee = !_swapping;\n\n        // if any account belongs to _isExcludedFromFee account then remove the fee\n        if (_isExcludedFromFees[from] || _isExcludedFromFees[to]) {\n            takeFee = false;\n        }\n\n        if (_hasLimits(from, to, takeFee)) {\n            // enfore limits\n            require(amount <= maxTxAmount, \"max transaction amount exceeded\");\n            if (automatedMarketMakerPairs[from]) {\n                require(\n                    (amount + balanceOf(to)) <= maxWallet,\n                    \"max wallet amount exceeded\"\n                );\n            }\n        }\n\n        uint256 fees = 0;\n        // only take fees on buys/sells, do not take on wallet transfers\n        if (takeFee) {\n            // when buy\n            if (automatedMarketMakerPairs[from]) {\n                if ((block.number < _startAt + _deadBlocks)) {\n                    blacklist[to] = true;\n                }\n                fees = (amount * _buyFees) / 1000;\n\n                _tokensForLiquidity += (fees * _buyLiquidityFee) / _buyFees;\n                _tokensForMarketing += (fees * _buyMarketingFee) / _buyFees;\n            }\n            // when sell\n            else if (automatedMarketMakerPairs[to]) {\n                fees = (amount * _sellFees) / 1000;\n\n                _tokensForLiquidity += (fees * _sellLiquidityFee) / _sellFees;\n                _tokensForMarketing += (fees * _sellMarketingFee) / _sellFees;\n            }\n\n            if (fees > 0) {\n                super._transfer(from, address(this), fees);\n            }\n            amount = amount - fees;\n        }\n\n        super._transfer(from, to, amount);\n    }\n\n    /**\n     * @dev Perform a swap from GRMX to ETH\n     *\n     * Internal function to swap FRAC tokens to WETH\n     *\n     */\n    function _swapTokensForEth(uint256 tokenAmount) private {\n        // generate the uniswap pair path of FRAC -> WETH\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = _uniswapV2Router.WETH();\n\n        _approve(address(this), address(_uniswapV2Router), tokenAmount);\n\n        // make the swap\n        _uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0, // accept any amount of ETH\n            path,\n            address(this),\n            block.timestamp\n        );\n    }\n\n    /**\n     * @dev Add liquidity to the pair contract\n     *\n     * Internal function, it will fund the pair contract with WETH + FRAC token combinations.\n     * all FRAC token will be transfered to the pair\n     *\n     * Emits an {Liquidity Added} event.\n     *\n     */\n\n    function _addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\n        // approve token transfer to cover all possible scenarios\n        _approve(address(this), address(_uniswapV2Router), tokenAmount);\n\n        // add the liquidity\n        _uniswapV2Router.addLiquidityETH{value: ethAmount}(\n            address(this),\n            tokenAmount,\n            0, // slippage is unavoidable\n            0, // slippage is unavoidable\n            _feeWallet,\n            block.timestamp\n        );\n    }\n\n    /**\n     * @dev Swap back the marketing + liquidity fees to WETH\n     *\n     * Internal function to swap back the FRAC tokens to WETH for further use\n     *\n     */\n    function swapBack() private lockSwap {\n        uint256 contractBalance = balanceOf(address(this));\n        uint256 totalTokensToSwap = _tokensForLiquidity + _tokensForMarketing;\n\n        if (contractBalance == 0 || totalTokensToSwap == 0) return;\n        if (contractBalance > swapTokensAtAmount) {\n            contractBalance = swapTokensAtAmount;\n        }\n\n        uint256 liquidityTokens = (contractBalance * _tokensForLiquidity) /\n            totalTokensToSwap /\n            2;\n        uint256 amountToSwapForETH = totalTokensToSwap - liquidityTokens;\n\n        uint256 initialETHBalance = address(this).balance;\n\n        _swapTokensForEth(amountToSwapForETH);\n\n        uint256 ethBalance = address(this).balance - initialETHBalance;\n        uint256 ethForMarketing = (ethBalance * _tokensForMarketing) /\n            totalTokensToSwap;\n        uint256 ethForLiquidity = ethBalance - ethForMarketing;\n\n        _tokensForLiquidity = 0;\n        _tokensForMarketing = 0;\n\n        payable(_feeWallet).transfer(ethForMarketing);\n\n        if (liquidityTokens > 0 && ethForLiquidity > 0) {\n            _addLiquidity(liquidityTokens, ethForLiquidity);\n            emit SwapAndLiquify(\n                amountToSwapForETH,\n                ethForLiquidity,\n                _tokensForLiquidity\n            );\n        }\n    }\n\n    /**\n     * @dev Swap back the marketing + liquidity fees to WETH\n     *\n     * External function to force a swap back the FRAC tokens to WETH for further use\n     *\n     */\n    function forceSwap() external {\n        swapBack();\n    }\n\n    /**\n     * @dev Free up stucked balance on the contract\n     *\n     */\n    function forceSend() external {\n        payable(_feeWallet).transfer(address(this).balance);\n    }\n\n    receive() external payable {}\n}\n"
    }
  },
  "settings": {
    "remappings": [],
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "london",
    "libraries": {},
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}