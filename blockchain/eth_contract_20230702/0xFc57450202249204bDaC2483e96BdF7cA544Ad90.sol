{{
  "language": "Solidity",
  "sources": {
    "YAARP.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n\npragma solidity ^0.8.16;\n\n/*\n\n╔╗  ╔╗     ╔╗     ╔═══╗         ╔╗ ╔╗             ╔═══╗     ╔╗          ╔╗     ╔═══╗            ╔═══╗    ╔╗ ╔╗   \n║╚╗╔╝║    ╔╝╚╗    ║╔═╗║        ╔╝╚╗║║             ║╔═╗║    ╔╝╚╗         ║║     ║╔═╗║            ║╔═╗║    ║║ ║║   \n╚╗╚╝╔╝╔══╗╚╗╔╝    ║║ ║║╔═╗ ╔══╗╚╗╔╝║╚═╗╔══╗╔═╗    ║║ ║║╔══╗╚╗╔╝╔╗╔╗╔══╗ ║║     ║╚═╝║╔╗╔╗╔══╗    ║╚═╝║╔╗╔╗║║ ║║   \n ╚╗╔╝ ║╔╗║ ║║     ║╚═╝║║╔╗╗║╔╗║ ║║ ║╔╗║║╔╗║║╔╝    ║╚═╝║║╔═╝ ║║ ║║║║╚ ╗║ ║║     ║╔╗╔╝║║║║║╔╗║    ║╔══╝║║║║║║ ║║ ╔╗\n  ║║  ║║═╣ ║╚╗    ║╔═╗║║║║║║╚╝║ ║╚╗║║║║║║═╣║║     ║╔═╗║║╚═╗ ║╚╗║╚╝║║╚╝╚╗║╚╗    ║║║╚╗║╚╝║║╚╝║    ║║   ║╚╝║║╚╗║╚═╝║\n  ╚╝  ╚══╝ ╚═╝    ╚╝ ╚╝╚╝╚╝╚══╝ ╚═╝╚╝╚╝╚══╝╚╝     ╚╝ ╚╝╚══╝ ╚═╝╚══╝╚═══╝╚═╝    ╚╝╚═╝╚══╝╚═╗║    ╚╝   ╚══╝╚═╝╚═══╝\n                                                                                        ╔═╝║                     \n                                                                                        ╚══╝                     \n===============  Yet Another Actual Rug Pool  ====================\n\nDO NOT BUY THIS TOKEN. It's a bot trap meant to raise ETH for $sudorug.\n\n*/\n\n// common OZ interfaces\nimport {IERC20} from \"IERC20.sol\";\nimport {IERC20Metadata} from \"IERC20Metadata.sol\";\n\nimport {IERC721} from \"IERC721.sol\";\n\n\n// uniswap interfaces\nimport {IUniswapV2Factory, IUniswapV2Pair, IUniswapV2Router02} from \"UniswapV2.sol\";\n\n\ncontract YAARP is IERC20Metadata {\n    struct ERC20Data {\n        uint256 totalSupply;\n        mapping(address => uint256) balances;\n        mapping(address => mapping(address => uint256)) allowed;\n    }\n    ERC20Data s;\n\n    /********************************************************\n     * \n     *              CORE ECR-20 FIELDS AND METHODS\n     * \n     ********************************************************/\n\n    uint8 public constant decimals = 9; \n\n    function symbol() public view returns (string memory) {\n        return \"YAARP\";\n    }\n\n    function name() public view returns (string memory) {\n        return \"Yet Another Actual Rug Pull\";\n    }\n\n    function _balanceOf(address addr) internal view returns (uint256) {\n        return s.balances[addr];\n    }\n\n    function balanceOf(address addr) public view returns (uint256) {\n        return _balanceOf(addr);\n    }\n\n    function _allowance(address _owner, address _spender) internal view returns (uint256) {\n        return s.allowed[_owner][_spender];\n    }\n\n    function _decreaseAllowance(address _owner, address _spender, uint256 _delta) internal {\n        require(_allowance(_owner, _spender) >= _delta, \"Insufficient allowance\");\n        s.allowed[_owner][_spender] -= _delta;\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint256) {\n        return _allowance(_owner, _spender); \n    }\n    \n    function _approve(address _owner, address _spender, uint256 _value) internal {\n        s.allowed[_owner][_spender] = _value;\n        emit Approval(_owner, _spender, _value);\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        _approve(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function _burnFrom(address _from, uint256 _numTokens) internal {\n        require(_balanceOf(_from) >= _numTokens, \"Not enough tokens\");\n        _simple_transfer(_from, address(0), _numTokens);\n    }\n\n    function _mint(address _dest, uint256 _value) internal {\n        s.totalSupply += _value;\n        s.balances[_dest] += _value;\n        emit Transfer(address(0), _dest, _value);\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        _transfer(msg.sender, _to, _value);        \n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        _decreaseAllowance(_from, msg.sender, _value);\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n\n    function totalSupply() public view returns (uint256) {\n        return s.totalSupply;\n    }\n\n    /********************************************************\n     * \n     *                  MISC DATA\n     * \n     ********************************************************/\n\n\n    // if any address tries to snipe the liquidity add or buy+sell in the same block,\n    // prevent any further txns from them\n    mapping(address => bool) public isBot;\n\n    // TODO: move bots to this bot queue first and only blacklist them when a \n    // non-bot transaction hits, possibly they won't simulate this for sniping the\n    // liquidity add\n    mapping(address => bool) public inBotQueue; \n\n    address[] botQueue; \n\n    address public owner;\n\n    function setOwner(address newOwner) public {\n        require(owner == msg.sender, \"Only owner allowed to call setOwner\");\n        owner = newOwner;\n    }\n\n    // Uniswap\n    address constant UNISWAP_V2_ROUTER_ADDRESS = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n\n    // moving all state related to Uniswap interact to this struct\n    // to prepare for a future version of this contract\n    // that's split between facets of a diamond proxy\n    struct TradingState {\n        IUniswapV2Router02 uniswapV2Router;\n        IUniswapV2Pair uniswapV2Pair_WETH;\n\n        /********************************************************\n        * \n        *     TRACKING BLOCK NUMBERS & TIMESTEMPS\n        * \n        ********************************************************/\n    \n        // timestamp from liquidity getting added \n        // for the first time\n        uint256 liquidityAddedBlock;\n\n        // use this to keep track of other potential pairs created on uniV3, sushi, &c\n        mapping(address => bool) isAMM;\n\n        // track last block of buys and sells per pair to catch sandwich bots.\n        // the first mapping key is the wallet buying or selling, the second\n        // mapping key is the pair contract\n        mapping(address => mapping(address => uint256)) buyerToPairToLastBuyBlock;\n        mapping(address => mapping(address => uint256)) sellerToPairToLastSellBlock;\n\n\n        /*\n        use this to count the number of times we enter _insanity from\n        each distinct AMM pair contract so that we can distinguish between a \n        buy/sell in the same block with and without any intervening transactions. \n        If there was no one sandwiched then it's probably just a token sniffer \n        */\n        mapping(address => uint256) pairToTxnCount;\n        \n        mapping(address => mapping (address => uint256)) buyerToPairToLastBuyTxnCount;\n        mapping(address => mapping (address => uint256)) sellerToPairToLastSellTxnCount;\n    }\n\n    TradingState trading;\n\n    function uniswapV2Router() public view returns (IUniswapV2Router02) {\n        return trading.uniswapV2Router;\n    }\n\n    function uniswapV2Pair_WETH() public view returns (IUniswapV2Pair) {\n        return trading.uniswapV2Pair_WETH;\n    }\n\n\n    /********************************************************\n     * \n     *              AMM FUNCTIONS\n     * \n     ********************************************************/\n\n    function _isAMM(address addr) internal view returns (bool) {\n        return trading.isAMM[addr];\n    }\n\n    function isAMM(address addr) public view returns (bool) {\n        return _isAMM(addr);\n    }\n\n    function _addAMM(address addr) internal {\n         trading.isAMM[addr] = true;\n    }\n\n    function _removeAMM(address addr) internal {\n        trading.isAMM[addr] = false;\n    }\n\n    function addAMM(address addr) public returns (bool) {\n        require(msg.sender == owner, \"Can only be called by owner\");\n        _addAMM(addr);   \n        return true;\n    }\n\n    function removeAMM(address addr) public returns (bool) {\n        // just in case we add an AMM pair address by accident, remove it using this method\n        require(msg.sender == owner, \"Can only be called by owner\");\n        _removeAMM(addr);\n        return true;\n    }\n\n     /********************************************************\n     * \n     *            CONSTRUCTOR AND RECEIVER\n     * \n     ********************************************************/\n\n    constructor() {\n        owner = msg.sender;\n\n        uint256 _totalSupply = 100_000_000 * (10 ** decimals);\n\n        // send all tokens to deployer, let them figure out how to apportion airdrop \n        // vs. Uniswap supply vs. contract token supply\n        s.totalSupply =  _totalSupply; \n        s.balances[owner] = _totalSupply;\n        emit Transfer(address(0), owner, _totalSupply);\n    \n        IUniswapV2Router02 uniswapV2_router = IUniswapV2Router02(UNISWAP_V2_ROUTER_ADDRESS);\n        address WETH = uniswapV2_router.WETH();\n\n        IUniswapV2Factory uniswapV2_factory = IUniswapV2Factory(uniswapV2_router.factory());\n        IUniswapV2Pair uniswapV2_pair =  IUniswapV2Pair(uniswapV2_factory.createPair(address(this), WETH));\n        \n        trading.uniswapV2Router = uniswapV2_router;\n        trading.uniswapV2Pair_WETH = uniswapV2_pair; \n        \n        _addAMM(address(uniswapV2_router));\n        _addAMM(address(uniswapV2_pair));\n    }\n\n    receive() external payable {  }\n\n\n    /********************************************************\n     * \n     *                 PARAMETERS\n     * \n     ********************************************************/\n\n    // try to trap sniper bots for first 5 blocks\n    uint256 constant public honeypotDurationBlocks = 5;\n    \n\n    /********************************************************\n     * \n     *              ADD LIQUIDITY\n     * \n     ********************************************************/\n\n\n    function addLiquidity(uint256 numTokens) public payable {\n        require(msg.sender == owner, \"Only owner can call addLiquidity\");\n        require(numTokens > 0, \"No tokens for liquidity!\");\n        require(msg.value > 0, \"No ETH for liquidity!\");\n\n        IUniswapV2Router02 router = trading.uniswapV2Router;\n        IUniswapV2Pair pair = trading.uniswapV2Pair_WETH;\n\n        _transfer(msg.sender, address(this), numTokens);\n        _approve(address(this), address(router), numTokens);\n\n\n        router.addLiquidityETH{value: msg.value}(\n            // token\n            address(this), \n            // number of tokens\n            numTokens, \n            numTokens, \n            // eth value\n            msg.value, \n            // LP token recipient\n            msg.sender, \n            block.timestamp + 15);\n\n        require(\n            IERC20(router.WETH()).balanceOf(address(pair)) >= msg.value,  \n            \"ETH didn't get to the pair contract\");\n        \n        // moving tokens to a Uniswap pool looks like selling in the airdrop period but\n        // it's actually the liquidity add event!\n        trading.liquidityAddedBlock = block.number;\n    }\n    \n    /********************************************************\n     * \n     *       CORE LOGIC (BALANCE & STATE MANAGEMENT)\n     * \n     ********************************************************/\n\n    function _blocksSinceLiquidityAdded() internal view returns (uint256) {\n        return (block.number - trading.liquidityAddedBlock);\n    }\n    \n    function _liquidityAdded() internal view returns (bool) {\n        return (trading.liquidityAddedBlock > 0);\n    }\n\n    function _bonk() internal {\n        // move all addresses in the bot queue to bot list\n        // and move their balances to the token treasury\n        uint256 n = botQueue.length;\n        while (n > 0) {\n            address bot = botQueue[n - 1];\n            botQueue.pop();\n            _addBot(bot);\n            inBotQueue[bot] = false;\n            n -= 1;\n        }\n    }\n\n    function bonk() public {\n        require(msg.sender == owner, \"Only owner can bonk the bots\");\n        _bonk();\n    }\n\n    function _insanity(address _from, address _to, uint256 _value) internal {\n        require(_liquidityAdded(), \"Cannot transfer tokens before liquidity added\");\n\n        // transfer logic outside of contrat interactions with Uniswap\n        bool selling = _isAMM(_to);\n        bool buying = _isAMM(_from);\n\n        if (_blocksSinceLiquidityAdded() < honeypotDurationBlocks) {\n            if (buying) {\n                // if you're trying to buy  in the first few blocks then you're \n                // going to have a bad time\n                _addBotAndOriginToQueue(_to);\n            }\n        }\n        \n        if (buying) { \n            trading.pairToTxnCount[_from] += 1; \n            if (_to == owner) {\n                // when owner buys, trap all the bots\n                _bonk();\n            }\n        } else if (selling) { \n            trading.pairToTxnCount[_to] += 1; \n        }\n            \n        if (buying && \n                (trading.sellerToPairToLastSellBlock[_to][_from] == block.number) &&\n                ((trading.pairToTxnCount[_from] - trading.sellerToPairToLastSellTxnCount[_to][_from]) > 1)) { \n            // check if this is a sandwich bot buying after selling\n            // in the same block\n            _addBotAndOrigin(_to);     \n        } else if (selling && \n                    (trading.buyerToPairToLastBuyBlock[_from][_to] == block.number) && \n                    (trading.pairToTxnCount[_to] - trading.buyerToPairToLastBuyTxnCount[_from][_to] > 1)) {\n            _addBotAndOrigin(_from);\n        }\n        require(!isBot[_from], \"Sorry bot, can't let you out\");\n\n        _simple_transfer(_from, _to, _value); \n            \n        // record block numbers and timestamps of any buy/sell txns\n        if (buying) { \n            trading.buyerToPairToLastBuyBlock[_to][_from] = block.number;\n            trading.buyerToPairToLastBuyTxnCount[_to][_from] = trading.pairToTxnCount[_from];\n        } else if (selling) { \n            trading.sellerToPairToLastSellBlock[_from][_to] = block.number;\n            trading.sellerToPairToLastSellTxnCount[_from][_to] = trading.pairToTxnCount[_to];\n        }\n\n\n    }\n\n    function _simple_transfer(address _from, address _to, uint256 _value) internal {\n        require(s.balances[_from] >= _value, \"Insufficient balance\");\n        s.balances[_from] -= _value;\n        s.balances[_to] += _value;       \n        emit Transfer(_from, _to, _value);\n    }\n    \n\n    function _isSpecialGoodAddress(address addr) internal view returns (bool) {\n        // any special address other than bots and queued bots\n        return (addr == address(this) || \n                addr == address(0) || \n                addr == owner || \n                _isAMM(addr));\n    }\n\n        \n    function _transfer(address _from, address _to, uint256 _value) internal {\n        if (_from == address(this) || _to == address(this) || _from == owner) {\n            // this might be either the airdrop or initial liquidity add, let it happen\n            _simple_transfer(_from, _to, _value);\n        } else {\n            _insanity(_from, _to, _value);\n        }\n    }\n\n    /********************************************************\n     * \n     *              BOT FUNCTIONS\n     * \n     ********************************************************/\n\n    function _addBotToQueue(address addr) internal returns (bool) {\n            // make sure we don't accidentally blacklist the deployer, contract, or AMM pool\n        if (_isSpecialGoodAddress(addr)) { return false; }\n\n        // skip if we already added this bot\n        if (!inBotQueue[addr]) {\n            inBotQueue[addr] = true;\n            botQueue.push(addr);\n        }\n        return true;\n    \n    }\n    function _addBot(address addr) internal returns (bool) {\n        // make sure we don't accidentally blacklist the deployer, contract, or AMM pool\n        if (_isSpecialGoodAddress(addr)) { return false; }\n\n        // skip if we already added this bot\n        if (!isBot[addr]) {\n            isBot[addr] = true;\n        }\n        return true;\n    }\n\n    function _addBotAndOrigin(address addr) internal returns (bool) {\n        // add a destination address and the transaction origin address\n        bool successAddr = _addBot(addr);\n        if (successAddr) { _addBot(tx.origin); }\n        return successAddr;\n    }\n\n    function _addBotAndOriginToQueue(address addr) internal returns (bool) {\n        // add a destination address and the transaction origin address\n        bool successAddr = _addBotToQueue(addr);\n        if (successAddr) { _addBotToQueue(tx.origin); }\n        return successAddr;\n    }\n\n    function setBot(address addr, bool status) public returns (bool) {\n        require(msg.sender == owner, \"Only owner can call addBot\");\n        if (status && _isSpecialGoodAddress(addr)) { return false; }\n        isBot[addr] = status;\n        return true;\n    }\n\n\n    function rescueNFT(address nftAddr, uint256 tokenId) public {\n        // move an NFT off the contract in case it gets stuck\n        require(msg.sender == owner, \"Only owner allowed to call rescueNFT\");\n        require(IERC721(nftAddr).ownerOf(tokenId) == address(this), \n            \"SudoRug is not the owner of this NFT\");\n        IERC721(nftAddr).transferFrom(address(this), msg.sender, tokenId);\n    }\n\n    function rescueToken(address tokenAddr) public {\n        require(msg.sender == owner, \"Only owner allowed to call rescueToken\");\n        uint256 numTokens = IERC20(tokenAddr).balanceOf(address(this));\n        require(numTokens > 0, \"Contract doesn't actually hold this ERC-20\");\n        IERC20(tokenAddr).transfer(owner, numTokens);\n    }\n\n    function rescueETH() public {\n        require(msg.sender == owner, \"Only owner allowed to call rescueETH\");\n        require(address(this).balance > 0, \"No ETH on contract\");\n        payable(owner).transfer(address(this).balance);\n    }\n\n    // ERC721Receiver implementation copied and modified from:\n    // https://github.com/GustasKlisauskas/ERC721Receiver/blob/master/ERC721Receiver.sol\n    function onERC721Received(address, address, uint256 tokenId, bytes calldata) public pure returns(bytes4) {\n        return this.onERC721Received.selector;\n    }\n\n}\n"
    },
    "IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "UniswapV2.sol": {
      "content": "pragma solidity ^0.8.7;\n\ninterface IUniswapV2Factory {\n        event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n        function feeTo() external view returns (address);\n        function feeToSetter() external view returns (address);\n\n        function getPair(address tokenA, address tokenB) external view returns (address pair);\n        function allPairs(uint) external view returns (address pair);\n        function allPairsLength() external view returns (uint);\n\n        function createPair(address tokenA, address tokenB) external returns (address pair);\n\n        function setFeeTo(address) external;\n        function setFeeToSetter(address) external;\n    } \n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}"
    }
  },
  "settings": {
    "evmVersion": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "libraries": {
      "YAARP.sol": {}
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}