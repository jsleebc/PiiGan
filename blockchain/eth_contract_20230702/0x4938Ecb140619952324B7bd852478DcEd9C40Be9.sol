{{
  "language": "Solidity",
  "sources": {
    "CapitalistPigs.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\n/*\r\n\r\nTelegram    : https://t.me/thecapitalistpigs\r\nTwitter     : https://twitter.com/CapitalistPig77\r\n\r\n*/\r\n\r\npragma solidity ^0.8.9;\r\n\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    uint256 private _totalSupply;\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n    unchecked {\r\n        _approve(sender, _msgSender(), currentAllowance - amount);\r\n    }\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n    unchecked {\r\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n    }\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n    unchecked {\r\n        _balances[sender] = senderBalance - amount;\r\n    }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        _afterTokenTransfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n    unchecked {\r\n        _balances[account] = accountBalance - amount;\r\n    }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) internal {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\nabstract contract Pausable is Context {\r\n\r\n    event Paused(address account);\r\n\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function balanceOf(address owner) external view returns (uint);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n\r\n    function transfer(address to, uint value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n    function price0CumulativeLast() external view returns (uint);\r\n\r\n    function price1CumulativeLast() external view returns (uint);\r\n\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n\r\n    function allPairs(uint) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ncontract CapitalistPig is ERC20, Ownable, Pausable {\r\n\r\n    uint256 private initialSupply;\r\n    uint256 private initialTeamSupply;\r\n    uint256 private denominator = 100; // for percents\r\n    uint256 private swapThreshold = 0.000005 ether;\r\n\r\n    uint256 private devTaxBuy;\r\n    uint256 private liquidityTaxBuy;\r\n\r\n    uint256 private devTaxSell;\r\n    uint256 private liquidityTaxSell;\r\n    uint256 public maxWallet;\r\n\r\n    mapping(address => bool) public blacklist; // make private\r\n    mapping(address => bool) public excludeList; // make private\r\n\r\n    mapping(string => uint256) public buyTaxes; // make private\r\n    mapping(string => uint256) public sellTaxes; // make private\r\n    mapping(string => address) public taxWallets; // make private\r\n\r\n    uint256 public devTokens;\r\n    uint256 public liquidityTokens;\r\n\r\n    // delete these:\r\n    uint256 public currentLiqEthValue;\r\n    uint256 public currentToSell;\r\n    uint256 public currentEthGained;\r\n    uint256 public currentRemainingTokens;\r\n\r\n    uint256 public currentBalanceOfTo;\r\n    uint256 public currentAmount;\r\n    uint256 public currentBalancePlusAmount;\r\n    uint256 public currentMaxWallet;\r\n\r\n\r\n    bool public taxStatus = true;\r\n    bool public autoLiqStatus = true;\r\n\r\n    IUniswapV2Router02 private uniswapV2Router02;\r\n    IUniswapV2Factory private uniswapV2Factory;\r\n    IUniswapV2Pair private uniswapV2Pair;\r\n\r\n    constructor() ERC20(\"CapitalistPigs\", \"HOGFND\") payable\r\n    {\r\n        initialSupply = 100000000 * 10 ** decimals();\r\n        // 100 million\r\n        initialTeamSupply = initialSupply * 5 / 100;\r\n        // 8% of total supply (8000000)\r\n        maxWallet = initialSupply * 30 / 1000;\r\n        // 3% of total supply (3000000)\r\n        _setOwner(msg.sender);\r\n        uniswapV2Router02 = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        uniswapV2Factory = IUniswapV2Factory(uniswapV2Router02.factory());\r\n        uniswapV2Pair = IUniswapV2Pair(uniswapV2Factory.createPair(address(this), uniswapV2Router02.WETH()));\r\n        taxWallets[\"liquidity\"] = address(0);\r\n        setBuyTax(0, 4);\r\n        setSellTax(0, 25);\r\n        setTaxWallets(0xEC979B18f055257477BBCB0F6cf38f9D0C11fCFD);\r\n        // owner wallet excluded from tax and cap\r\n        exclude(msg.sender);\r\n        exclude(address(this));\r\n        // dex tax wallet excluded from tax and cap\r\n        exclude(0xEC979B18f055257477BBCB0F6cf38f9D0C11fCFD);\r\n\r\n        _mint(0xEC979B18f055257477BBCB0F6cf38f9D0C11fCFD, initialTeamSupply);\r\n        _mint(msg.sender, initialSupply - initialTeamSupply);\r\n    }\r\n\r\n    function handleTax(address from, address to, uint256 amount) private returns (uint256) {\r\n\r\n        if (!isExcluded(from) && !isExcluded(to)) {\r\n            uint256 tax;\r\n            if (from == address(uniswapV2Pair)) {\r\n                tax += amount * buyTaxes[\"dev\"] / denominator;\r\n                tax += amount * buyTaxes[\"liquidity\"] / denominator;\r\n\r\n                devTokens += amount * buyTaxes[\"dev\"] / denominator;\r\n                liquidityTokens += amount * buyTaxes[\"liquidity\"] / denominator;\r\n\r\n                if (tax > 0) {\r\n                    _transfer(from, address(this), tax);\r\n                    // moved tax to this contract\r\n                }\r\n            } else if (to == address(uniswapV2Pair)) {\r\n\r\n                tax += amount * sellTaxes[\"dev\"] / denominator;\r\n                tax += amount * sellTaxes[\"liquidity\"] / denominator;\r\n\r\n                devTokens += amount * sellTaxes[\"dev\"] / denominator;\r\n                liquidityTokens += amount * sellTaxes[\"liquidity\"] / denominator;\r\n\r\n                if (tax > 0) {\r\n                    _transfer(from, address(this), tax);\r\n                }\r\n\r\n                uint256 taxSum = devTokens + liquidityTokens;\r\n                if (taxSum == 0) return amount;\r\n\r\n                if(autoLiqStatus) _do_swap_and_liq_provide();\r\n\r\n            }\r\n\r\n            amount -= tax;\r\n\r\n            currentBalanceOfTo = balanceOf(to);\r\n            currentAmount = amount;\r\n            currentBalancePlusAmount = currentBalanceOfTo + currentAmount;\r\n            currentMaxWallet = maxWallet;\r\n\r\n            if (to != address(uniswapV2Pair)) {\r\n                require(balanceOf(to) + amount <= maxWallet, \"maxWallet limit exceeded\");\r\n            }\r\n\r\n        }\r\n\r\n        return amount;\r\n    }\r\n\r\n    function _do_swap_and_liq_provide() public {\r\n        address[] memory sellPath = new address[](2);\r\n        sellPath[0] = address(this);\r\n        sellPath[1] = uniswapV2Router02.WETH();\r\n\r\n        uint256 ethValue = uniswapV2Router02.getAmountsOut(devTokens + liquidityTokens, sellPath)[1];\r\n        // delete\r\n        //currentLiqForEthValue = devTokens + liquidityTokens;\r\n        currentLiqEthValue = ethValue;\r\n\r\n        if (ethValue >= swapThreshold) {\r\n            uint256 startBalance = address(this).balance;\r\n\r\n            uint256 toSell = devTokens + liquidityTokens / 2;\r\n\r\n            // delete\r\n            currentToSell = toSell;\r\n\r\n            _approve(address(this), address(uniswapV2Router02), toSell);\r\n\r\n            uniswapV2Router02.swapExactTokensForETH(\r\n                toSell,\r\n                0,\r\n                sellPath,\r\n                address(this),\r\n                block.timestamp\r\n            );\r\n\r\n            uint256 ethGained = address(this).balance - startBalance;\r\n\r\n            // delete\r\n            currentEthGained = ethGained;\r\n\r\n            uint256 liquidityToken = liquidityTokens / 2;\r\n            uint256 liquidityETH = (ethGained * ((liquidityTokens / 2 * 10 ** 18) / (devTokens + liquidityTokens))) / 10 ** 18;\r\n\r\n            uint256 devETH = (ethGained * ((devTokens * 10 ** 18) / (devTokens + liquidityTokens))) / 10 ** 18;\r\n\r\n            _approve(address(this), address(uniswapV2Router02), liquidityToken);\r\n\r\n            uniswapV2Router02.addLiquidityETH{value : liquidityETH}(\r\n                address(this),\r\n                liquidityToken,\r\n                0,\r\n                0,\r\n                taxWallets[\"liquidity\"],\r\n                block.timestamp\r\n            );\r\n\r\n            uint256 remainingTokens = (devTokens + liquidityTokens) - (toSell + liquidityToken);\r\n\r\n            // delete\r\n            currentRemainingTokens = remainingTokens;\r\n\r\n            if (remainingTokens > 0) {\r\n                _transfer(address(this), taxWallets[\"dev\"], remainingTokens);\r\n            }\r\n\r\n\r\n            (bool success,) = taxWallets[\"dev\"].call{value : devETH}(\"\");\r\n            require(success, \"transfer to  dev wallet failed\");\r\n\r\n            if (ethGained - (devETH + liquidityETH) > 0) {\r\n                (bool success1,) = taxWallets[\"dev\"].call{value : ethGained - (devETH + liquidityETH)}(\"\");\r\n                require(success1, \"transfer to  dev wallet failed\");\r\n            }\r\n\r\n            devTokens = 0;\r\n            liquidityTokens = 0;\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal override virtual {\r\n        require(!paused(), \"ERC20: token transfer while paused\");\r\n        require(!isBlacklisted(msg.sender), \"ERC20: sender blacklisted\");\r\n        require(!isBlacklisted(recipient), \"ERC20: recipient blacklisted\");\r\n        require(!isBlacklisted(tx.origin), \"ERC20: sender blacklisted\");\r\n\r\n        if (taxStatus) {\r\n            amount = handleTax(sender, recipient, amount);\r\n        }\r\n\r\n        super._transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers the tax handling functionality\r\n     */\r\n    function triggerTax() public onlyOwner {\r\n        handleTax(address(0), address(uniswapV2Pair), 0);\r\n    }\r\n\r\n    /**\r\n     * @dev Pauses transfers on the token.\r\n     */\r\n    function pause() public onlyOwner {\r\n        require(!paused(), \"ERC20: Contract is already paused\");\r\n        _pause();\r\n    }\r\n\r\n    /**\r\n     * @dev Unpauses transfers on the token.\r\n     */\r\n    function unpause() public onlyOwner {\r\n        require(paused(), \"ERC20: Contract is not paused\");\r\n        _unpause();\r\n    }\r\n\r\n    /**\r\n    * @dev set max wallet limit per address.\r\n     */\r\n\r\n    function setMaxWallet(uint256 amount) external onlyOwner {\r\n        require(amount > 10000, \"NO rug pull\");\r\n        maxWallet = amount * 10 ** 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Burns tokens from caller address.\r\n     */\r\n    function burn(uint256 amount) public onlyOwner {\r\n        _burn(msg.sender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Blacklists the specified account (Disables transfers to and from the account).\r\n     */\r\n    function enableBlacklist(address account) public onlyOwner {\r\n        require(!blacklist[account], \"ERC20: Account is already blacklisted\");\r\n        blacklist[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove the specified account from the blacklist.\r\n     */\r\n    function disableBlacklist(address account) public onlyOwner {\r\n        require(blacklist[account], \"ERC20: Account is not blacklisted\");\r\n        blacklist[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Excludes the specified account from tax.\r\n     */\r\n    function exclude(address account) public onlyOwner {\r\n        require(!isExcluded(account), \"ERC20: Account is already excluded\");\r\n        excludeList[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Re-enables tax on the specified account.\r\n     */\r\n    function removeExclude(address account) public onlyOwner {\r\n        require(isExcluded(account), \"ERC20: Account is not excluded\");\r\n        excludeList[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets tax for buys.\r\n     */\r\n    function setBuyTax(uint256 dev, uint256 liquidity) public onlyOwner {\r\n        buyTaxes[\"dev\"] = dev;\r\n        buyTaxes[\"liquidity\"] = liquidity;\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Sets tax for sells.\r\n     */\r\n    function setSellTax(uint256 dev, uint256 liquidity) public onlyOwner {\r\n\r\n        sellTaxes[\"dev\"] = dev;\r\n        sellTaxes[\"liquidity\"] = liquidity;\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Sets wallets for taxes.\r\n     */\r\n    function setTaxWallets(address dev) public onlyOwner {\r\n        taxWallets[\"dev\"] = dev;\r\n\r\n    }\r\n\r\n    function claimStuckTokens(address _token) external onlyOwner {\r\n\r\n        if (_token == address(0x0)) {\r\n            payable(owner()).transfer(address(this).balance);\r\n            return;\r\n        }\r\n        IERC20 erc20token = IERC20(_token);\r\n        uint256 balance = erc20token.balanceOf(address(this));\r\n        erc20token.transfer(owner(), balance);\r\n    }\r\n\r\n    /**\r\n     * @dev Enables tax globally.\r\n     */\r\n    function enableTax() public onlyOwner {\r\n        require(!taxStatus, \"ERC20: Tax is already enabled\");\r\n        taxStatus = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Disables tax globally.\r\n     */\r\n    function disableTax() public onlyOwner {\r\n        require(taxStatus, \"ERC20: Tax is already disabled\");\r\n        taxStatus = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the account is blacklisted, and false otherwise.\r\n     */\r\n    function isBlacklisted(address account) public view returns (bool) {\r\n        return blacklist[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the account is excluded, and false otherwise.\r\n     */\r\n    function isExcluded(address account) public view returns (bool) {\r\n        return excludeList[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Enables auto liquidity add.\r\n     */\r\n    function enableAutoLiq() public onlyOwner {\r\n        autoLiqStatus = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Disables auto liquidity add.\r\n     */\r\n    function disableAutoLiq() public onlyOwner {\r\n        autoLiqStatus = false;\r\n    }\r\n\r\n    receive() external payable {}\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}