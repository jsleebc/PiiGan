{{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/brocoin/BroCoin.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\n/* \n                              ...... .      .:^~7?J5PPGBBB#&##BGBGPPYJ?7!^:.       .   ...  .                           \n                   .          ..      .^!?5GB#&&@@@&&&@&&&&&@@@@@@@@@@@@@&#BG5?!^:       .     .                        \n                          .      .^7YG#&@@@&BG@@&&&?77~^7??#@Y^7Y??Y#&&@@@@@@@@@&#GY7^.        .                        \n                         .   .~?5B&@@@&@PY7^5G&@&&&&&B.^&&&&B  J@#? 7@&#!?#&&&@&&@@@@@#P?^.    ..                       \n                    ..    :!5B&@@@&B@&7P###~P@&@&&&&&#:^&&&@P  77~~?B&@? Y@&&@J.^#@&#B#@@&#5!:                          \n                       :!5#@@@&B#@&!Y@BG@@@P^#@@&&&&@J ~&&&@7 J&Y ^#@&J ~&&&@B  Y&7:7?7~5@@@@#P7:                       \n                    .~Y#@@@@@@&!.?5B~Y@@&@@&?P@@&&&&@B5#@@@&J7#@@P:!#&. 5@@@&! J@B. JB@GB&YYG&@@&5~.                    \n                  .7G@@@@&PYYP&&~?PJ7 Y@@&@@@&@@@@@@&&&#BBGGPGBB#&&&&@G7^???^:5#B&#57:~#@&BY.:!YG&@B?.  . .             \n                :J#@@@@@#!5BBJ~B#~Y@#5P@@@@@&#G5Y?!~^:....      .::~~7J5P55PB&@P!!YPY^~#&@G^ JB5?G@@@#J:  .             \n              .?#@@@@@@@G:#@@@Y~@#5&@@@&BPJ!^:.            ...::....:^:. .^!J5B&@#BPPB&&&J !G@&@@&@&&@@#J:              \n       .    .7B@@&@&GYYP&Y~PBG7Y@@@@#P?^:~!?Y55555PP55555Y5PPGGGGPPPGGGGY!.   .:75B@@@@@J^5@@&&&&&@&@@@@@#7.            \n           ^P@@@@&P75GG?!BB5Y5B@@#5!. ^?PBBBBBBBBBBBBBBBGGGGGGGGGGGGPGGGGGPJ~.     ~JG&@@@@&&&&@@@@G?B@@@@@G~           \n          ?&@@@@@&?~G@@@J!@@@@&P!.  ~PBBGGGGBBGGGGGGGGGGGGGGGGGGGPGGGGGGGGGBGPYJ7^.   ~Y#@@@@@@@@@@#~^Y&@@@@&J.         \n        :P@@@@@@@@@B77GG7P@@#Y^   .JBBGGBGGGGGGGGGGGGGGGGGGGGPPPPPPPPPPPPPPPGGGGGG5~    .?B@@@&&@#J!P#5P@@@@@@P:        \n       ^B@@@@&#@@@@@@G7?#@#J:    ~PBGGGBGGGGGGGGGGGGGGGGGGPPPPPPPPPPPPPPPPPPPPPPPPGPJ:    .7B@@@G75&@@@GJB@@@@@#~       \n      ~#@@@@@#?75#@@@@@@&Y:     ~GBBBBBGGGGGGGGGGGGGGGGGGGGGPGGPPPGGPGGGPPPPPPPPPPPPGPJ:    .?#@&&@&BY~~B@@@@@@@&!      \n     ~&@@@@@@@@BY7JB@@@G~      7GBGBGGGGGGGGGGGGGGPPGPPGGGGPPGPPGGPGGGBGGPPGPPPGPPPGPPGP?.    .Y&@@P7PB?5BYY@@&@@&7 .   \n    ^#@@@@@@@@@@@&GG@@Y.      7BGGBGGGGGGGGGGGGGPPPGGPPGGGGPPGPGBGGGPGGBGGPPGGPPGPPGGGPGGY.     !#@&@@&P^75&&&@&@@&!  ..\n.  :B@@@@@@@@@@@@@@@&7       ~GGGBGGGGGGGGGGGGPPPPPGGGPGGGPPGGGP?5BGGPGBGGPPGGPPGGGGGGGPPGY.     ^B@@&?Y#&GY7~G@@@@#^ . \n.  P@@@@@@@@@@@@@@@#~       .PGGBGGGPPPGGGGGGGGPPPGGGGPGGGPPGG5~:~5BGPGGGGPPGGGPGBGGGGPPPPGY:     .G@&&B??7^BG~B@@@@P.. \n. 7@@@@@@@@@@@@@@@&~        JGGBBGPPPGGGGGGGGBBGGPGGBGPGGGGGGY~^^^~5BGGBGGGPGGGGBPGGBPPGGGPGP~     :G@@P^B@YJ@B#@@&&@? .\n .B@@@@@@@@@@@@@@@7        !GGGBGPPGGGGGGGGGGPGGGPGBGPPGGPGBP~^^^^^~5GGGGGPGGPGGY~YGGPGBBGGPGP^     :B&@P?&&&&@@@@@@@#: \n 7@@@@@@@@@@@@@@@Y        ~GGGBBGPPGGGBGGGPGP^5GGGBBGGGPGGGG!^^^^^^^^~?J7GGGBG?~^^^5GGPJ!JGGBY.      !&&@&&&&@@@@@@@@@J \n G@@@@@@@@@@@@@@#:       :PGGGBBGGGGGGBGGPGB7:?BGBG7!?7!PGBJ^^^^^^^^^^^^^PBG5!:^^^~5BBPG###GY:        P@&@@@@@@@@@@@@@B.\n^&@@@@@@@@@@@@@@J        :GGPGGBBGGBB##BGGGP^7YGBG7^^^::JGG~^^^^^^^^^^^^^?PY7?YPG#&&##&#BG7:          ~&@&@@@@@@@@@@@@&~\n7@@@@@@@@@@@@@@&^         YBGGG##BGB#&&#G5BY^5#BGBBYJPBGG#BJ?7!!~^^^^^^^^Y###B&&###BGJ~~^^.            G@&&@@@@@@@@@@@@J\nJ@@@@@@@@@@@@@@G.         .YGGGB##BB#&&&5^!!^^^^~~~~~!?JJJY5PPPPG5!^^^^^^~!~~P@#5#&#@@5~~~:            J@@@@@@@@@@@@@@@5\nP@@@@@@@@@@@@@@5           .5GGG#&#B#&#&P^^^^^^^^^~!7?JYPPJ^:^^^~~^^^^^^~~~~G@@#YB&#&&@P~~:            7@@@@@@@@@@@@@@@P\nPGYYY55YYYY5YYPY            5#GGB&&&&&&&#!^^^^^^Y#&#5?#@@@@#?^^^^^^^^^^^~~~?@##&&5#&#G#Y~^.            ~BYYYYYYYYYYYYYP5\nJ^            :7            J#GGB&&###B&&P^^^^!B@&&@B5&&#@@@@G!^^^^^^^^^~~~7@GB&###&GB7!~^             !7             :J\n?!            .?.           Y#GGG#J!~~~J#&!^~5@#B&P&@@@G#@@#P@B^^^^^^^^^~~~~BBP###&5BY^~~7:            ?~             ~J\n!?             J:           P#GGG?^^^^^^!5?^!?J7.GB5#@@@@@@#P&P^^^^^^^^^~~~^?&BGPPGBP~~~~55:           Y:             77\n:Y.            77           Y#GGP~^^^^^^^^^^^^^~:.P#PPB#B#5Y@@5^^^^^^^^~~~~~~5P5Y5GG!~~^?PPP~         ^Y             .Y^\n J~            :5.          5BGGG?^^^^^^^^~~~^^^^^:75BGPPG#&@@Y^^^^^^^^^:^~~~~~~~~~~~~~!5PPPP~        J~             ^Y \n ~J             !!          YGGGGG?~~~~^^^^~~~^^^^^^7GG55J????!^^^^^^^^^^^^~~~~~~~~~~~~YPGPPP5:      ^Y.             ?! \n..J^            .?^        7GGPGGGGPPP5YY?7~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^~^~~~~~~~~~75PPGP5557     .Y:             ^Y. \n..^J.            :J:     :?GGGBGPGGGGGGGGGGPJ!~~~~^^^^^^^^^^^^^^^^^YPGGBB#5^~~~~~~~7YPPPPG! ...     J~             .Y^  \n . 77             ^J:  ^J5GGP7JGPPGGGGGGGGGGGG5?!~~~^^^^^^^^^^^^^^^?5YYJ??~~~~~~!?5PPPPPPGY:       ?!              7? . \n  ..?!             :Y: ...::. .PGPGGGGGGGGGGGGGBP~::^^~~^^~^^^^^~^^^^^^^^^~~~!7JPGGGPPGGGGGPJ!   .J! .            ~J.   \n   ..Y~             ^J:        ?GPGGGGGPGGY5GGGB7    ..::^^^~~~~~~~~~~~~!7JYPGGGG5J7PGJ^^?5Y!.  ^J~              ~Y.    \n.  . .Y!         .:^::7!       ^GG?5GBBPGG: :!YGY.         .!!!!!!!!^..:~~~!!~~~:.  ~^    .    !?:              ~Y.     \n.  .  .J!      :?Y?!!??!7^     .57 ?5J5GGY.    ^?!       ..^!!!!!!!!^                        .~~               !J.  .   \n        ??.   :P!.    Y? !7^    .  .. ^Y!            :!?7!!!!!!!!!~~~^~.                   :!~.^???:..       .?J.       \n     .   ~J^  .5!...  !^!~:!7^.                  .^?P#&B5?!~~~~~~~~!?P#GJ^               :??: !Y: .~YY?:    :J!         \n.         :?!. .7??~ .7Y?:  .!?!:              ^JG#&######BP5YJJY5PB####&#P?^         .~7!:.: JY   ~..G!   !J^          \n            !J~     ^5?:   :7~.^!!^.         ^5#&&########&&&&&&&&&########&#P~    .^!7^   :Y?:?Y7~^!J!  ^J!. .         \n             .7?^   ?Y.  ^JY!^YJ7!~!!~:.    ^#&######&B###&&&&&&&##############J:~!!~. 7Y7~^:7Y!.~~~^. :??:             \n               :7?^  !J7?J!.7B7 .~Y~.^!7!~^^B&&##B###GGBBBGGGGGPGPPPPGPPG&###BGY!~^ :Y::5P77??Y#Y.   :??^               \n                 :7?~  .. :YJ~?5!!P!.5?!!!~7YPB####&&GGGGGGGGGGGBBBB#BGBGPY7!^   .J! !P! ~Y7. .:: .~??^   ..  .         \n                   .!?!:  ^~   P?:..GJ..:JY  777??JY55P5G55P5YPPP55YJ7!!!!!~.Y~ .^7#7 :5? .7!   :!?!:  .                \n                     .^77~.    Y~ .5J!JY7Y? J5^^!7^ ~?. ..:::^^~~^   :7!55.. ^GY7!^^P! .?~   :~77^.  .  .  .            \n                        .~!7~:....7?  .G7. :BJ7!~. .PGY. ^G!!!G?^:      .P~   ~G~   :?.  .:~77~:  ...                   \n                     .     .^!77~:.    7J  5J..:^: ^G.?Y 7Y   Y?         ~G:   ~?.    :~!7!~.   .  .                    \n                              .:~!7!~^:.. .7777!~  75  ?5P!   75         .7~     :^~77!~:.     ..                       \n                           .       .^~!77!~:...::  ^:   7P.   :J.        ..:^~!77!~^:.   . ..  .          .             \n                         ..  .   .     ..:^~!!!7!!~~~^^::::::::::^^~~!!7!7!!~^:..   ..... .  .            .             \n                                  .            ...::^^^^~~^^^^~~^^^^:::..                                               \n                              ..::.:...         ....                ...              .....                              \n                            ..:^^^!~^^:...  ..:::^^:^^^^::::::::^^^^^::^:::..   ..::::^::^:::..                         \n                          .::^~!.GG#:~~^^::::^~7!7J?JJ?7!~^!!!?JJJJJJ??77~^^^:::^^^~77JJJ?7~:^^..                       \n                        .:^^~7JY5BPBP5YJ7~~^!:YBGGGGGGGGGG5!.GGGGGGGGGGGGGY^~7!~~J5PBGGGGGGGY~^~:.                      \n                       .:^^7GBGGGBPBGGBG&^~!!^#PPPPPPPPPPPGB!BGPPPPPGPPPPPGB^!!5GGGPPPPPPPPPGB^:~:.                     \n                       .^~:BGPB5.BG#^^7?7^~!!^#BGGGGBBGGGGP#JP#GGGGGBGGPGGG#~.BGGGGGGGBBGGGGPGG.~^..                    \n                      ..^~.#GGBP!BB#:.77!!~!~J#GGGG##BBGGGBG.GBGGGG#PGBGGGGB~GBGGGG#P7~J#GGGGG&~~^..                    \n                       .:~^!GBBBBBGBG5JJ~~??:BBGGGGBBGGGB#? ^&GBGGG##BGGG#G^P#GGGB#!^?:J#GGGGBG:!^..                    \n                        .:~^~7?J5#BB#BB##J^~!&BBBB#BBBBBB#P.!&BBBBBBBBBB&7::#BBBB&7^57~#BBBBB&~.~:.                     \n                        .:^^~77!.B#&!Y&##&^ P######7##B###&~J&BB##&#####&J.^&###B&?~7J####B#&7.~^..                     \n                       .:^:JY?!7.B&&:?&#&@^.#&####&#####&&P.B&###&J5&&###&! G&####&B#&&##&&G~:~^..                      \n                       .:^.&@@&BB&&&&&&&&Y ^@&&&&&&&&&&&#Y^:&&&&&#::5@&&&&#.:G&&&&&&&&&&&G7:^~:..                       \n                       .:^^!Y5GBB&@&BGY?~!^~BBB#BGBBGPY7~~?~G##BB!^?:5@&&&&~!~?PB####BPY!^^^:..                         \n                        ..:^^^^^.B@&::^^~~~~^^^~~^^:::^^^^^^:^^^:^~~~^!!~~^:!!~^:^:^^^^^^::..                           \n                           ..:^~:P&B.^~:.....:::::::::.......::::....:::::::...:::::::...                               \n                             ..:^^^^::..                                                                                                                                      \n\n🎉 Meme coins are a PvP casino. The idea is simple: you buy a meme coin, and then you dump it on someone else for a profit. 🎲\n\n💥 But we don't want Radbros to get their ETH stack rekt by other bros. That's why we're introducing $BRO! 😎\n\n💪 $BRO enables fun, good-spirited competition to see who can bro out their $RAD stack. 🚀 Those without $RAD will need ETH to buy $RAD and join the $BRO PvP! 🥊\n\n🌟 The net effect of $BRO? Elevating the $RAD ecosystem by increasing demand for $RAD! 📈 Let's send it together, Radbros! 🌱\n\n⚠️ Trading restricted to Milady/Remilio/Radbro/SchizoPoster holders for the first 5 min of pool launch to prevent botting. 🤖 Stay alert! 🚨\n\nTokenomics: 📊\n\n- 1 Billion Total $BRO 💰\n- Trading Pair: $RAD/$BRO 🤝\n- No Tax 🚫\n- Liquidity Locked 🔒\n- RADBRO Anti-Botting Technology 🛡️\n- 20% Presale 🎁\n- 10% Team 🏆\n- 70% LP 🔄\n\nTips from the Radbro Devs: 📝\n\n- Don't invest more than you can afford to lose. 💸\n- HAVE FUN! 😃🎉\n\nWebsite: https://radbro.xyz\nTwitter: https://twitter.com/radbro_webring\nTelegram: https://t.me/bromafiabro\n*/\npragma solidity ^0.8.0;\n\nimport { ERC20 } from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { IERC721 } from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport { MerkleProofLib } from \"lib/solmate/src/utils/MerkleProofLib.sol\";\n\n/// @notice ERC20 token for the $BRO pvp coin\ncontract BroCoin is Ownable, ERC20 {\n    bool public publicTradingStarted;\n    IERC721[] public whitelistedCollections;\n    mapping(address => bool) public blacklists;\n\n    constructor() ERC20(\"BroCoin\", \"BRO\") {\n        _mint(msg.sender, 1000000000 * 10 ** 18); // 1,000,000,000 BRO\n        // whitelist collections\n        whitelistedCollections = [\n            IERC721(0x5Af0D9827E0c53E4799BB226655A1de152A425a5), // Milady\n            IERC721(0xD3D9ddd0CF0A5F0BFB8f7fcEAe075DF687eAEBaB), // Remilio\n            IERC721(0xABCDB5710B88f456fED1e99025379e2969F29610), // Radbro\n            IERC721(0xBfE47D6D4090940D1c7a0066B63d23875E3e2Ac5) // SchizoPoster\n        ];\n    }\n\n    function blacklist(address _address, bool _isBlacklisting) external onlyOwner {\n        blacklists[_address] = _isBlacklisting;\n    }\n\n    function setPublicTradingStarted(bool _publicTradingStarted) external onlyOwner {\n        publicTradingStarted = _publicTradingStarted;\n    }\n\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\n        require(!blacklists[to] && !blacklists[from], \"Blacklisted\");\n        require(publicTradingStarted || _whitelistedForTrading(from, to), \"Trading is not started\");\n    }\n\n    function burn(uint256 value) external {\n        _burn(msg.sender, value);\n    }\n\n    function _whitelistedForTrading(address from, address to) internal view returns (bool) {\n        // always true for owner\n        if (from == owner() || to == owner()) {\n            return true;\n        }\n        // always true if balanceOf from or to is >1 for whitelisted collections\n        for (uint256 i = 0; i < whitelistedCollections.length; i++) {\n            if (whitelistedCollections[i].balanceOf(from) > 0 || whitelistedCollections[i].balanceOf(to) > 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n"
    },
    "lib/solmate/src/utils/MerkleProofLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\n/// @notice Gas optimized merkle proof verification library.\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/MerkleProofLib.sol)\n/// @author Modified from Solady (https://github.com/Vectorized/solady/blob/main/src/utils/MerkleProofLib.sol)\nlibrary MerkleProofLib {\n    function verify(\n        bytes32[] calldata proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool isValid) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            if proof.length {\n                // Left shifting by 5 is like multiplying by 32.\n                let end := add(proof.offset, shl(5, proof.length))\n\n                // Initialize offset to the offset of the proof in calldata.\n                let offset := proof.offset\n\n                // Iterate over proof elements to compute root hash.\n                // prettier-ignore\n                for {} 1 {} {\n                    // Slot where the leaf should be put in scratch space. If\n                    // leaf > calldataload(offset): slot 32, otherwise: slot 0.\n                    let leafSlot := shl(5, gt(leaf, calldataload(offset)))\n\n                    // Store elements to hash contiguously in scratch space.\n                    // The xor puts calldataload(offset) in whichever slot leaf\n                    // is not occupying, so 0 if leafSlot is 32, and 32 otherwise.\n                    mstore(leafSlot, leaf)\n                    mstore(xor(leafSlot, 32), calldataload(offset))\n\n                    // Reuse leaf to store the hash to reduce stack operations.\n                    leaf := keccak256(0, 64) // Hash both slots of scratch space.\n\n                    offset := add(offset, 32) // Shift 1 word per cycle.\n\n                    // prettier-ignore\n                    if iszero(lt(offset, end)) { break }\n                }\n            }\n\n            isValid := eq(leaf, root) // The proof is valid if the roots match.\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "metadata": {
      "bytecodeHash": "none"
    },
    "optimizer": {
      "enabled": true,
      "runs": 800
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}