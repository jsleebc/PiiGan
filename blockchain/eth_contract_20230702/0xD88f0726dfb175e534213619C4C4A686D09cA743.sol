{{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/TheWatchmakerToken.sol": {
      "content": "///////////////////////////////////////////////////////////////\r\n// KYL // THE WATCHMAKER TOKEN // TWMT ERC-20 TOKEN // 2023 //\r\n/////////////////////////////////////////////////////////////\r\n// producer: KYL WATCHES LTD // Instagram: @kylwatchesltd //\r\n///////////////////////////////////////////////////////////\r\n///////////////////////////////////////////////////////////////////////////////\r\n//////////////////////////////////////////////////////////////////////////////\r\n//    ___  _______  __  _______   _______  ___  __   __  _______          ///\r\n//   |   ||       ||  ||       | |       ||   ||  |_|  ||       |        ///\r\n//   |   ||_     _||__||  _____| |_     _||   ||       ||    ___|       ///\r\n//   |   |  |   |      | |_____    |   |  |   ||       ||   |___       ///\r\n//   |   |  |   |      |_____  |   |   |  |   ||       ||    ___|     ///\r\n//   |   |  |   |       _____| |   |   |  |   || ||_|| ||   |___     ///\r\n//   |___|  |___|      |_______|   |___|  |___||_|   |_||_______|   ///\r\n//                                                                 ///\r\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//                                                                                                                  ///\r\n//                                                                                 ./%@@@@@@@#,                    ///\r\n//                                           .*(%&@@@@&&%%%##%%%&&@@@@%#*.    ,#@@&#/*,,.....,#@&,                ///\r\n//                                     *%&@@&(*,.......................,*#@@@@#*******,%@@@@@@@@@@(              ///\r\n//                                ,&@@&*.................................... (@@#,******,,,*/#@@@#              ///\r\n//                            ,%@@#,............................................%@%*****/(//*,,..&&.           ///\r\n//                         ,&@%*.,,,.............................................,%@#****//((#&@@@%.          ///\r\n//                       (@&*,,,,,,,,..............................................,@&******,.../@&.         ///\r\n//                     /@@,,,,,,,,,,,,...............................................%@(,/%#/,,..,%@,       ///\r\n//      .*%@@@@&&&&%%%@@/,,,,,,,,,,,,,,,..............................................#@#,**#@@/,.*@@.     ///\r\n//    (@@(,.........,&@*.,,,,,,,,,,,,,,,,............................(@(.............. (@(,**,&@,.,%@*    ///\r\n//  .&@/..,/%&(.....#@/.,,,,,,,,,,,,,,,,,,.....................,(%@&/,..................#@(,**(@&.,%@*   ///\r\n//  #@#&@@@@%,......&&,,,,,,,,,,,,,,,,,,,,,,.......... .*#@@@&(. ...............  .......&@/**(@@&*&@.  ///\r\n// .#&(#@&,.../&#*,*@#.,,,,,,,,,,,,,,,,,,,,,,,*/#&@@&%(*..................,/%@@@@@(*.....,@&*,#@*/@&,  ///\r\n//    %@*.,(@@#*,,.*@#.,,,,,,,,,.%&&&@@@&%%#/*,,......................*&@&#*...,@&#@&,..../@#*@%      ///\r\n//    (@&@@%*******/@#.,,,,,,,,,,,,,,,,,,,,,,,,,....................#@&*.#@@@&/..,&@*......%@@&.      ///\r\n//       @&****,(@@*&&.,,,,,,,,,,,,,,,,,,,,,,,,,,..................%@*.,&@@@@@@@@@@@@%* ...(@/        ///\r\n//      .@&****@@/,.#@*.,,,,,,,,,,,,,,,,,,,,,,,,,,..............*@@%*(@@@@@@@@&&&&&@@@@@@&*,&@,       ///\r\n//       %@/**/@@*,./@%.,,,,/%&@@@@&%%%&&@@&/,,.,,..............&&(@@@@@%@@####%##(((((%@@@@@@%.      ///\r\n//        &@**,#@#,.,%@*.,,*%@@%************#@@@@#,............,&@@@@#(#&@@@&%###%@@@@#(((&@@@@(      ///\r\n//        .%@#,/@@%,*(@%,,,%@@/,**,,/%@@@@@@@@@&#&@#.......... #@@@#(%@@%*/%@@@@@@&(/#@@%((#@@@@.     ///\r\n//          ,@&/@&&@#*%@(,,,./@&&@@@@@@@&&@&&&@@@@@@@(......../@@@((&@&/%@@@@@@@*     *%@&(((@@@&     ///\r\n//            .((. .%@&@@*,,,#@@@@#/%*,,,*@(.,,,#/*%@@@&,.....%@@%(%@@/&@@@@@@@@(.  ,%&/&@%((&@@@*    ///\r\n//                    .(@@*/@@@&,,,,,&#.,,(*..*@/.,,,*@@@#....(@@&(%@&/@@@@@@@@@@@@@@@@/&@#((@@@@%    ///\r\n//                      *@@@@@#%@%,.,,,,,,,,,,,,.. /@@/@@@%%@@@@@@%(&@%%@@@@@@@@@@@@@@/&@&((&@@@@&    ///\r\n//                       #@@@(.,,.,,,,.,,,*(%&%/, .    ,@@@&#/,.#@@&(&@@#&@@@@@@@@@@#%@@#((@@@&/@&    ///\r\n//                       %@@&.***,*##(*.&@@@@&,    ,,,,,@@@,.....*@@@&(#@@@&&&%%&&@@@&((#@@@@/.(@(    ///\r\n//                       &@@@.          #@/*. ..       *@@&........,%@@@&#(((####(((#&@@@@&*..,&@.    ///\r\n//                       (@@@*    (,   @%         #,   %@@(............%@@@@@@@@@@@@@@@#......(@/     ///\r\n//                        #@@@((#,    (,            (&@@@#,...........*#&@%,,*//**............@%      ///\r\n//                         *@@@@(   ,&*  .&*   %(  .#@@@&%*...............#@/./#&@@@&&@@@&%/,%@*      ///\r\n//                           .&@@@@&%,   .@/   .#@@@@@#@@,,,.............,%@@%/,...%@%/...,*(%@@@&#*  ///\r\n//                             /@@@@@@@@@@@@@@@@@@&*.,#@*.,,............(@%.,,&@/...../&@@@(.,#@@@(   ///\r\n//                               /@&*..,*****,..,*(#%&&@@@&(*.........(@@*.....*&@#...,#@@(&@%,       ///\r\n//                                 /@@/.,,,,*%@@%(/,...,,.,*#&@@@@@@@&(,.........*&@&&&/../@(         ///\r\n//                                   ,&@%,(@@(,#@#,*,&@/*,**,................,(&@@(......,@&.         ///\r\n//                                      %@@*,(@&/**,#@#*****,..,,,.*,.....#@@&* .........&@*         ////\r\n//                                   .%@%**/@@%//**#@@%(*********//((#&@@%*..*,.........#@(         /////\r\n//                                .@@@@@@@@&%@@#(#(,.,/%%%%###((/**,.....,(@%,....... (@/          //////\r\n//                                             *@@(,,,,,,,,,,,,,(@&&&&@@@#/...........%@/         ///////\r\n//                                                %@@,.,,,,,,,,,,,,,,,,,........... /@@.         ////////\r\n//                                                  *&@%,,,,,,,,,,,,,,.........,/&@@#.          /////////\r\n//                                                     ,%@&(,........,,*/#%@@@%(,              //////////\r\n//                                                         *%@@@@@@@&%(*,.                    ///////////\r\n//                                                                                           ////////////\r\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//                                                                                                                       ////////\r\n//  ████████╗██╗  ██╗███████╗    ██╗    ██╗ █████╗ ████████╗ ██████╗██╗  ██╗███╗   ███╗ █████╗ ██╗  ██╗███████╗██████╗       ///\r\n//  ╚══██╔══╝██║  ██║██╔════╝    ██║    ██║██╔══██╗╚══██╔══╝██╔════╝██║  ██║████╗ ████║██╔══██╗██║ ██╔╝██╔════╝██╔══██╗     ///\r\n//     ██║   ███████║█████╗      ██║ █╗ ██║███████║   ██║   ██║     ███████║██╔████╔██║███████║█████╔╝ █████╗  ██████╔╝    ///\r\n//     ██║   ██╔══██║██╔══╝      ██║███╗██║██╔══██║   ██║   ██║     ██╔══██║██║╚██╔╝██║██╔══██║██╔═██╗ ██╔══╝  ██╔══██╗   ///\r\n//     ██║   ██║  ██║███████╗    ╚███╔███╔╝██║  ██║   ██║   ╚██████╗██║  ██║██║ ╚═╝ ██║██║  ██║██║  ██╗███████╗██║  ██║  ///\r\n//     ╚═╝   ╚═╝  ╚═╝╚══════╝     ╚══╝╚══╝ ╚═╝  ╚═╝   ╚═╝    ╚═════╝╚═╝  ╚═╝╚═╝     ╚═╝╚═╝  ╚═╝╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝ ///\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.7;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\n\r\n/**\r\n * @dev Interface for checking active staked balance of a user.\r\n */\r\ninterface ITWMTSource {\r\n    function getAccumulatedAmount(\r\n        address staker\r\n    ) external view returns (uint256);\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n */\r\ncontract TheWatchmakerToken is ERC20, Ownable, ReentrancyGuard {\r\n    ITWMTSource public TWMTSource;\r\n\r\n    uint256 public constant MAX_TAX_VALUE = 100;\r\n\r\n    uint256 public spendTaxAmount;\r\n    uint256 public withdrawTaxAmount;\r\n\r\n    uint256 public bribesDistributed;\r\n    uint256 public activeTaxCollectedAmount;\r\n\r\n    bool public withdrawTaxCollectionStopped;\r\n    bool public spendTaxCollectionStopped;\r\n\r\n    bool public isPaused;\r\n    bool public isDepositPaused;\r\n    bool public isWithdrawPaused;\r\n    bool public isTransferPaused;\r\n\r\n    mapping(address => bool) private _isAuthorised;\r\n    address[] public authorisedLog;\r\n\r\n    mapping(address => uint256) public depositedAmount;\r\n    mapping(address => uint256) public spentAmount;\r\n\r\n    modifier onlyAuthorised() {\r\n        require(_isAuthorised[_msgSender()], \"Not Authorised\");\r\n        _;\r\n    }\r\n\r\n    modifier whenNotPaused() {\r\n        require(!isPaused, \"Transfers paused!\");\r\n        _;\r\n    }\r\n\r\n    event Withdraw(address indexed userAddress, uint256 amount, uint256 tax);\r\n    event Deposit(address indexed userAddress, uint256 amount);\r\n    event DepositFor(\r\n        address indexed caller,\r\n        address indexed userAddress,\r\n        uint256 amount\r\n    );\r\n    event Spend(\r\n        address indexed caller,\r\n        address indexed userAddress,\r\n        uint256 amount,\r\n        uint256 tax\r\n    );\r\n    event ClaimTax(\r\n        address indexed caller,\r\n        address indexed userAddress,\r\n        uint256 amount\r\n    );\r\n    event InternalTransfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 amount\r\n    );\r\n\r\n    constructor(address _source) ERC20(\"The Watchmaker Token\", \"TWMT\") {\r\n        _isAuthorised[_msgSender()] = true;\r\n        isPaused = true;\r\n        isTransferPaused = true;\r\n\r\n        withdrawTaxAmount = 25;\r\n        spendTaxAmount = 25;\r\n\r\n        TWMTSource = ITWMTSource(_source);\r\n\r\n        uint256 initialSupply = 250e6 * 1e18; //initial supply is 250M\r\n        _mint(_msgSender(), initialSupply);\r\n    }\r\n\r\n    /**\r\n     * @dev Returnes current spendable balance of a specific user. This balance can be spent by user for other collections without\r\n     *      withdrawal to ERC-20 TWMT OR can be withdrawn to ERC-20 TWMT.\r\n     */\r\n    function getUserBalance(address user) public view returns (uint256) {\r\n        return (TWMTSource.getAccumulatedAmount(user) +\r\n            depositedAmount[user] -\r\n            spentAmount[user]);\r\n    }\r\n\r\n    /**\r\n     * @dev Function to deposit ERC-20 TWMT to the game balance.\r\n     */\r\n    function depositTWMT(uint256 amount) public nonReentrant whenNotPaused {\r\n        require(!isDepositPaused, \"Deposit Paused\");\r\n        require(balanceOf(_msgSender()) >= amount, \"Insufficient balance\");\r\n\r\n        _burn(_msgSender(), amount);\r\n        depositedAmount[_msgSender()] += amount;\r\n\r\n        emit Deposit(_msgSender(), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Function to withdraw game TWMT to ERC-20 TWMT.\r\n     */\r\n    function withdrawTWMT(uint256 amount) public nonReentrant whenNotPaused {\r\n        require(!isWithdrawPaused, \"Withdraw Paused\");\r\n        require(getUserBalance(_msgSender()) >= amount, \"Insufficient balance\");\r\n        uint256 tax = withdrawTaxCollectionStopped\r\n            ? 0\r\n            : (amount * withdrawTaxAmount) / 100;\r\n\r\n        spentAmount[_msgSender()] += amount;\r\n        activeTaxCollectedAmount += tax;\r\n        _mint(_msgSender(), (amount - tax));\r\n\r\n        emit Withdraw(_msgSender(), amount, tax);\r\n    }\r\n\r\n    /**\r\n     * @dev Function to transfer game TWMT from one account to another.\r\n     */\r\n    function transferTWMT(\r\n        address to,\r\n        uint256 amount\r\n    ) public nonReentrant whenNotPaused {\r\n        require(!isTransferPaused, \"Transfer Paused\");\r\n        require(getUserBalance(_msgSender()) >= amount, \"Insufficient balance\");\r\n\r\n        spentAmount[_msgSender()] += amount;\r\n        depositedAmount[to] += amount;\r\n\r\n        emit InternalTransfer(_msgSender(), to, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Function to spend user balance. Can be called by other authorised contracts. To be used for internal purchases of other NFTs, etc.\r\n     */\r\n    function spendTWMT(\r\n        address user,\r\n        uint256 amount\r\n    ) external onlyAuthorised nonReentrant {\r\n        require(getUserBalance(user) >= amount, \"Insufficient balance\");\r\n        uint256 tax = spendTaxCollectionStopped\r\n            ? 0\r\n            : (amount * spendTaxAmount) / 100;\r\n\r\n        spentAmount[user] += amount;\r\n        activeTaxCollectedAmount += tax;\r\n\r\n        emit Spend(_msgSender(), user, amount, tax);\r\n    }\r\n\r\n    /**\r\n     * @dev Function to deposit tokens to a user balance. Can be only called by an authorised contracts.\r\n     */\r\n    function depositTWMTFor(\r\n        address user,\r\n        uint256 amount\r\n    ) public onlyAuthorised nonReentrant {\r\n        _depositTWMTFor(user, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Function to tokens to the user balances. Can be only called by an authorised users.\r\n     */\r\n    function distributeTWMT(\r\n        address[] memory user,\r\n        uint256[] memory amount\r\n    ) public onlyAuthorised nonReentrant {\r\n        require(user.length == amount.length, \"Wrong arrays passed\");\r\n\r\n        for (uint256 i; i < user.length; i++) {\r\n            _depositTWMTFor(user[i], amount[i]);\r\n        }\r\n    }\r\n\r\n    function _depositTWMTFor(address user, uint256 amount) internal {\r\n        require(user != address(0), \"Deposit to 0 address\");\r\n        depositedAmount[user] += amount;\r\n\r\n        emit DepositFor(_msgSender(), user, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Function to mint tokens to a user balance. Can be only called by an authorised contracts.\r\n     */\r\n    function mintFor(\r\n        address user,\r\n        uint256 amount\r\n    ) external onlyAuthorised nonReentrant {\r\n        _mint(user, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Function to burn tokens to a user balance.\r\n     */\r\n    function burn(\r\n        uint256 amount\r\n    ) external {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Function to claim tokens from the tax accumulated pot. Can be only called by an authorised contracts.\r\n     */\r\n    function claimTWMTTax(\r\n        address user,\r\n        uint256 amount\r\n    ) public onlyAuthorised nonReentrant {\r\n        require(activeTaxCollectedAmount >= amount, \"Insufficiend tax balance\");\r\n\r\n        activeTaxCollectedAmount -= amount;\r\n        depositedAmount[user] += amount;\r\n        bribesDistributed += amount;\r\n\r\n        emit ClaimTax(_msgSender(), user, amount);\r\n    }\r\n\r\n    /*\r\n      ADMIN FUNCTIONS\r\n    */\r\n\r\n    /**\r\n     * @dev Function allows admin add authorised address. The function also logs what addresses were authorised for transparancy.\r\n     */\r\n    function authorise(address addressToAuth) public onlyOwner {\r\n        _isAuthorised[addressToAuth] = true;\r\n        authorisedLog.push(addressToAuth);\r\n    }\r\n\r\n    /**\r\n     * @dev Function allows admin add unauthorised address.\r\n     */\r\n    function unauthorise(address addressToUnAuth) public onlyOwner {\r\n        _isAuthorised[addressToUnAuth] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Function allows admin update the address of staking address.\r\n     */\r\n    function changeTWMTSourceContract(address _source) public onlyOwner {\r\n        TWMTSource = ITWMTSource(_source);\r\n        authorise(_source);\r\n    }\r\n\r\n    /**\r\n     * @dev Function allows admin to update limmit of tax on withdraw.\r\n     */\r\n    function updateWithdrawTaxAmount(uint256 _taxAmount) public onlyOwner {\r\n        require(_taxAmount < MAX_TAX_VALUE, \"Wrong value passed\");\r\n        withdrawTaxAmount = _taxAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev Function allows admin to update tax amount on spend.\r\n     */\r\n    function updateSpendTaxAmount(uint256 _taxAmount) public onlyOwner {\r\n        require(_taxAmount < MAX_TAX_VALUE, \"Wrong value passed\");\r\n        spendTaxAmount = _taxAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev Function allows admin to stop tax collection on withdraw.\r\n     */\r\n    function stopTaxCollectionOnWithdraw(bool _stop) public onlyOwner {\r\n        withdrawTaxCollectionStopped = _stop;\r\n    }\r\n\r\n    /**\r\n     * @dev Function allows admin to stop tax collection on spend.\r\n     */\r\n    function stopTaxCollectionOnSpend(bool _stop) public onlyOwner {\r\n        spendTaxCollectionStopped = _stop;\r\n    }\r\n\r\n    /**\r\n     * @dev Function allows admin to pause all in game TWMT transfactions.\r\n     */\r\n    function pauseGameTWMT(bool _pause) public onlyOwner {\r\n        isPaused = _pause;\r\n    }\r\n\r\n    /**\r\n     * @dev Function allows admin to pause in game TWMT transfers.\r\n     */\r\n    function pauseTransfers(bool _pause) public onlyOwner {\r\n        isTransferPaused = _pause;\r\n    }\r\n\r\n    /**\r\n     * @dev Function allows admin to pause in game TWMT withdraw.\r\n     */\r\n    function pauseWithdraw(bool _pause) public onlyOwner {\r\n        isWithdrawPaused = _pause;\r\n    }\r\n\r\n    /**\r\n     * @dev Function allows admin to pause in game TWMT deposit.\r\n     */\r\n    function pauseDeposits(bool _pause) public onlyOwner {\r\n        isDepositPaused = _pause;\r\n    }\r\n\r\n    /**\r\n     * @dev Function allows admin to withdraw ETH accidentally dropped to the contract.\r\n     */\r\n    function rescue() external onlyOwner {\r\n        payable(owner()).transfer(address(this).balance);\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 500
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}