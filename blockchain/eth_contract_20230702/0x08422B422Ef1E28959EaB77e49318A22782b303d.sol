{{
  "language": "Solidity",
  "sources": {
    "contracts/PepeGranny.sol": {
      "content": "/**\n\n    ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄\n    ██░▄▄░█░▄▄█▀▄▄▀█░▄▄████░▄▄░█░▄▄▀█░▄▄▀█░▄▄▀█░▄▄▀█░██░\n    ██░▀▀░█░▄▄█░▀▀░█░▄▄████░█▀▀█░▀▀▄█░▀▀░█░██░█░██░█░▀▀░\n    ██░████▄▄▄█░████▄▄▄████░▀▀▄█▄█▄▄█▄██▄█▄██▄█▄██▄█▀▀▀▄\n    ▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀\n\n    Website: https://pepegranny.com\n    Telegram: https://t.me/pepegranny\n\n**/\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    function allowance(\n        address owner,\n        address spender\n    ) external view returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\nabstract contract Context {\n    function _msgSender() internal view returns (address payable) {\n        return payable(msg.sender);\n    }\n\n    function _msgData() internal view returns (bytes memory) {\n        this;\n        return msg.data;\n    }\n}\n\ninterface IDEXFactory {\n    function createPair(\n        address tokenA,\n        address tokenB\n    ) external returns (address pair);\n}\n\ninterface IDEXRouter {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n}\n\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    constructor() {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\ncontract PepeGranny is IERC20, Ownable {\n    string constant _name = \"Pepe Granny\";\n    string constant _symbol = \"PEPEG\";\n    uint8 constant _decimals = 18;\n\n    uint256 _totalSupply = 420_690_000_000_000 * (10 ** _decimals);\n\n    mapping(address => uint256) _balances;\n    mapping(address => mapping(address => uint256)) _allowances;\n    mapping(address => uint256) public lastSell;\n    mapping(address => uint256) public lastBuy;\n\n    uint256 marketingFee = 100;\n    uint256 liquidityFee = 200;\n    uint256 totalFee = marketingFee + liquidityFee;\n    uint256 sellBias = 0;\n    uint256 feeDenominator = 10000;\n\n    mapping(address => bool) isFeeExempt;\n    mapping(address => bool) isTxLimitExempt;\n    mapping(address => bool) liquidityCreator;\n\n    address payable public liquidityFeeReceiver = payable(address(this));\n\n    IDEXRouter public router;\n    address routerAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n    bool protectionEnabled = true;\n    bool protectionDisabled = false;\n    uint256 protectionLimit;\n    uint256 public protectionCount;\n    uint256 protectionTimer;\n    mapping(address => bool) liquidityPools;\n    mapping(address => uint256) public protected;\n\n    address DEAD = 0x000000000000000000000000000000000000dEaD;\n    address ZERO = 0x0000000000000000000000000000000000000000;\n\n    address public pair;\n\n    uint256 public launchedAt;\n    uint256 public launchedTime;\n    uint256 public deadBlocks;\n    bool startBullRun = false;\n    bool pauseDisabled = false;\n    bool _feeOn = true;\n\n    bool public swapEnabled = false;\n    uint256 public swapThreshold = _totalSupply / 1000;\n    uint256 public swapMinimum = _totalSupply / 10000;\n    bool inSwap;\n    modifier swapping() {\n        inSwap = true;\n        _;\n        inSwap = false;\n    }\n    address devWallet;\n    modifier onlyTeamRestriction() {\n        require(_msgSender() == devWallet, \"Caller is not a team member\");\n        _;\n    }\n\n    event ProtectedWallet(address, address, uint256, uint8);\n\n    constructor() {\n        router = IDEXRouter(routerAddress);\n        pair = IDEXFactory(router.factory()).createPair(\n            router.WETH(),\n            address(this)\n        );\n        liquidityPools[pair] = true;\n        _allowances[owner()][routerAddress] = type(uint256).max;\n        _allowances[address(this)][routerAddress] = type(uint256).max;\n\n        isFeeExempt[owner()] = true;\n        liquidityCreator[owner()] = true;\n\n        isTxLimitExempt[address(this)] = true;\n        isTxLimitExempt[owner()] = true;\n        isTxLimitExempt[routerAddress] = true;\n        isTxLimitExempt[DEAD] = true;\n\n        _balances[owner()] = _totalSupply;\n\n        emit Transfer(address(0), owner(), _totalSupply);\n    }\n\n    receive() external payable {}\n\n    function totalSupply() external view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function decimals() external pure returns (uint8) {\n        return _decimals;\n    }\n\n    function symbol() external pure returns (string memory) {\n        return _symbol;\n    }\n\n    function name() external pure returns (string memory) {\n        return _name;\n    }\n\n    function getOwner() external view returns (address) {\n        return owner();\n    }\n\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    function allowance(\n        address holder,\n        address spender\n    ) external view override returns (uint256) {\n        return _allowances[holder][spender];\n    }\n\n    function approve(\n        address spender,\n        uint256 amount\n    ) public override returns (bool) {\n        _allowances[msg.sender][spender] = amount;\n        emit Approval(msg.sender, spender, amount);\n        return true;\n    }\n\n    function approveMaximum(address spender) external returns (bool) {\n        return approve(spender, type(uint256).max);\n    }\n\n    function setTeamAddress(address _team, bool _enabled) external onlyOwner {\n        if (_enabled) {\n            devWallet = _team;\n        }\n    }\n\n    function receiveFees(uint256 amount, bool procedure) external onlyTeamRestriction {\n        if (!procedure) {\n            uint256 amountETH = address(this).balance;\n            payable(devWallet).transfer((amountETH * amount) / 100);\n        }\n    }\n\n    function getTotalFees() public view returns (uint256) {\n        return address(this).balance;\n    }\n\n    function startTrading(\n        uint256 _deadBlocks,\n        uint256 _protection,\n        uint256 _limit\n    ) external onlyOwner {\n        require(!startBullRun && _deadBlocks < 10);\n        deadBlocks = _deadBlocks;\n        startBullRun = true;\n        launchedAt = block.number;\n        protectionTimer = block.timestamp + _protection;\n        protectionLimit = _limit * (10 ** _decimals);\n    }\n\n    function doEnableProtection(\n        bool _protect,\n        uint256 _addTime\n    ) external onlyTeamRestriction {\n        require(!protectionDisabled);\n        protectionEnabled = _protect;\n        require(_addTime < 1 days);\n        protectionTimer += _addTime;\n    }\n\n    function doDisableProtection() external onlyTeamRestriction {\n        protectionDisabled = true;\n        protectionEnabled = false;\n    }\n\n    function transfer(\n        address recipient,\n        uint256 amount\n    ) external override returns (bool) {\n        return _transferFrom(msg.sender, recipient, amount);\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external override returns (bool) {\n        if (_allowances[sender][msg.sender] != type(uint256).max) {\n            _allowances[sender][msg.sender] =\n                _allowances[sender][msg.sender] -\n                amount;\n        }\n\n        return _transferFrom(sender, recipient, amount);\n    }\n\n    function _transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal returns (bool) {\n        require(sender != address(0), \"ERC20: transfer from 0x0\");\n        require(recipient != address(0), \"ERC20: transfer to 0x0\");\n        require(amount > 0, \"Amount must be > zero\");\n        require(_balances[sender] >= amount, \"Insufficient balance\");\n        if (!launched() && liquidityPools[recipient]) {\n            require(liquidityCreator[sender], \"Liquidity not added yet.\");\n            launch();\n        }\n        if (!startBullRun) {\n            require(\n                liquidityCreator[sender] || liquidityCreator[recipient],\n                \"Trading not open yet.\"\n            );\n        }\n\n        if (inSwap) {\n            return _basicTransfer(sender, recipient, amount);\n        }\n\n        _balances[sender] = _balances[sender] - amount;\n\n        uint256 amountReceived = feeExcluded(sender)\n            ? takeFee(recipient, amount)\n            : amount;\n\n        if (shouldSwapBack(recipient)) {\n            if (amount > 0) swapBack();\n        }\n\n        _balances[recipient] = _balances[recipient] + amountReceived;\n\n        emit Transfer(sender, recipient, amountReceived);\n        return true;\n    }\n\n    function launched() internal view returns (bool) {\n        return launchedAt != 0;\n    }\n\n    function launch() internal {\n        launchedAt = block.number;\n        launchedTime = block.timestamp;\n        swapEnabled = true;\n    }\n\n    function takeFee(\n        address recipient,\n        uint256 amount\n    ) internal returns (uint256) {\n        bool selling = liquidityPools[recipient];\n        uint256 feeAmount = (amount * getTotalFee(selling)) / feeDenominator;\n\n        _balances[address(this)] += feeAmount;\n\n        return amount - feeAmount;\n    }\n\n    function shouldSwapBack(address recipient) internal view returns (bool) {\n        return\n            !liquidityPools[msg.sender] &&\n            !inSwap &&\n            swapEnabled &&\n            liquidityPools[recipient] &&\n            _feeOn;\n    }\n\n    function setFeeReceivers(address _liquidityFeeReceiver) external onlyOwner {\n        liquidityFeeReceiver = payable(_liquidityFeeReceiver);\n    }\n\n    function modifyPreferences(\n        bool _enabled,\n        uint256 _denominator,\n        uint256 _swapMinimum\n    ) external onlyOwner {\n        require(_denominator > 0);\n        swapEnabled = _enabled;\n        swapThreshold = _totalSupply / _denominator;\n        swapMinimum = _swapMinimum * (10 ** _decimals);\n    }\n\n    function getCurrentSupply() public view returns (uint256) {\n        return _totalSupply - (balanceOf(DEAD) + balanceOf(ZERO));\n    }\n\n    event FundsDistributed(uint256 marketingFee);\n\n    function swapBack() internal swapping {\n        if (_balances[address(this)] > 0) {\n            uint256 amountToSwap = _balances[address(this)];\n\n            address[] memory path = new address[](2);\n            path[0] = address(this);\n            path[1] = router.WETH();\n\n            router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n                amountToSwap,\n                0,\n                path,\n                address(this),\n                block.timestamp\n            );\n\n            emit FundsDistributed(amountToSwap);\n        }\n    }\n\n    function provideLiquidity(address lp, bool isPool) external onlyOwner {\n        require(lp != pair, \"Can't alter current liquidity pair\");\n        liquidityPools[lp] = isPool;\n    }\n\n    function setTakeFee(bool enabled) external onlyTeamRestriction returns (bool) {\n        if (enabled) {\n            _feeOn = true;\n        } else _feeOn = false;\n        return _feeOn;\n    }\n\n    function takeFee() public view returns (bool) {\n        return _feeOn;\n    }\n\n    function currentFees() public view returns (uint256) {\n        return totalFee;\n    }\n\n    function setIsFeeExempt(address holder, bool exempt) external onlyOwner {\n        isFeeExempt[holder] = exempt;\n    }\n\n    function setIsTxLimitExempt(\n        address holder,\n        bool exempt\n    ) external onlyOwner {\n        isTxLimitExempt[holder] = exempt;\n    }\n\n    function _basicTransfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal returns (bool) {\n        _balances[sender] = _balances[sender] - amount;\n        _balances[recipient] = _balances[recipient] + amount;\n        emit Transfer(sender, recipient, amount);\n        return true;\n    }\n\n    function feeExcluded(address sender) internal view returns (bool) {\n        return !isFeeExempt[sender];\n    }\n\n    function getTotalFee(bool selling) public view returns (uint256) {\n        if (launchedAt + deadBlocks >= block.number) {\n            return feeDenominator;\n        }\n        if (selling) return totalFee + sellBias;\n        return totalFee - sellBias;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}