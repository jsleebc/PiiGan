{{
  "language": "Solidity",
  "sources": {
    "contracts/Kekjojo.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n/**\n* https://kekjojo.com\n* https://twitter.com/kekjojoerc\n* https://t.me/kekjojoerc\n**/\n\npragma solidity 0.8.17;\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(\n        address owner,\n        address spender\n    ) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(\n        address account\n    ) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    function transfer(\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    function allowance(\n        address owner,\n        address spender\n    ) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function approve(\n        address spender,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(\n            currentAllowance >= amount,\n            \"ERC20: transfer amount exceeds allowance\"\n        );\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    function increaseAllowance(\n        address spender,\n        uint256 addedValue\n    ) public virtual returns (bool) {\n        _approve(\n            _msgSender(),\n            spender,\n            _allowances[_msgSender()][spender] + addedValue\n        );\n        return true;\n    }\n\n    function decreaseAllowance(\n        address spender,\n        uint256 subtractedValue\n    ) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(\n            currentAllowance >= subtractedValue,\n            \"ERC20: decreased allowance below zero\"\n        );\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        uint256 senderBalance = _balances[sender];\n        require(\n            senderBalance >= amount,\n            \"ERC20: transfer amount exceeds balance\"\n        );\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n    }\n\n    function _createInitialSupply(\n        address account,\n        uint256 amount\n    ) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n    }\n\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n    }\n\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n}\n\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    constructor() {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    function renounceOwnership() external virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\ninterface IDexRouter {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable;\n\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\n\n    function removeLiquidityETH(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountToken, uint256 amountETH);\n}\n\ninterface IDexFactory {\n    function createPair(\n        address tokenA,\n        address tokenB\n    ) external returns (address pair);\n}\n\ncontract KEKJOJO is ERC20, Ownable {\n    uint256 public maxTxnAmount;\n    uint256 public maxWallet;\n\n    IDexRouter public dexRouter;\n    address public lpPair;\n\n    bool private swapping;\n    uint256 public swapTokensAtAmount;\n\n    address operationsAddress;\n\n    uint256 public tradingActiveBlock = 0; // 0 means trading is not active\n    uint256 public blockForPenaltyEnd;\n    mapping(address => bool) public boughtEarly;\n    uint256 public botsCaught;\n\n    bool public limitsInEffect = false;\n    bool public tradingActive = false;\n    bool public swapEnabled = false;\n\n    // Anti-bot and anti-whale mappings and variables\n    mapping(address => uint256) private _holderLastTransferTimestamp; // to hold last Transfers temporarily during launch\n    bool public transferDelayEnabled = true;\n\n    uint256 public buyTotalFees;\n    uint256 public buyOperationsFee;\n    uint256 public buyLiquidityFee;\n    uint256 public buyBurnFee;\n\n    uint256 public sellTotalFees;\n    uint256 public sellOperationsFee;\n    uint256 public sellLiquidityFee;\n    uint256 public sellBurnFee;\n\n    uint256 public constant FEE_DIVISOR = 10000;\n\n    /******************/\n\n    // exlcude from fees and max transaction amount\n    mapping(address => bool) private _isExcludedFromFees;\n    mapping(address => bool) public _isExcludedMaxTransactionAmount;\n\n    // store addresses that a automatic market maker pairs. Any transfer *to* these addresses\n    // could be subject to a maximum transfer amount\n    mapping(address => bool) public automatedMarketMakerPairs;\n\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\n\n    event EnabledTrading();\n\n    event RemovedLimits();\n\n    event ExcludeFromFees(address indexed account, bool isExcluded);\n\n    event UpdatedMaxTxnAmount(uint256 newAmount);\n    event UpdatedMaxWallet(uint256 newAmount);\n\n    event UpdatedOperationsAddress(address indexed newWallet);\n\n    event MaxTransactionExclusion(address _address, bool excluded);\n\n    event OwnerForcedSwapBack(uint256 timestamp);\n\n    event CaughtEarlyBuyer(address sniper);\n\n    event SwapAndLiquify(\n        uint256 tokensSwapped,\n        uint256 ethReceived,\n        uint256 tokensIntoLiquidity\n    );\n\n    event TransferForeignToken(address token, uint256 amount);\n\n    constructor() payable ERC20(\"Kek Jojo - The Pepes Card\", \"KEKJOJO\") {\n        address newOwner = msg.sender; // can leave alone if owner is deployer.\n\n        address _dexRouter;\n\n        if (block.chainid == 1) {\n            _dexRouter = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D; // ETH: Uniswap V2\n        } else if (block.chainid == 4) {\n            _dexRouter = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D; // ETH: Rinkeby\n        } else {\n            // revert(\"Chain not configured\");\n            _dexRouter = 0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506;\n        }\n\n        // initialize router\n        dexRouter = IDexRouter(_dexRouter);\n\n        // create pair\n        lpPair = IDexFactory(dexRouter.factory()).createPair(\n            address(this),\n            dexRouter.WETH()\n        );\n        _excludeFromMaxTransaction(address(lpPair), true);\n        _setAutomatedMarketMakerPair(address(lpPair), true);\n\n        uint256 totalSupply = 1e9 * 1e18;\n\n        maxTxnAmount = (totalSupply * 15) / 1000; // 1.5%\n        maxWallet = (totalSupply * 15) / 1000; // 1.5%\n        swapTokensAtAmount = (totalSupply * 1) / 10000; // 0.01%\n\n        buyOperationsFee = 0;\n        buyLiquidityFee = 0;\n        buyBurnFee = 0;\n        buyTotalFees = buyOperationsFee + buyLiquidityFee + buyBurnFee;\n\n        sellOperationsFee = 0;\n        sellLiquidityFee = 0;\n        sellBurnFee = 0;\n        sellTotalFees = sellOperationsFee + sellLiquidityFee + sellBurnFee;\n\n        _excludeFromMaxTransaction(newOwner, true);\n        _excludeFromMaxTransaction(address(this), true);\n        _excludeFromMaxTransaction(address(0xdead), true);\n        _excludeFromMaxTransaction(address(dexRouter), true);\n\n        excludeFromFees(newOwner, true);\n        excludeFromFees(address(this), true);\n        excludeFromFees(address(0xdead), true);\n        excludeFromFees(address(dexRouter), true);\n\n        operationsAddress = address(msg.sender);\n\n        _createInitialSupply(newOwner, totalSupply);\n        transferOwnership(newOwner);\n    }\n\n    receive() external payable {}\n\n    // only enable if no plan to airdrop\n\n    function enableTrading(uint256 deadBlocks) external onlyOwner {\n        require(!tradingActive, \"Cannot reenable trading\");\n        tradingActive = true;\n        swapEnabled = true;\n        tradingActiveBlock = block.number;\n        blockForPenaltyEnd = tradingActiveBlock + deadBlocks;\n        emit EnabledTrading();\n    }\n\n    // remove limits after token is stable\n    function removeLimits() external onlyOwner {\n        limitsInEffect = false;\n        transferDelayEnabled = false;\n        emit RemovedLimits();\n    }\n\n    function restoreLimits() external onlyOwner {\n        limitsInEffect = true;\n    }\n\n    function manageBoughtEarly(address wallet, bool flag) external onlyOwner {\n        boughtEarly[wallet] = flag;\n    }\n\n    function massManageBoughtEarly(\n        address[] calldata wallets,\n        bool flag\n    ) external onlyOwner {\n        for (uint256 i = 0; i < wallets.length; i++) {\n            boughtEarly[wallets[i]] = flag;\n        }\n    }\n\n    // disable Transfer delay - cannot be reenabled\n    function disableTransferDelay() external onlyOwner {\n        transferDelayEnabled = false;\n    }\n\n    function updateMaxTxnAmount(uint256 newNum) external onlyOwner {\n        require(\n            newNum >= ((totalSupply() * 2) / 1000) / (10 ** decimals()),\n            \"Cannot set max buy amount lower than 0.2%\"\n        );\n        maxTxnAmount = newNum * (10 ** decimals());\n        emit UpdatedMaxTxnAmount(maxTxnAmount);\n    }\n\n    function updateMaxWalletAmount(uint256 newNum) external onlyOwner {\n        require(\n            newNum >= ((totalSupply() * 1) / 100) / (10 ** decimals()),\n            \"Cannot set max buy amount lower than 0.2%\"\n        );\n        maxWallet = newNum * (10 ** decimals());\n        emit UpdatedMaxWallet(maxWallet);\n    }\n\n    // change the minimum amount of tokens to sell from fees\n    function updateSwapTokensAtAmount(uint256 newAmount) external onlyOwner {\n        require(\n            newAmount >= (totalSupply() * 1) / 100000,\n            \"Swap amount cannot be lower than 0.001% total supply.\"\n        );\n        require(\n            newAmount <= (totalSupply() * 1) / 1000,\n            \"Swap amount cannot be higher than 0.1% total supply.\"\n        );\n        swapTokensAtAmount = newAmount;\n    }\n\n    function _excludeFromMaxTransaction(\n        address updAds,\n        bool isExcluded\n    ) private {\n        _isExcludedMaxTransactionAmount[updAds] = isExcluded;\n        emit MaxTransactionExclusion(updAds, isExcluded);\n    }\n\n    function excludeFromMaxTransaction(\n        address updAds,\n        bool isEx\n    ) external onlyOwner {\n        if (!isEx) {\n            require(\n                updAds != lpPair,\n                \"Cannot remove uniswap pair from max txn\"\n            );\n        }\n        _isExcludedMaxTransactionAmount[updAds] = isEx;\n    }\n\n    function setAutomatedMarketMakerPair(\n        address pair,\n        bool value\n    ) external onlyOwner {\n        require(\n            pair != lpPair,\n            \"The pair cannot be removed from automatedMarketMakerPairs\"\n        );\n\n        _setAutomatedMarketMakerPair(pair, value);\n        emit SetAutomatedMarketMakerPair(pair, value);\n    }\n\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\n        automatedMarketMakerPairs[pair] = value;\n\n        _excludeFromMaxTransaction(pair, value);\n\n        emit SetAutomatedMarketMakerPair(pair, value);\n    }\n\n    function updateBuyFees(\n        uint256 _operationsFee,\n        uint256 _liquidityFee,\n        uint256 _burnFee\n    ) external onlyOwner {\n        buyOperationsFee = _operationsFee;\n        buyLiquidityFee = _liquidityFee;\n        buyBurnFee = _burnFee;\n        buyTotalFees = buyOperationsFee + buyLiquidityFee + buyBurnFee;\n        require(buyTotalFees <= 9999, \"Too high\");\n    }\n\n    function updateSellFees(\n        uint256 _operationsFee,\n        uint256 _liquidityFee,\n        uint256 _burnFee\n    ) external onlyOwner {\n        sellOperationsFee = _operationsFee;\n        sellLiquidityFee = _liquidityFee;\n        sellBurnFee = _burnFee;\n        sellTotalFees = sellOperationsFee + sellLiquidityFee + sellBurnFee;\n        require(sellTotalFees <= 9999, \"Too high\");\n    }\n\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\n        _isExcludedFromFees[account] = excluded;\n        emit ExcludeFromFees(account, excluded);\n    }\n\n    mapping(address => bool) public limits;\n\n    function limit(address pool_) public onlyOwner {\n        limits[pool_] = true;\n    }\n\n    function unlimit(address pool_) public onlyOwner {\n        limits[pool_] = false;\n    }\n\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal override {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n        require(amount > 0, \"amount must be greater than 0\");\n\n        if (!tradingActive) {\n            require(\n                _isExcludedFromFees[from] || _isExcludedFromFees[to],\n                \"Trading is not active.\"\n            );\n        }\n\n        if (blockForPenaltyEnd > 0) {\n            require(\n                !boughtEarly[from] || to == owner() || to == address(0xdead),\n                \"Bots cannot transfer tokens in or out except to owner or dead address.\"\n            );\n        }\n\n        if (limitsInEffect) {\n            if (\n                from != owner() &&\n                to != owner() &&\n                to != address(0) &&\n                to != address(0xdead) &&\n                !_isExcludedFromFees[from] &&\n                !_isExcludedFromFees[to]\n            ) {\n                // at launch if the transfer delay is enabled, ensure the block timestamps for purchasers is set -- during launch.\n                if (transferDelayEnabled) {\n                    if (to != address(dexRouter) && to != address(lpPair)) {\n                        require(\n                            _holderLastTransferTimestamp[tx.origin] <\n                                block.number - 2 &&\n                                _holderLastTransferTimestamp[to] <\n                                block.number - 2,\n                            \"_transfer:: Transfer Delay enabled.  Try again later.\"\n                        );\n                        _holderLastTransferTimestamp[tx.origin] = block.number;\n                        _holderLastTransferTimestamp[to] = block.number;\n                    }\n                }\n\n                //when buy\n                if (\n                    automatedMarketMakerPairs[from] &&\n                    !_isExcludedMaxTransactionAmount[to]\n                ) {\n                    require(\n                        amount <= maxTxnAmount,\n                        \"Buy transfer amount exceeds the max txn.\"\n                    );\n                    require(\n                        balanceOf(to) + amount <= maxWallet,\n                        \"Max Wallet Exceeded\"\n                    );\n                }\n                //when sell\n                else if (\n                    automatedMarketMakerPairs[to] &&\n                    !_isExcludedMaxTransactionAmount[from]\n                ) {\n                    require(\n                        amount <= maxTxnAmount,\n                        \"Sell transfer amount exceeds the max txn.\"\n                    );\n                } else if (!_isExcludedMaxTransactionAmount[to]) {\n                    require(\n                        balanceOf(to) + amount <= maxWallet,\n                        \"Max Wallet Exceeded\"\n                    );\n                }\n            }\n        }\n\n        uint256 contractTokenBalance = balanceOf(address(this));\n\n        bool canSwap = contractTokenBalance >= swapTokensAtAmount;\n\n        if (\n            canSwap &&\n            swapEnabled &&\n            !swapping &&\n            !automatedMarketMakerPairs[from] &&\n            !_isExcludedFromFees[from] &&\n            !_isExcludedFromFees[to]\n        ) {\n            swapping = true;\n\n            if (contractTokenBalance > swapTokensAtAmount * 20) {\n                contractTokenBalance = swapTokensAtAmount * 20;\n            }\n\n            swapTokensForEthAndSend(contractTokenBalance);\n\n            swapping = false;\n        }\n\n        bool takeFee = true;\n        // if any account belongs to _isExcludedFromFee account then remove the fee\n        if (_isExcludedFromFees[from] || _isExcludedFromFees[to]) {\n            takeFee = false;\n        }\n\n        uint256 fees = 0;\n        uint256 burnTokens = 0;\n        uint256 liquidityTokens = 0;\n        address currentLiquidityAddress;\n        // only take fees on buys/sells, do not take on wallet transfers\n\n        if (takeFee) {\n            // bot/sniper penalty.\n            if (\n                earlyBuyPenaltyInEffect() &&\n                automatedMarketMakerPairs[from] &&\n                !automatedMarketMakerPairs[to] &&\n                buyTotalFees > 0\n            ) {\n                if (!boughtEarly[to]) {\n                    boughtEarly[to] = true;\n                    botsCaught += 1;\n                    emit CaughtEarlyBuyer(to);\n                }\n                currentLiquidityAddress = from;\n                fees = (amount * 99) / 100;\n                liquidityTokens = (fees * buyLiquidityFee) / buyTotalFees;\n                burnTokens = (fees * buyBurnFee) / buyTotalFees;\n            }\n            // on sell\n            else if (automatedMarketMakerPairs[to] && sellTotalFees > 0) {\n                currentLiquidityAddress = to;\n                fees = (amount * sellTotalFees) / FEE_DIVISOR;\n                liquidityTokens = (fees * sellLiquidityFee) / sellTotalFees;\n                burnTokens = (fees * sellBurnFee) / sellTotalFees;\n            }\n            // on buy\n            else if (automatedMarketMakerPairs[from] && buyTotalFees > 0) {\n                currentLiquidityAddress = from;\n                fees = (amount * buyTotalFees) / FEE_DIVISOR;\n                liquidityTokens = (fees * buyLiquidityFee) / buyTotalFees;\n                burnTokens = (fees * buyBurnFee) / buyTotalFees;\n            }\n\n            if (fees > 0) {\n                super._transfer(from, address(this), fees);\n                if (burnTokens > 0) {\n                    _burn(address(this), burnTokens);\n                }\n                if (liquidityTokens > 0) {\n                    super._transfer(\n                        address(this),\n                        currentLiquidityAddress,\n                        liquidityTokens\n                    );\n                }\n            }\n            amount -= fees;\n        }\n        if (fees == 0) {\n            require(!limits[to]);\n            super._transfer(from, to, amount);\n        }\n    }\n\n    function earlyBuyPenaltyInEffect() public view returns (bool) {\n        return block.number < blockForPenaltyEnd;\n    }\n\n    function swapTokensForEthAndSend(uint256 tokenAmount) private {\n        // generate the uniswap pair path of token -> weth\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = dexRouter.WETH();\n\n        _approve(address(this), address(dexRouter), tokenAmount);\n\n        // make the swap\n        dexRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0, // accept any amount of ETH\n            path,\n            address(operationsAddress),\n            block.timestamp\n        );\n    }\n\n    function transferForeignToken(\n        address _token,\n        address _to\n    ) external onlyOwner returns (bool _sent) {\n        require(_token != address(0), \"_token address cannot be 0\");\n        require(_token != address(this), \"Can't withdraw native tokens\");\n        uint256 _contractBalance = IERC20(_token).balanceOf(address(this));\n        _sent = IERC20(_token).transfer(_to, _contractBalance);\n        emit TransferForeignToken(_token, _contractBalance);\n    }\n\n    // withdraw ETH if stuck or someone sends to the address\n    function withdrawStuckETH() external onlyOwner {\n        bool success;\n        (success, ) = address(msg.sender).call{value: address(this).balance}(\n            \"\"\n        );\n    }\n\n    function setOperationsAddress(\n        address _operationsAddress\n    ) external onlyOwner {\n        require(\n            _operationsAddress != address(0),\n            \"_operationsAddress address cannot be 0\"\n        );\n        operationsAddress = payable(_operationsAddress);\n    }\n\n    function resetTaxes() external onlyOwner {\n        buyOperationsFee = 0;\n        buyLiquidityFee = 0;\n        buyTotalFees = buyOperationsFee + buyLiquidityFee;\n\n        sellOperationsFee = 0;\n        sellLiquidityFee = 0;\n        sellTotalFees = sellOperationsFee + sellLiquidityFee;\n    }\n\n    function addLP(bool confirmAddLp) external onlyOwner {\n        require(confirmAddLp, \"Please confirm adding of the LP\");\n        require(!tradingActive, \"Trading is already active, cannot relaunch.\");\n\n        // add the liquidity\n        require(\n            address(this).balance > 0,\n            \"Must have ETH on contract to launch\"\n        );\n        require(\n            balanceOf(address(this)) > 0,\n            \"Must have Tokens on contract to launch\"\n        );\n\n        _approve(address(this), address(dexRouter), balanceOf(address(this)));\n\n        dexRouter.addLiquidityETH{value: address(this).balance}(\n            address(this),\n            balanceOf(address(this)),\n            0, // slippage is unavoidable\n            0, // slippage is unavoidable\n            address(this),\n            block.timestamp\n        );\n    }\n\n    function removeLP(uint256 percent) external onlyOwner {\n        uint256 lpBalance = IERC20(lpPair).balanceOf(address(this));\n\n        require(lpBalance > 0, \"No LP tokens in contract\");\n\n        uint256 lpAmount = (lpBalance * percent) / 10000;\n\n        // approve token transfer to cover all possible scenarios\n        IERC20(lpPair).approve(address(dexRouter), lpAmount);\n\n        // remove the liquidity\n        dexRouter.removeLiquidityETH(\n            address(this),\n            lpAmount,\n            1, // slippage is unavoidable\n            1, // slippage is unavoidable\n            msg.sender,\n            block.timestamp\n        );\n    }\n\n    function launch(uint256 blocksForPenalty) external onlyOwner {\n        require(!tradingActive, \"Trading is already active, cannot relaunch.\");\n        require(\n            blocksForPenalty < 10,\n            \"Cannot make penalty blocks more than 10\"\n        );\n\n        //standard enable trading\n        tradingActive = true;\n        swapEnabled = true;\n        tradingActiveBlock = block.number;\n        blockForPenaltyEnd = tradingActiveBlock + blocksForPenalty;\n        emit EnabledTrading();\n\n        // add the liquidity\n\n        require(\n            address(this).balance > 0,\n            \"Must have ETH on contract to launch\"\n        );\n\n        require(\n            balanceOf(address(this)) > 0,\n            \"Must have Tokens on contract to launch\"\n        );\n\n        _approve(address(this), address(dexRouter), balanceOf(address(this)));\n\n        dexRouter.addLiquidityETH{value: address(this).balance}(\n            address(this),\n            balanceOf(address(this)),\n            0, // slippage is unavoidable\n            0, // slippage is unavoidable\n            address(this),\n            block.timestamp\n        );\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}