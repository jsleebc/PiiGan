{{
  "language": "Solidity",
  "sources": {
    "contracts/oracleai.sol": {
      "content": "/*\n Oracle AI\n $ORCAI\n */\n//  Official Website:  https://orcai.io/\n//  Official Telegram: https://t.me/oracleaiofficial\n//  Official Twitter:  https://twitter.com/@orcai_\n//  Official Gitbook:  https://oracleai.gitbook.io/oracle-ai/\n\n//SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.18;\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n}\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    function allowance(\n        address owner,\n        address spender\n    ) external view returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\ncontract Ownable is Context {\n    address private _owner;\n    address private _previousOwner;\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    constructor() {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\ninterface IUniswapV2Factory {\n    function createPair(\n        address tokenA,\n        address tokenB\n    ) external returns (address pair);\n}\n\ninterface IUniswapV2Router02 {\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\n}\n\ncontract OracleAI is Context, IERC20, Ownable {\n    string private constant _name = \"Oracle AI\";\n    string private constant _symbol = \"ORCAI\";\n    uint8 private constant _decimals = 6;\n\n    mapping(address => uint256) private _rOwned;\n    mapping(address => mapping(address => uint256)) private _allowances;\n    mapping(address => bool) private _isExcludedFromFee;\n    uint256 private constant MAX = ~uint256(0);\n    uint256 private constant _tTotal = 1000000 * 10 ** 6;\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\n    uint256 private _tFeeTotal;\n    uint256 public launchBlock;\n\n    //Buy Fee\n    uint256 private _redisFeeOnBuy = 0; //\n    uint256 private _taxFeeOnBuy = 0; // updated\n\n    //Sell Fee\n    uint256 private _redisFeeOnSell = 0; //\n    uint256 private _taxFeeOnSell = 20; // updated\n\n    //Original Fee\n    uint256 private _redisFee = _redisFeeOnSell;\n    uint256 private _taxFee = _taxFeeOnSell;\n\n    uint256 private _previousredisFee = _redisFee;\n    uint256 private _previoustaxFee = _taxFee;\n\n    mapping(address => bool) public bots;\n\n    address payable private _developmentAddress =\n        payable(0x5b1142dBcE016194Ba81Bdf2053C9A2fa8E1246B); // updated\n    address payable private _marketingAddress =\n        payable(0xCeA7Efde861047d024f34d2c78ACa05A01f89868); // updated\n\n    IUniswapV2Router02 public uniswapV2Router;\n    address public uniswapV2Pair;\n\n    bool private tradingOpen = false;\n    bool private inSwap = false;\n    bool private swapEnabled = true;\n\n    uint256 public _maxTxAmount = 100000000; //  100%\n    uint256 public _maxWalletSize = 100000000 * 10 ** 6; // 100%\n    uint256 public _swapTokensAtAmount = 500 * 10 ** 6; // 0.05%\n\n    event MaxTxAmountUpdated(uint256 _maxTxAmount);\n    modifier lockTheSwap() {\n        inSwap = true;\n        _;\n        inSwap = false;\n    }\n\n    constructor() {\n        _rOwned[_msgSender()] = _rTotal;\n\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D //uniswap\n        );\n        uniswapV2Router = _uniswapV2Router;\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\n            .createPair(address(this), _uniswapV2Router.WETH());\n\n        _isExcludedFromFee[owner()] = true;\n        _isExcludedFromFee[address(this)] = true;\n        _isExcludedFromFee[_developmentAddress] = true;\n        _isExcludedFromFee[_marketingAddress] = true;\n\n        bots[address(0x66f049111958809841Bbe4b81c034Da2D953AA0c)] = true;\n        bots[address(0x000000005736775Feb0C8568e7DEe77222a26880)] = true;\n        bots[address(0x34822A742BDE3beF13acabF14244869841f06A73)] = true;\n        bots[address(0x69611A66d0CF67e5Ddd1957e6499b5C5A3E44845)] = true;\n        bots[address(0x69611A66d0CF67e5Ddd1957e6499b5C5A3E44845)] = true;\n        bots[address(0x8484eFcBDa76955463aa12e1d504D7C6C89321F8)] = true;\n        bots[address(0xe5265ce4D0a3B191431e1bac056d72b2b9F0Fe44)] = true;\n        bots[address(0x33F9Da98C57674B5FC5AE7349E3C732Cf2E6Ce5C)] = true;\n        bots[address(0xc59a8E2d2c476BA9122aa4eC19B4c5E2BBAbbC28)] = true;\n        bots[address(0x21053Ff2D9Fc37D4DB8687d48bD0b57581c1333D)] = true;\n        bots[address(0x4dd6A0D3191A41522B84BC6b65d17f6f5e6a4192)] = true;\n\n        emit Transfer(address(0), _msgSender(), _tTotal);\n    }\n\n    function name() public pure returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public pure returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public pure returns (uint8) {\n        return _decimals;\n    }\n\n    function totalSupply() public pure override returns (uint256) {\n        return _tTotal;\n    }\n\n    function balanceOf(address account) public view override returns (uint256) {\n        return tokenFromReflection(_rOwned[account]);\n    }\n\n    function transfer(\n        address recipient,\n        uint256 amount\n    ) public override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    function allowance(\n        address owner,\n        address spender\n    ) public view override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function approve(\n        address spender,\n        uint256 amount\n    ) public override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(\n            sender,\n            _msgSender(),\n            _allowances[sender][_msgSender()] - amount\n        );\n        return true;\n    }\n\n    function tokenFromReflection(\n        uint256 rAmount\n    ) private view returns (uint256) {\n        require(\n            rAmount <= _rTotal,\n            \"Amount must be less than total reflections\"\n        );\n        uint256 currentRate = _getRate();\n        return rAmount / currentRate;\n    }\n\n    function removeAllFee() private {\n        if (_redisFee == 0 && _taxFee == 0) return;\n\n        _previousredisFee = _redisFee;\n        _previoustaxFee = _taxFee;\n\n        _redisFee = 0;\n        _taxFee = 0;\n    }\n\n    function restoreAllFee() private {\n        _redisFee = _previousredisFee;\n        _taxFee = _previoustaxFee;\n    }\n\n    function _approve(address owner, address spender, uint256 amount) private {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function _transfer(address from, address to, uint256 amount) private {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n        require(amount > 0, \"Transfer amount must be greater than zero\");\n\n        if (from != owner() && to != owner()) {\n            //Trade start check\n            if (!tradingOpen) {\n                require(\n                    from == owner(),\n                    \"TOKEN: This account cannot send tokens until trading is enabled\"\n                );\n            }\n\n            require(amount <= _maxTxAmount, \"TOKEN: Max Transaction Limit\");\n            require(\n                !bots[from] && !bots[to],\n                \"TOKEN: Your account is blacklisted!\"\n            );\n\n            if (\n                block.number <= launchBlock &&\n                from == uniswapV2Pair &&\n                to != address(uniswapV2Router) &&\n                to != address(this)\n            ) {\n                bots[to] = true;\n            }\n\n            if (to != uniswapV2Pair) {\n                require(\n                    balanceOf(to) + amount < _maxWalletSize,\n                    \"TOKEN: Balance exceeds wallet size!\"\n                );\n            }\n\n            uint256 contractTokenBalance = balanceOf(address(this));\n            bool canSwap = contractTokenBalance >= _swapTokensAtAmount;\n\n            if (contractTokenBalance >= _maxTxAmount) {\n                contractTokenBalance = _maxTxAmount;\n            }\n\n            if (\n                canSwap &&\n                !inSwap &&\n                from != uniswapV2Pair &&\n                swapEnabled &&\n                !_isExcludedFromFee[from] &&\n                !_isExcludedFromFee[to]\n            ) {\n                swapTokensForEth(contractTokenBalance);\n                uint256 contractETHBalance = address(this).balance;\n                if (contractETHBalance > 0) {\n                    sendETHToFee(address(this).balance);\n                }\n            }\n        }\n\n        bool takeFee = true;\n\n        //Transfer Tokens\n        if (\n            (_isExcludedFromFee[from] || _isExcludedFromFee[to]) ||\n            (from != uniswapV2Pair && to != uniswapV2Pair)\n        ) {\n            takeFee = false;\n        } else {\n            //Set Fee for Buys\n            if (from == uniswapV2Pair && to != address(uniswapV2Router)) {\n                _redisFee = _redisFeeOnBuy;\n                _taxFee = _taxFeeOnBuy;\n            }\n\n            //Set Fee for Sells\n            if (to == uniswapV2Pair && from != address(uniswapV2Router)) {\n                _redisFee = _redisFeeOnSell;\n                _taxFee = _taxFeeOnSell;\n            }\n        }\n\n        _tokenTransfer(from, to, amount, takeFee);\n    }\n\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = uniswapV2Router.WETH();\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0,\n            path,\n            address(this),\n            block.timestamp\n        );\n    }\n\n    function sendETHToFee(uint256 amount) private {\n        _developmentAddress.transfer(amount);\n        // _marketingAddress.transfer(amount / 2);\n    }\n\n    function setTrading() public onlyOwner {\n        require(!tradingOpen, \"Trading already enabled\");\n        tradingOpen = true;\n        launchBlock = block.number;\n    }\n\n    function manualswap() external {\n        require(\n            _msgSender() == _developmentAddress ||\n                _msgSender() == _marketingAddress\n        );\n        uint256 contractBalance = balanceOf(address(this));\n        swapTokensForEth(contractBalance);\n    }\n\n    function manualsend() external {\n        require(\n            _msgSender() == _developmentAddress ||\n                _msgSender() == _marketingAddress\n        );\n        uint256 contractETHBalance = address(this).balance;\n        sendETHToFee(contractETHBalance);\n    }\n\n    function _tokenTransfer(\n        address sender,\n        address recipient,\n        uint256 amount,\n        bool takeFee\n    ) private {\n        if (!takeFee) removeAllFee();\n        _transferStandard(sender, recipient, amount);\n        if (!takeFee) restoreAllFee();\n    }\n\n    function _transferStandard(\n        address sender,\n        address recipient,\n        uint256 tAmount\n    ) private {\n        (\n            uint256 rAmount,\n            uint256 rTransferAmount,\n            uint256 rFee,\n            uint256 tTransferAmount,\n            uint256 tFee,\n            uint256 tTeam\n        ) = _getValues(tAmount);\n        _rOwned[sender] = _rOwned[sender] - rAmount;\n        _rOwned[recipient] = _rOwned[recipient] + rTransferAmount;\n        _takeTeam(tTeam);\n        _reflectFee(rFee, tFee);\n        emit Transfer(sender, recipient, tTransferAmount);\n    }\n\n    function _takeTeam(uint256 tTeam) private {\n        uint256 currentRate = _getRate();\n        uint256 rTeam = tTeam * currentRate;\n        _rOwned[address(this)] = _rOwned[address(this)] + rTeam;\n    }\n\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\n        _rTotal = _rTotal - rFee;\n        _tFeeTotal = _tFeeTotal + tFee;\n    }\n\n    receive() external payable {}\n\n    function _getValues(\n        uint256 tAmount\n    )\n        private\n        view\n        returns (uint256, uint256, uint256, uint256, uint256, uint256)\n    {\n        (uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getTValues(\n            tAmount,\n            _redisFee,\n            _taxFee\n        );\n        uint256 currentRate = _getRate();\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(\n            tAmount,\n            tFee,\n            tTeam,\n            currentRate\n        );\n\n        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tTeam);\n    }\n\n    function _getTValues(\n        uint256 tAmount,\n        uint256 redisFee,\n        uint256 taxFee\n    ) private pure returns (uint256, uint256, uint256) {\n        uint256 tFee = (tAmount * redisFee) / 100;\n        uint256 tTeam = (tAmount * taxFee) / 100;\n        uint256 tTransferAmount = tAmount - tFee - tTeam;\n\n        return (tTransferAmount, tFee, tTeam);\n    }\n\n    function _getRValues(\n        uint256 tAmount,\n        uint256 tFee,\n        uint256 tTeam,\n        uint256 currentRate\n    ) private pure returns (uint256, uint256, uint256) {\n        uint256 rAmount = tAmount * currentRate;\n        uint256 rFee = tFee * currentRate;\n        uint256 rTeam = tTeam * currentRate;\n        uint256 rTransferAmount = rAmount - rFee - rTeam;\n\n        return (rAmount, rTransferAmount, rFee);\n    }\n\n    function _getRate() private view returns (uint256) {\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\n\n        return rSupply / tSupply;\n    }\n\n    function _getCurrentSupply() private view returns (uint256, uint256) {\n        uint256 rSupply = _rTotal;\n        uint256 tSupply = _tTotal;\n        if (rSupply < _rTotal / _tTotal) return (_rTotal, _tTotal);\n\n        return (rSupply, tSupply);\n    }\n\n    function setFee(\n        uint256 redisFeeOnBuy,\n        uint256 redisFeeOnSell,\n        uint256 taxFeeOnBuy,\n        uint256 taxFeeOnSell\n    ) public onlyOwner {\n        require(\n            _taxFeeOnBuy <= 20 &&\n                _taxFeeOnSell <= 20 &&\n                redisFeeOnBuy <= 20 &&\n                redisFeeOnSell <= 20,\n            \"Tax can't be higher than 20\"\n        );\n        _redisFeeOnBuy = redisFeeOnBuy;\n        _redisFeeOnSell = redisFeeOnSell;\n\n        _taxFeeOnBuy = taxFeeOnBuy;\n        _taxFeeOnSell = taxFeeOnSell;\n    }\n\n    //Set minimum tokens required to swap.\n    function setMinSwapTokensThreshold(\n        uint256 swapTokensAtAmount\n    ) public onlyOwner {\n        _swapTokensAtAmount = swapTokensAtAmount;\n    }\n\n    //Set minimum tokens required to swap.\n    function toggleSwap(bool _swapEnabled) public onlyOwner {\n        swapEnabled = _swapEnabled;\n    }\n\n    //Set maximum transaction\n    function setMaxTxnAmount(uint256 maxTxAmount) public onlyOwner {\n        require(_maxTxAmount > 0, \"Max TX Amount needs to be larger than 0\");\n        _maxTxAmount = maxTxAmount;\n    }\n\n    function setMaxWalletSize(uint256 maxWalletSize) public onlyOwner {\n        require(\n            _maxWalletSize > 0,\n            \"Max wallet size needs to be larger than 0\"\n        );\n        _maxWalletSize = maxWalletSize;\n    }\n\n    function excludeMultipleAccountsFromFees(\n        address[] calldata accounts,\n        bool excluded\n    ) public onlyOwner {\n        for (uint256 i = 0; i < accounts.length; i++) {\n            _isExcludedFromFee[accounts[i]] = excluded;\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}