{{
  "language": "Solidity",
  "sources": {
    "contracts/PrintingCoin.sol": {
      "content": "/*\n    https://printing.finance/\n\n    TG: https://t.me/printingcoin\n\n    Twitter: https://twitter.com/Printing_coin\n*/\n\n// SPDX-License-Identifier: Unlicensed\npragma solidity 0.8.18;\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n}\n\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"addition overflow\");\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"subtraction overflow\");\n    }\n\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, \" multiplication overflow\");\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"division by zero\");\n    }\n\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        return c;\n    }\n}\n\ncontract Ownable is Context {\n    address private _owner;\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    constructor() {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"caller is not the owner\");\n        _;\n    }\n\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0), \"new owner is the zero address\");\n        _owner = newOwner;\n        emit OwnershipTransferred(_owner, newOwner);\n    }\n\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n}\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    function allowance(\n        address owner,\n        address spender\n    ) external view returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\ninterface IUniswapV2Factory {\n    function createPair(\n        address tokenA,\n        address tokenB\n    ) external returns (address pair);\n}\n\ninterface IUniswapV2Router02 {\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ncontract PrintingCoin is Context, IERC20, Ownable {\n    using SafeMath for uint256;\n    mapping(address => uint256) private _balance;\n    mapping(address => mapping(address => uint256)) private _allowances;\n    mapping(address => bool) private _isExcludedFromFeeWallet;\n    uint8 private constant _decimals = 18;\n    uint256 private constant _totalSupply = 100000000000000 * 10 ** _decimals;\n    uint256 private constant onePercent = 1000000000000 * 10 ** _decimals;\n    uint256 public maxWalletAmount = onePercent * 2;\n    uint256 private _tax;\n    uint256 public buyTax = 20;\n    uint256 public sellTax = 30;\n    string private constant _name = \"PrintingCoin\";\n    string private constant _symbol = \"FED\";\n    IUniswapV2Router02 private uniswapV2Router;\n    address public uniswapV2Pair;\n    address payable public mWallet;\n    bool private launch = false;\n    uint256 private constant minSwap = onePercent / 20;\n    bool private inSwapAndLiquify;\n\n    modifier lockTheSwap() {\n        inSwapAndLiquify = true;\n        _;\n        inSwapAndLiquify = false;\n    }\n\n    constructor(address[] memory wallets) {\n        uniswapV2Router = IUniswapV2Router02(\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\n        );\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(\n            address(this),\n            uniswapV2Router.WETH()\n        );\n        mWallet = payable(msg.sender);\n        for (uint256 i = 0; i < wallets.length; i++) {\n            _isExcludedFromFeeWallet[wallets[i]] = true;\n        }\n        _isExcludedFromFeeWallet[msg.sender] = true;\n        _isExcludedFromFeeWallet[address(this)] = true;\n\n        _allowances[mWallet][address(uniswapV2Router)] = _totalSupply;\n        _balance[msg.sender] = _totalSupply;\n        emit Transfer(address(0), address(msg.sender), _totalSupply);\n    }\n\n    function name() public pure returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public pure returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public pure returns (uint8) {\n        return _decimals;\n    }\n\n    function totalSupply() public pure override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balance[account];\n    }\n\n    function transfer(\n        address recipient,\n        uint256 amount\n    ) public override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    function allowance(\n        address owner,\n        address spender\n    ) public view override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function approve(\n        address spender,\n        uint256 amount\n    ) public override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(\n            sender,\n            _msgSender(),\n            _allowances[sender][_msgSender()].sub(amount, \"too low allowance\")\n        );\n        return true;\n    }\n\n    function _approve(address owner, address spender, uint256 amount) private {\n        require(\n            owner != address(0) && spender != address(0),\n            \"can't approve zero address\"\n        );\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function enableTrading() external onlyOwner {\n        launch = true;\n    }\n\n    function _transfer(address from, address to, uint256 amount) private {\n        require(from != address(0), \"transfer from zero address\");\n        if (_isExcludedFromFeeWallet[from] || _isExcludedFromFeeWallet[to]) {\n            _tax = 0;\n        } else {\n            require(launch, \"Wait for the launch\");\n            if (from == uniswapV2Pair) {\n                require(\n                    balanceOf(to) + amount <= maxWalletAmount,\n                    \"Max buy 2% at launch\"\n                );\n                _tax = buyTax;\n            } else if (to == uniswapV2Pair) {\n                uint256 tokensToSwap = balanceOf(address(this));\n                if (tokensToSwap > minSwap && !inSwapAndLiquify) {\n                    if (tokensToSwap > onePercent) {\n                        tokensToSwap = onePercent;\n                    }\n                    swapTokensForEth(tokensToSwap);\n                }\n                _tax = sellTax;\n            } else {\n                _tax = 0;\n            }\n        }\n        uint256 taxTokens = (amount * _tax) / 100;\n        uint256 transferAmount = amount - taxTokens;\n\n        _balance[from] = _balance[from] - amount;\n        _balance[to] = _balance[to] + transferAmount;\n        _balance[address(this)] = _balance[address(this)] + taxTokens;\n\n        emit Transfer(from, to, transferAmount);\n    }\n\n    function removeAllLimits() external onlyOwner {\n        maxWalletAmount = _totalSupply;\n    }\n\n    function setTaxes(\n        uint256 newBuyTax,\n        uint256 newSellTax\n    ) external onlyOwner {\n        buyTax = newBuyTax;\n        sellTax = newSellTax;\n    }\n\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = uniswapV2Router.WETH();\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0,\n            path,\n            mWallet,\n            block.timestamp\n        );\n    }\n\n    receive() external payable {}\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}