{{
  "language": "Solidity",
  "sources": {
    "src/PumpToken.flattened.sol": {
      "content": "/*\n* $$$$$$$\\  $$\\   $$\\ $$\\      $$\\ $$$$$$$\\        $$$$$$\\ $$$$$$$$\\ \n* $$  __$$\\ $$ |  $$ |$$$\\    $$$ |$$  __$$\\       \\_$$  _|\\__$$  __|\n* $$ |  $$ |$$ |  $$ |$$$$\\  $$$$ |$$ |  $$ |        $$ |     $$ |   \n* $$$$$$$  |$$ |  $$ |$$\\$$\\$$ $$ |$$$$$$$  |        $$ |     $$ |   \n* $$  ____/ $$ |  $$ |$$ \\$$$  $$ |$$  ____/         $$ |     $$ |   \n* $$ |      $$ |  $$ |$$ |\\$  /$$ |$$ |              $$ |     $$ |   \n* $$ |      \\$$$$$$  |$$ | \\_/ $$ |$$ |            $$$$$$\\    $$ |   \n* \\__|       \\______/ \\__|     \\__|\\__|            \\______|   \\__|  \n* \n* An experimental coin that doubles in price daily.\n* NFA DYOR\n*\n* simplypumpit.com\n* t.me/pumperc\n* twitter.com/simplypumpit\n*/\n\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n}\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n\ninterface IUniswapV2Pair {\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function sync() external;\n}\n\ninterface IUniswapV2Factory {\n   function createPair(address tokenA, address tokenB) external returns (address pair);\n}\n\n// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.0.0/contracts/token/ERC20/IERC20.sol\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract PumpToken is IERC20, Ownable {\n    string public name = \"Pump\";\n    string public symbol = \"PUMP\";\n    uint8 public decimals = 18;\n    uint256 public totalSupply;\n\n    mapping(address => uint256) public balanceOf;\n    mapping(address => mapping(address => uint256)) private _allowances;\n    mapping(address => bool) isExcludedFromTax;\n    uint256 maxWallet;\n    bool pumpStarted;\n\n    IUniswapV2Pair public uniswapV2Pair;\n    IUniswapV2Router02 public uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n    address payable treasury = payable(0xb5d8dae8E8045463Ad55ee27Ef5De8857A927b7f);\n\n    uint256 public sellTax = 420;\n    uint256 public lastPumpedTimestamp;\n\n    constructor() {\n        totalSupply = 69_000_000e18;\n        balanceOf[msg.sender] = totalSupply;\n        isExcludedFromTax[owner()] = true;\n        isExcludedFromTax[address(this)] = true;\n        isExcludedFromTax[treasury] = true;\n        isExcludedFromTax[address(uniswapV2Router)] = true;\n        maxWallet = totalSupply / 50;\n        uniswapV2Pair = IUniswapV2Pair(\n            IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH())\n        );\n    }\n\n    event Pump(uint256 prevReserve, uint256 newReserve);\n\n    bool inSwap = false;\n\n    modifier lockTheSwap() {\n        inSwap = true;\n        _;\n        inSwap = false;\n    }\n\n    receive() external payable {}\n\n    function allowance(address owner, address spender) public view override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint256 amount) public override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function _approve(address owner, address spender, uint256 amount) private {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function _spendAllowance(address owner, address spender, uint256 amount) private {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    function transfer(address recipient, uint256 amount) external returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        emit Transfer(msg.sender, recipient, amount);\n        return true;\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool) {\n        _spendAllowance(sender, _msgSender(), amount);\n        _transfer(sender, recipient, amount);\n        emit Transfer(sender, recipient, amount);\n        return true;\n    }\n\n    function _transfer(address sender, address recipient, uint256 amount) private {\n        if (sender == address(uniswapV2Pair) && !isExcludedFromTax[recipient]) {\n            require(amount + balanceOf[recipient] <= maxWallet, \"Transfer amount exceeds the maxWallet\");\n        }\n\n        if (recipient == address(uniswapV2Pair) && !isExcludedFromTax[sender]) {\n            uint256 tax = (amount * sellTax) / 10000;\n            amount -= tax;\n            balanceOf[address(this)] += tax;\n            balanceOf[sender] -= tax;\n        }\n\n        uint256 contractTokenBalance = balanceOf[address(this)];\n        bool canSwap = contractTokenBalance > 0;\n\n        if (\n            canSwap && !inSwap && sender != address(uniswapV2Pair) && !isExcludedFromTax[sender]\n                && !isExcludedFromTax[recipient]\n        ) {\n            swapTokensForEth(contractTokenBalance);\n        }\n\n        balanceOf[sender] -= amount;\n        balanceOf[recipient] += amount;\n    }\n\n    bool isReserve0;\n\n    function pump() public {\n        require(pumpStarted, \"Pump not started\");\n        require(lastPumpedTimestamp != block.timestamp, \"Pump cooldown\");\n\n        (uint112 reserve0, uint112 reserve1,) = uniswapV2Pair.getReserves();\n        uint112 reserve = isReserve0 ? reserve0 : reserve1;\n\n        uint256 timePassed = viewTimePassed();\n        uint256 toBurn;\n\n        toBurn = (reserve * timePassed) / (2 * 86400);\n        lastPumpedTimestamp = block.timestamp;\n\n        burnFrom(address(uniswapV2Pair), toBurn);\n\n        uniswapV2Pair.sync();\n\n        emit Pump(reserve, reserve - toBurn);\n    }\n\n    function startZePump() public onlyOwner {\n        require(!pumpStarted, \"Pump already started\");\n        pumpStarted = true;\n        lastPumpedTimestamp = block.timestamp;\n        maxWallet = totalSupply;\n    }\n\n    function setReserve(bool _isReserve0) public onlyOwner {\n        isReserve0 = _isReserve0;\n    }\n\n    function viewTimePassed() public view returns (uint256) {\n        uint256 timePassed;\n        if (block.timestamp - lastPumpedTimestamp > 86400) {\n            timePassed = 86400;\n        } else {\n            timePassed = block.timestamp - lastPumpedTimestamp;\n        }\n        return timePassed;\n    }\n\n    function burnFrom(address account, uint256 amount) private {\n        balanceOf[account] -= amount;\n        totalSupply -= amount;\n        emit Transfer(account, address(0), amount);\n    }\n\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = uniswapV2Router.WETH();\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount, 0, path, treasury, block.timestamp\n        );\n    }\n}\n"
    }
  },
  "settings": {
    "remappings": [
      "ds-test/=lib/forge-std/lib/ds-test/src/",
      "forge-std/=lib/forge-std/src/",
      "openzeppelin-contracts/=lib/openzeppelin-contracts/"
    ],
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "metadata": {
      "bytecodeHash": "ipfs"
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "evmVersion": "london",
    "libraries": {}
  }
}}