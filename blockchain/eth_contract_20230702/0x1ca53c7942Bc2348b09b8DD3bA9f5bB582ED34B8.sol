{{
  "language": "Solidity",
  "sources": {
    "/contracts/Miragrow.sol": {
      "content": "pragma solidity ^0.8.17;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed _owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n}\r\n\r\ninterface IUniswapV2Factory { \r\n    function createPair(address tokenA, address tokenB) external returns (address pair); \r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\r\n    function WETH() external pure returns (address);\r\n    function factory() external pure returns (address);\r\n    function addLiquidityETH(address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ncontract Miragrow is IERC20, Ownable {\r\n    string private constant _name         = \"Miragrow\";\r\n    string private constant _symbol       = \"MIRA\";\r\n    uint8 private constant _decimals      = 9;\r\n    uint256 private constant _totalSupply = 1_000_000_000 * (10**_decimals);\r\n\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    address payable private constant _walletMarketing = payable(0xb0D4501B57467c1Aa13708808333dbCEB2D41b02);\r\n\r\n    mapping (address => bool) private _noFees;\r\n\r\n    address private constant _swapRouterAddress = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    IUniswapV2Router02 private _primarySwapRouter = IUniswapV2Router02(_swapRouterAddress);\r\n    address private _primaryLP = address(0);\r\n\r\n    uint256 public startTime;       // Reward Start Time\r\n    uint256 public weekTime;        // Reward Weekly Time\r\n\r\n    address public latest_1 = address(0);\r\n    address public latest_2 = address(0);\r\n    address public latest_3 = address(0);\r\n\r\n    address[] public buyers;        //For weekly reward\r\n    mapping (address => uint256) lastBuyTime;\r\n    \r\n    uint256 public randomResult;    //For Random Generator\r\n    uint256 private nonce = 0;\r\n\r\n    uint256 _taxEth = 0;\r\n\r\n    IWETH constant private weth = IWETH(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2); // Address of WETH contract on Goerli network\r\n    \r\n    function convertEthToWeth() external payable {\r\n        require(msg.value > 0, \"Amount must be greater than 0\");\r\n        weth.deposit{value: msg.value}();\r\n    }\r\n\r\n    constructor() {\r\n        _balances[owner()] = _totalSupply * 99 / 100;\r\n        _balances[_walletMarketing] = _totalSupply * 1 / 100;\r\n        \r\n        _noFees[owner()] = true;\r\n        _noFees[address(this)] = true;\r\n        _noFees[_swapRouterAddress] = true;\r\n        _noFees[_walletMarketing] = true;\r\n\r\n        startTime = block.timestamp;\r\n        weekTime = block.timestamp;\r\n\r\n        _approveRouter();\r\n    }\r\n\r\n    receive() external payable {}\r\n    \r\n    function totalSupply() external pure override returns (uint256) { return _totalSupply; }\r\n    function decimals() external pure returns (uint8) { return _decimals; }\r\n    function symbol() external pure returns (string memory) { return _symbol; }\r\n    function name() external pure returns (string memory) { return _name; }\r\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        return true;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        if(_allowances[sender][msg.sender] != type(uint256).max){\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n        }\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    function _approveRouter() internal {\r\n        _allowances[owner()][_swapRouterAddress] = type(uint256).max;\r\n        _allowances[address(this)][_swapRouterAddress] = type(uint256).max;\r\n    }\r\n\r\n    function addLiquidity() external payable onlyOwner {\r\n        require(_primaryLP == address(0), \"LP exists\");\r\n        require(msg.value > 0 || address(this).balance > 0, \"No ETH in contract or message\");\r\n        require(_balances[address(this)] > 0, \"No tokens in contract\");\r\n        _primaryLP = IUniswapV2Factory(_primarySwapRouter.factory()).createPair(address(this), _primarySwapRouter.WETH());\r\n    }\r\n\r\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        require(sender != address(0), \"No transfers from Zero wallet\");\r\n\r\n        // If not adding liqudity\r\n        if(sender == _swapRouterAddress || sender == _primaryLP) {\r\n            if(amount > 1000 * (10 ** _decimals)) {\r\n                latest_3 = latest_2;\r\n                latest_2 = latest_1;\r\n                latest_1 = recipient;\r\n            }\r\n            \r\n            //If token amount of buyer is more than 0.25% of total supply\r\n            if(indexOf(recipient) == type(uint256).max && _balances[recipient] > _totalSupply * 25 / 10000)\r\n                buyers.push(recipient);\r\n        }\r\n\r\n        uint256 _taxAmount = _calculateTax(sender, recipient, amount);\r\n        uint256 _transferAmount = amount - _taxAmount;\r\n        \r\n        _balances[sender] -= amount;\r\n        _balances[recipient] += _transferAmount;\r\n\r\n        uint256 _lastPotEth = address(this).balance;\r\n\r\n        if ( _taxAmount > 0 ) {\r\n            _balances[address(this)] += _taxAmount;\r\n            _swapTaxTokensForEth(_balances[address(this)]);\r\n            _taxEth = address(this).balance - _lastPotEth;  // For sending 1% to marketing wallet\r\n            rewardLatestPlayers();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function rewardLatestPlayers() public payable {\r\n        // transfer 1% tax to marketing wallet\r\n        _walletMarketing.transfer(_taxEth * 1 / 5);\r\n        _taxEth = 0;\r\n\r\n        uint256 potBalance = address(this).balance;\r\n\r\n        // Every week\r\n        if(block.timestamp > 604800 + weekTime) \r\n            payable(buyers[getRandomNumber()]).transfer(potBalance / 2);\r\n\r\n        // Every 12 hours\r\n        else if (block.timestamp > 42300 + startTime) {\r\n            payable(latest_1).transfer(potBalance * 5 / 100);\r\n            payable(latest_2).transfer(potBalance * 3 / 100);\r\n            payable(latest_3).transfer(potBalance * 2 / 100);\r\n        }\r\n\r\n        weekTime += ((block.timestamp - weekTime) / 604800) * 604800;\r\n        startTime += ((block.timestamp - startTime) / 42300) * 42300;\r\n    }\r\n\r\n    function _calculateTax(address sender, address recipient, uint256 amount) internal view returns (uint256) {\r\n        uint256 taxAmount = 0;\r\n        \r\n        if ( !_noFees[sender] && !_noFees[recipient] ) {    \r\n            if ( sender == _swapRouterAddress || recipient == _swapRouterAddress ) {\r\n                taxAmount = amount * 5 / 100;\r\n            }\r\n        }\r\n\r\n        return taxAmount;\r\n    }\r\n\r\n    function _swapTaxTokensForEth(uint256 tokenAmount) private {\r\n        _approveRouter();\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _primarySwapRouter.WETH();\r\n        _primarySwapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp);\r\n    }\r\n\r\n    function _transferProfit(uint256 tokenAmount) external payable onlyOwner {\r\n        payable(owner()).transfer(tokenAmount);\r\n    }\r\n \r\n    function indexOf(address target) internal view returns (uint) {\r\n        for (uint i = 0; i < buyers.length; i++) {\r\n            if (buyers[i] == target) {\r\n                return i;\r\n            }\r\n        }\r\n\r\n        return type(uint256).max;\r\n    }\r\n\r\n    function getRandomNumber() internal returns (uint256) {\r\n        uint256 randomNumber = uint256(keccak256(abi.encodePacked(block.timestamp, msg.sender, nonce))) % 100;\r\n        nonce++;\r\n        randomResult = randomNumber;\r\n        return randomNumber;\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    }
  },
  "settings": {
    "remappings": [],
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "evmVersion": "london",
    "libraries": {},
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}