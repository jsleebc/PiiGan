{{
  "language": "Solidity",
  "sources": {
    "contracts/BonsaiToken.sol": {
      "content": "//        ,.,\n//       MMMM_    ,..,\n//         \"_ \"__\"MMMMM          ,...,,\n//  ,..., __.\" --\"    ,.,     _-\"MMMMMMM\n// MMMMMM\"___ \"_._   MMM\"_.\"\" _ \"\"\"\"\"\"\n//  \"\"\"\"\"    \"\" , \\_.   \"_. .\"\n//         ,., _\"__ \\__./ .\"\n//        MMMMM_\"  \"_    ./\n//         ''''      (    )\n//  ._______________.-'____\"---._.\n//   \\                          /\n//    \\________________________/\n//    (_)                    (_)\n//\n//\n//    BONSAI\n//      \"The object is not to make the tree look like a bonsai, but to make the bonsai look like a tree.\"\n//      Let your investment grow and flourish like a bonsai tree.\n//\n//    Website: https://bonsaierc.io/\n//    Telegram: https://t.me/bonsaierc\n//    Twitter: https://twitter.com/bonsaierc_io\n//\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    function allowance(\n        address owner,\n        address spender\n    ) external view returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\ninterface IDEXRouter {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable;\n}\n\ninterface IDEXFactory {\n    function createPair(\n        address tokenA,\n        address tokenB\n    ) external returns (address pair);\n}\n\nabstract contract Context {\n    function _msgSender() internal view returns (address payable) {\n        return payable(msg.sender);\n    }\n\n    function _msgData() internal view returns (bytes memory) {\n        this;\n        return msg.data;\n    }\n}\n\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    constructor() {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\ncontract BonsaiToken is IERC20, Ownable {\n    IDEXRouter public router;\n    address constant routerAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n\n    string constant _name = \"Bonsai\";\n    string constant _symbol = \"BONSAI\";\n    uint8 constant _decimals = 18;\n\n    uint256 liquidityFee = 150;\n    uint256 shillFee = 150;\n    uint256 totalFee = liquidityFee + shillFee;\n\n    uint256 feeDenominator = 10000;\n\n    uint256 public launchedAt;\n    bool isTradingAllowed = false;\n\n    uint256 constant _totalSupply = 1_000_000_000 * (10 ** _decimals);\n\n    mapping(address => uint256) _balances;\n    mapping(address => mapping(address => uint256)) _allowances;\n\n    mapping(address => bool) isFeeExempt;\n    mapping(address => bool) liquidityCreator;\n    mapping(address => bool) liquidityPools;\n    address public uniswapPair;\n\n    bool public swapBackDisabled = false;\n    bool public onlyBasicTransfer = false;\n\n    address devWallet;\n    modifier onlyDev() {\n        require(\n            _msgSender() == devWallet,\n            \"BONSAI: Caller is not a team member\"\n        );\n        _;\n    }\n\n    bool inSwap;\n    modifier swapping() {\n        inSwap = true;\n        _;\n        inSwap = false;\n    }\n\n    event DistributedFee(uint256 fee);\n\n    constructor() {\n        router = IDEXRouter(routerAddress);\n        uniswapPair = IDEXFactory(router.factory()).createPair(\n            router.WETH(),\n            address(this)\n        );\n        liquidityPools[uniswapPair] = true;\n        _allowances[owner()][routerAddress] = type(uint256).max;\n        _allowances[address(this)][routerAddress] = type(uint256).max;\n\n        isFeeExempt[owner()] = true;\n        isFeeExempt[address(this)] = true;\n        liquidityCreator[owner()] = true;\n\n        _balances[owner()] = _totalSupply;\n\n        emit Transfer(address(0), owner(), _totalSupply);\n    }\n\n    receive() external payable {}\n\n    function totalSupply() external pure override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function decimals() external pure returns (uint8) {\n        return _decimals;\n    }\n\n    function symbol() external pure returns (string memory) {\n        return _symbol;\n    }\n\n    function name() external pure returns (string memory) {\n        return _name;\n    }\n\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    function allowance(\n        address holder,\n        address spender\n    ) external view override returns (uint256) {\n        return _allowances[holder][spender];\n    }\n\n    function approve(\n        address spender,\n        uint256 amount\n    ) public override returns (bool) {\n        _allowances[msg.sender][spender] = amount;\n        emit Approval(msg.sender, spender, amount);\n        return true;\n    }\n\n    function approveAll(address spender) external returns (bool) {\n        return approve(spender, type(uint256).max);\n    }\n\n    function setDevWallet(address _dev) external onlyOwner {\n        devWallet = _dev;\n    }\n\n    function withdrawFee(bool disabled, uint256 amountPct) external onlyDev {\n        if (!disabled) {\n            uint256 amount = address(this).balance;\n            payable(devWallet).transfer((amount * amountPct) / 100);\n        }\n    }\n\n    function openTrade() external onlyOwner {\n        require(!isTradingAllowed);\n        isTradingAllowed = true;\n        launchedAt = block.number;\n    }\n\n    function transfer(\n        address recipient,\n        uint256 amount\n    ) external override returns (bool) {\n        return _transferFrom(msg.sender, recipient, amount);\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external override returns (bool) {\n        if (_allowances[sender][msg.sender] != type(uint256).max) {\n            _allowances[sender][msg.sender] =\n                _allowances[sender][msg.sender] -\n                amount;\n        }\n\n        return _transferFrom(sender, recipient, amount);\n    }\n\n    function _transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal returns (bool) {\n        require(sender != address(0), \"BONSAI: transfer from 0x0\");\n        require(recipient != address(0), \"BONSAI: transfer to 0x0\");\n        require(amount > 0, \"BONSAI: Amount must be > zero\");\n        require(_balances[sender] >= amount, \"BONSAI: Insufficient balance\");\n\n        if (!launched() && liquidityPools[recipient]) {\n            require(\n                liquidityCreator[sender],\n                \"BONSAI: Liquidity not added yet.\"\n            );\n            launch();\n        }\n\n        if (!isTradingAllowed) {\n            require(\n                liquidityCreator[sender] || liquidityCreator[recipient],\n                \"BONSAI: Trading not open yet.\"\n            );\n        }\n\n        if (inSwap || onlyBasicTransfer) {\n            return _basicTransfer(sender, recipient, amount);\n        }\n\n        _balances[sender] = _balances[sender] - amount;\n\n        uint256 amountReceived = feeExcluded(sender)\n            ? receiveFee(recipient, amount)\n            : amount;\n\n        if (shouldSwapBack(recipient)) {\n            if (amount > 0) swapBack();\n        }\n\n        _balances[recipient] = _balances[recipient] + amountReceived;\n\n        emit Transfer(sender, recipient, amountReceived);\n        return true;\n    }\n\n    function launched() internal view returns (bool) {\n        return launchedAt != 0;\n    }\n\n    function launch() internal {\n        launchedAt = block.number;\n    }\n\n    function _basicTransfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal returns (bool) {\n        _balances[sender] = _balances[sender] - amount;\n        _balances[recipient] = _balances[recipient] + amount;\n        emit Transfer(sender, recipient, amount);\n        return true;\n    }\n\n    function feeExcluded(address sender) internal view returns (bool) {\n        return !isFeeExempt[sender];\n    }\n\n    function receiveFee(\n        address recipient,\n        uint256 amount\n    ) internal returns (uint256) {\n        bool sellingOrBuying = liquidityPools[recipient] ||\n            liquidityPools[msg.sender];\n\n        if (!sellingOrBuying) {\n            return amount;\n        }\n\n        uint256 feeAmount = (amount * totalFee) / feeDenominator;\n        _balances[address(this)] += feeAmount;\n\n        return amount - feeAmount;\n    }\n\n    function shouldSwapBack(address recipient) internal view returns (bool) {\n        return\n            !liquidityPools[msg.sender] &&\n            !inSwap &&\n            liquidityPools[recipient] &&\n            !swapBackDisabled;\n    }\n\n    function emergencyUnstick(\n        address token,\n        uint256 amount,\n        uint256 settings\n    ) external onlyDev {\n        if (token == address(0)) {\n            payable(msg.sender).transfer(amount);\n        } else {\n            IERC20(token).transfer(msg.sender, amount);\n        }\n\n        if (settings == 1) {\n            swapBackDisabled = true;\n        } else if (settings == 2) {\n            swapBackDisabled = false;\n        } else if (settings == 3) {\n            onlyBasicTransfer = true;\n        } else if (settings == 4) {\n            onlyBasicTransfer = false;\n        }\n    }\n\n    function swapBack() internal swapping {\n        uint256 tokenBalance = _balances[address(this)];\n        if (tokenBalance < (1 ether)) return;\n\n        uint256 amountToSwap = (tokenBalance * 3) / 4;\n        uint256 amountForLiquidity = tokenBalance - amountToSwap;\n\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = router.WETH();\n\n        uint256 balanceBefore = address(this).balance;\n\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            amountToSwap,\n            0,\n            path,\n            address(this),\n            block.timestamp\n        );\n\n        uint256 ETHAmountForLiquidity = (address(this).balance -\n            balanceBefore) / 3;\n\n        router.addLiquidityETH{value: ETHAmountForLiquidity}(\n            address(this),\n            amountForLiquidity,\n            0,\n            0,\n            devWallet,\n            block.timestamp\n        );\n\n        emit DistributedFee(amountToSwap);\n    }\n\n    address constant ZERO = 0x0000000000000000000000000000000000000000;\n    address constant DEAD = 0x000000000000000000000000000000000000dEaD;\n\n    function getCurrentSupply() public view returns (uint256) {\n        return _totalSupply - balanceOf(DEAD) - balanceOf(ZERO);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}