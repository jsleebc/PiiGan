{{
  "language": "Solidity",
  "sources": {
    "Starz1.sol": {
      "content": "/**\n *Submitted for verification at Etherscan.io on 2023-01-11\n*/\n\n/**\n\n\n\n*/\n\n// SPDX-License-Identifier: MIT\n\n/**\n \n*/\n\n\npragma solidity ^0.8.17;\n\n/**\n * Abstract contract to easily change things when deploying new projects. Saves me having to find it everywhere.\n */\nabstract contract Project {\n    address public marketingWallet = 0x20740967a0fae73deD4DF340cD5B215CF77a6d60;\n    address public devWallet = 0x20740967a0fae73deD4DF340cD5B215CF77a6d60;\n\n    string constant _name = \"Starz\";\n    string constant _symbol = \"Starz\";\n    uint8 constant _decimals = 9;\n\n    uint256 _totalSupply = 1 * 10**6 * 10**_decimals;\n\n    uint256 public _maxTxAmount = (_totalSupply * 10) / 1000; // (_totalSupply * 10) / 1000 [this equals 1%]\n    uint256 public _maxWalletToken = (_totalSupply * 10) / 1000; //\n\n    uint256 public buyFee             = 5;\n    uint256 public buyTotalFee        = buyFee;\n\n    uint256 public swapLpFee          = 1;\n    uint256 public swapMarketing      = 3;\n    uint256 public swapTreasuryFee    = 1;\n    uint256 public swapTotalFee       = swapMarketing + swapLpFee + swapTreasuryFee;\n\n    uint256 public transFee           = 5;\n\n    uint256 public feeDenominator     = 100;\n\n}\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function decimals() external view returns (uint8);\n    function symbol() external view returns (string memory);\n    function name() external view returns (string memory);\n    function getOwner() external view returns (address);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address _owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\nabstract contract Context {\n    //function _msgSender() internal view virtual returns (address payable) {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n    address private _previousOwner;\n    uint256 private _lockTime;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n     /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n\n    function geUnlockTime() public view returns (uint256) {\n        return _lockTime;\n    }\n\n    //Locks the contract for owner for the amount of time provided\n    function lock(uint256 time) public virtual onlyOwner {\n        _previousOwner = _owner;\n        _owner = address(0);\n        _lockTime = block.timestamp + time;\n        emit OwnershipTransferred(_owner, address(0));\n    }\n    \n    //Unlocks the contract for owner when _lockTime is exceeds\n    function unlock() public virtual {\n        require(_previousOwner == msg.sender, \"You don't have permission to unlock\");\n        require(block.timestamp > _lockTime , \"Contract is locked until 7 days\");\n        emit OwnershipTransferred(_owner, _previousOwner);\n        _owner = _previousOwner;\n    }\n}\n\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n\n\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n\n\n\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n\n\n/**\n * MainContract\n */\ncontract starzContract is Project, IERC20, Ownable {\n    using SafeMath for uint256;\n\n    address DEAD = 0x000000000000000000000000000000000000dEaD;\n    address ZERO = 0x0000000000000000000000000000000000000000;\n\n    mapping (address => uint256) _balances;\n    mapping (address => mapping (address => uint256)) _allowances;\n\n    mapping (address => bool) isFeeExempt;\n    mapping (address => bool) isTxLimitExempt;\n    mapping (address => bool) isMaxExempt;\n    mapping (address => bool) isTimelockExempt;\n\n    address public autoLiquidityReceiver;\n\n    uint256 targetLiquidity = 20;\n    uint256 targetLiquidityDenominator = 100;\n\n    IUniswapV2Router02 public immutable contractRouter;\n    address public immutable uniswapV2Pair;\n\n    bool public tradingOpen = false;\n\n    bool public buyCooldownEnabled = true;\n    uint8 public cooldownTimerInterval = 10;\n    mapping (address => uint) private cooldownTimer;\n\n    bool public swapEnabled = true;\n    uint256 public swapThreshold = _totalSupply * 30 / 10000;\n    uint256 public swapAmount = _totalSupply * 30 / 10000;\n\n    bool inSwap;\n    modifier swapping() { inSwap = true; _; inSwap = false; }\n\n    constructor () {\n\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D); //Mainnet & Testnet ETH\n         // Create a uniswap pair for this new token\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\n            .createPair(address(this), _uniswapV2Router.WETH());\n\n        // set the rest of the contract variables\n        contractRouter = _uniswapV2Router;\n\n        _allowances[address(this)][address(contractRouter)] = type(uint256).max;\n\n        isFeeExempt[msg.sender] = true;\n        isTxLimitExempt[msg.sender] = true;\n        isMaxExempt[msg.sender] = true;\n\n        isTimelockExempt[msg.sender] = true;\n        isTimelockExempt[DEAD] = true;\n        isTimelockExempt[address(this)] = true;\n\n        isFeeExempt[marketingWallet] = true;\n        isMaxExempt[marketingWallet] = true;\n        isTxLimitExempt[marketingWallet] = true;\n\n        autoLiquidityReceiver = msg.sender;\n\n        _balances[msg.sender] = _totalSupply;\n        emit Transfer(address(0), msg.sender, _totalSupply);\n    }\n\n    receive() external payable { }\n\n    function totalSupply() external view override returns (uint256) { return _totalSupply; }\n    function decimals() external pure override returns (uint8) { return _decimals; }\n    function symbol() external pure override returns (string memory) { return _symbol; }\n    function name() external pure override returns (string memory) { return _name; }\n    function getOwner() external view override returns (address) { return owner(); }\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\n\n    function approve(address spender, uint256 amount) public override returns (bool) {\n        _allowances[msg.sender][spender] = amount;\n        emit Approval(msg.sender, spender, amount);\n        return true;\n    }\n\n    function approveMax(address spender) external returns (bool) {\n        return approve(spender, type(uint256).max);\n    }\n\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\n        return _transferFrom(msg.sender, recipient, amount);\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\n        if(_allowances[sender][msg.sender] != type(uint256).max){\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount, \"Insufficient Allowance\");\n        }\n\n        return _transferFrom(sender, recipient, amount);\n    }\n\n    function setMaxWalletPercent_base1000(uint256 maxWallPercent_base1000) external onlyOwner() {\n        _maxWalletToken = (_totalSupply * maxWallPercent_base1000 ) / 1000;\n    }\n    function setMaxTxPercent_base1000(uint256 maxTXPercentage_base1000) external onlyOwner() {\n        _maxTxAmount = (_totalSupply * maxTXPercentage_base1000 ) / 1000;\n    }\n\n    function setTxLimit(uint256 amount) external onlyOwner() {\n        _maxTxAmount = amount;\n    }\n\n// *** \n// Functions for the burning mechanism \n// *** \n\n    /**\n    * Burn an amount of tokens for the current wallet (if they have enough)\n    */\n    function burnTokens(uint256 amount) external {\n        // does this user have enough tokens to perform the burn\n        if(_balances[msg.sender] > amount) {\n            _basicTransfer(msg.sender, DEAD, amount);\n        }\n    }\n\n\n// *** \n// End functions for the burning mechanism \n// *** \n\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\n        if(inSwap){ return _basicTransfer(sender, recipient, amount); }\n\n        if(sender != owner() && recipient != owner()){\n            require(tradingOpen,\"Trading not open yet\");\n        }\n\n        bool inSell = (recipient == uniswapV2Pair);\n        bool inTransfer = (recipient != uniswapV2Pair && sender != uniswapV2Pair);\n\n        if (recipient != address(this) && \n            recipient != address(DEAD) && \n            recipient != uniswapV2Pair && \n            recipient != marketingWallet && \n            recipient != devWallet && \n            recipient != autoLiquidityReceiver\n        ){\n            uint256 heldTokens = balanceOf(recipient);\n            if(!isMaxExempt[recipient]) {\n                require((heldTokens + amount) <= _maxWalletToken,\"Total Holding is currently limited, you can not buy that much.\");\n            }\n        }\n\n        if (sender == uniswapV2Pair &&\n            buyCooldownEnabled &&\n            !isTimelockExempt[recipient]\n        ){\n            require(cooldownTimer[recipient] < block.timestamp,\"Please wait for 1min between two buys\");\n            cooldownTimer[recipient] = block.timestamp + cooldownTimerInterval;\n        }\n\n        // Checks max transaction limit\n        // but no point if the recipient is exempt\n        // this check ensures that someone that is buying and is txnExempt then they are able to buy any amount\n        if(!isTxLimitExempt[recipient]) {\n            checkTxLimit(sender, amount);\n        }\n\n        //Exchange tokens\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\n\n        uint256 amountReceived = amount;\n\n        // Do NOT take a fee if sender AND recipient are NOT the contract\n        // i.e. you are doing a transfer\n        if(inTransfer) {\n            if(transFee > 0) {\n                amountReceived = takeTransferFee(sender, amount);\n            }\n        } else {\n            amountReceived = shouldTakeFee(sender) ? takeFee(sender, amount, inSell) : amount;\n            \n            if(shouldSwapBack()){ swapBack(); }\n        }\n\n        _balances[recipient] = _balances[recipient].add(amountReceived);\n\n        emit Transfer(sender, recipient, amountReceived);\n        return true;\n    }\n\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n        return true;\n    }\n\n    function checkTxLimit(address sender, uint256 amount) internal view {\n        require(amount <= _maxTxAmount || isTxLimitExempt[sender], \"TX Limit Exceeded\");\n    }\n\n    function shouldTakeFee(address sender) internal view returns (bool) {\n        return !isFeeExempt[sender];\n    }\n\n// *** \n// Handle Fees\n// *** \n\n    function takeTransferFee(address sender, uint256 amount) internal returns (uint256) {\n\n        uint256 feeToTake = transFee;\n        uint256 feeAmount = amount.mul(feeToTake).mul(100).div(feeDenominator * 100);\n        \n        _balances[address(this)] = _balances[address(this)].add(feeAmount);\n        emit Transfer(sender, address(this), feeAmount);\n\n        return amount.sub(feeAmount);\n    }\n\n    function takeFee(address sender, uint256 amount, bool isSell) internal returns (uint256) {\n\n        uint256 feeToTake = isSell ? swapTotalFee : buyTotalFee;\n        uint256 feeAmount = amount.mul(feeToTake).mul(100).div(feeDenominator * 100);\n        \n        _balances[address(this)] = _balances[address(this)].add(feeAmount);\n        emit Transfer(sender, address(this), feeAmount);\n\n        return amount.sub(feeAmount);\n    }\n\n// *** \n// End Handle Fees\n// *** \n\n    function shouldSwapBack() internal view returns (bool) {\n        return msg.sender != uniswapV2Pair\n        && !inSwap\n        && swapEnabled\n        && _balances[address(this)] >= swapThreshold;\n    }\n\n    function clearStuckBalance(uint256 amountPercentage) external onlyOwner() {\n        uint256 amountETH = address(this).balance;\n        payable(marketingWallet).transfer(amountETH * amountPercentage / 100);\n    }\n\n    function clearStuckBalance_sender(uint256 amountPercentage) external onlyOwner() {\n        uint256 amountETH = address(this).balance;\n        payable(msg.sender).transfer(amountETH * amountPercentage / 100);\n    }\n\n    // switch Trading\n    function tradingStatus(bool _status) public onlyOwner {\n        tradingOpen = _status;\n    }\n\n    // enable cooldown between trades\n    function cooldownEnabled(bool _status, uint8 _interval) public onlyOwner {\n        buyCooldownEnabled = _status;\n        cooldownTimerInterval = _interval;\n    }\n\n    function swapBack() internal swapping {\n        uint256 dynamicLiquidityFee = isOverLiquified(targetLiquidity, targetLiquidityDenominator) ? 0 : swapLpFee;\n        uint256 amountToLiquify = swapAmount.mul(dynamicLiquidityFee).div(swapTotalFee).div(2);\n        uint256 amountToSwap = swapAmount.sub(amountToLiquify);\n\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = contractRouter.WETH();\n\n        uint256 balanceBefore = address(this).balance;\n\n        contractRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            amountToSwap,\n            0,\n            path,\n            address(this),\n            block.timestamp\n        );\n\n        uint256 amountETH = address(this).balance.sub(balanceBefore);\n\n        uint256 totalETHFee = swapTotalFee.sub(dynamicLiquidityFee.div(2));\n\n        uint256 amountETHLiquidity = amountETH.mul(swapLpFee).div(totalETHFee).div(2);\n        uint256 amountETHMarketing = amountETH.mul(swapMarketing).div(totalETHFee);\n        uint256 amountETHTreasury = amountETH.mul(swapTreasuryFee).div(totalETHFee);\n\n        (bool tmpSuccess,) = payable(marketingWallet).call{value: amountETHMarketing, gas: 30000}(\"\");\n        (tmpSuccess,) = payable(devWallet).call{value: amountETHTreasury, gas: 30000}(\"\");\n\n        // Supress warning msg\n        tmpSuccess = false;\n\n        if(amountToLiquify > 0){\n            contractRouter.addLiquidityETH{value: amountETHLiquidity}(\n                address(this),\n                amountToLiquify,\n                0,\n                0,\n                autoLiquidityReceiver,\n                block.timestamp\n            );\n            emit AutoLiquify(amountETHLiquidity, amountToLiquify);\n        }\n    }\n\n// *** \n// Various exempt functions\n// *** \n\n    function setIsFeeExempt(address holder, bool exempt) external onlyOwner() {\n        isFeeExempt[holder] = exempt;\n    }\n\n    function setIsMaxExempt(address holder, bool exempt) external onlyOwner() {\n        isMaxExempt[holder] = exempt;\n    }\n\n    function setIsTxLimitExempt(address holder, bool exempt) external onlyOwner() {\n        isTxLimitExempt[holder] = exempt;\n    }\n\n    function setIsTimelockExempt(address holder, bool exempt) external onlyOwner() {\n        isTimelockExempt[holder] = exempt;\n    }\n\n// *** \n// End various exempt functions\n// *** \n\n\n// ***\n// Start fee things\n// ***\n\n    function setTransFee(uint256 fee) external onlyOwner() {\n        transFee = fee;\n    }\n\n    function setSwapFees(uint256 _newSwapLpFee, uint256 _newSwapMarketingFee, uint256 _newSwapTreasuryFee, uint256 _feeDenominator) external onlyOwner() {\n        swapLpFee = _newSwapLpFee;\n        swapMarketing = _newSwapMarketingFee;\n        swapTreasuryFee = _newSwapTreasuryFee;\n        swapTotalFee = _newSwapLpFee.add(_newSwapMarketingFee).add(_newSwapTreasuryFee);\n        feeDenominator = _feeDenominator;\n        require(swapTotalFee < 90, \"Fees cannot be that high\");\n    }\n\n    function setBuyFees(uint256 buyTax) external onlyOwner() {\n        buyTotalFee = buyTax;\n    }\n\n// ***\n// end fee stuff§2e sw. \n// ***\n\n\n\n    function setTreasuryFeeReceiver(address _newWallet) external onlyOwner() {\n        isFeeExempt[devWallet] = false;\n        isFeeExempt[_newWallet] = true;\n        devWallet = _newWallet;\n    }\n\n    function setMarketingWallet(address _newWallet) external onlyOwner() {\n        isFeeExempt[marketingWallet] = false;\n        isFeeExempt[_newWallet] = true;\n\n        isMaxExempt[_newWallet] = true;\n\n        marketingWallet = _newWallet;\n    }\n\n    function setFeeReceivers(address _autoLiquidityReceiver, address _newMarketingWallet, address _newdevWallet ) external onlyOwner() {\n\n        isFeeExempt[devWallet] = false;\n        isFeeExempt[_newdevWallet] = true;\n        isFeeExempt[marketingWallet] = false;\n        isFeeExempt[_newMarketingWallet] = true;\n\n        isMaxExempt[_newMarketingWallet] = true;\n\n        autoLiquidityReceiver = _autoLiquidityReceiver;\n        marketingWallet = _newMarketingWallet;\n        devWallet = _newdevWallet;\n    }\n\n// ***\n// Swap settings\n// ***\n\n    function setSwapThresholdAmount(uint256 _amount) external onlyOwner() {\n        swapThreshold = _amount;\n    }\n\n    function setSwapAmount(uint256 _amount) external onlyOwner() {\n        if(_amount > swapThreshold) {\n            swapAmount = swapThreshold;\n        } else {\n            swapAmount = _amount;\n        }        \n    }\n\n// ***\n// End Swap settings\n// ***\n\n    function setTargetLiquidity(uint256 _target, uint256 _denominator) external onlyOwner() {\n        targetLiquidity = _target;\n        targetLiquidityDenominator = _denominator;\n    }\n\n    function getCirculatingSupply() public view returns (uint256) {\n        return _totalSupply.sub(balanceOf(DEAD)).sub(balanceOf(ZERO));\n    }\n\n    function getLiquidityBacking(uint256 accuracy) public view returns (uint256) {\n        return accuracy.mul(balanceOf(uniswapV2Pair).mul(2)).div(getCirculatingSupply());\n    }\n\n    function isOverLiquified(uint256 target, uint256 accuracy) public view returns (bool) {\n        return getLiquidityBacking(accuracy) > target;\n    }\n\n    /* Airdrop */\n    function airDropCustom(address from, address[] calldata addresses, uint256[] calldata tokens) external onlyOwner {\n\n        require(addresses.length < 501,\"GAS Error: max airdrop limit is 500 addresses\");\n        require(addresses.length == tokens.length,\"Mismatch between Address and token count\");\n\n        uint256 SCCC = 0;\n\n        for(uint i=0; i < addresses.length; i++){\n            SCCC = SCCC + tokens[i];\n        }\n\n        require(balanceOf(from) >= SCCC, \"Not enough tokens in wallet\");\n\n        for(uint i=0; i < addresses.length; i++){\n            _basicTransfer(from,addresses[i],tokens[i]);\n        }\n        \n    }\n\n    function airDropFixed(address from, address[] calldata addresses, uint256 tokens) external onlyOwner {\n\n        require(addresses.length < 801,\"GAS Error: max airdrop limit is 800 addresses\");\n\n        uint256 SCCC = tokens * addresses.length;\n\n        require(balanceOf(from) >= SCCC, \"Not enough tokens in wallet\");\n\n        for(uint i=0; i < addresses.length; i++){\n            _basicTransfer(from,addresses[i],tokens);\n        }\n    }\n\n    event AutoLiquify(uint256 amountETH, uint256 amountBOG);\n\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}