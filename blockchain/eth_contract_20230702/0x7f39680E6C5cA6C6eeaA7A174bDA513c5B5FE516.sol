{"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}"},"IUniswapV2Factory.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}"},"PhantaToken.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\n/**\r\n    PhantaToken\r\n      - $PHANTA is a passive income solution featured with HoldFarm, LP-Incentives, Deflationary, Referral, Anti-Bot, etc.\r\n      - The bearish market makes passive income even sweeter.\r\n\r\n    Website:  https://www.phanta.club/\r\n    Twitter:  https://twitter.com/phantatoken_eth\r\n    Telegram: https://t.me/phantaclub\r\n\r\n**/\r\n\r\nimport \"./IERC20.sol\";\r\nimport \"./IUniswapV2Factory.sol\";\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n}\r\n\r\nlibrary MerkleProof {\r\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\r\n        return processProof(proof, leaf) == root;\r\n    }\r\n\r\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\r\n        bytes32 computedHash = leaf;\r\n        for (uint256 i = 0; i \u003c proof.length; i++) {\r\n            computedHash = _hashPair(computedHash, proof[i]);\r\n        }\r\n        return computedHash;\r\n    }\r\n\r\n    // Sorted Pair Hash\r\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\r\n        return a \u003c b ? keccak256(abi.encodePacked(a, b)) : keccak256(abi.encodePacked(b, a));\r\n    }\r\n}\r\n\r\ncontract PhantaToken is Ownable, IERC20 {\r\n    string constant public override name = \"Phanta Club\";\r\n    string constant public override symbol = \"PHANTA\";\r\n    uint8 constant public override decimals = 3;\r\n    uint256 immutable public override totalSupply;\r\n\r\n    mapping(address =\u003e mapping(address =\u003e uint256)) public override allowance;\r\n\r\n    // DIVIDEND: WE Redesigned Dividend, Less Gas Used.\r\n    mapping(address =\u003e uint256) private _balanceOf;\r\n    uint8 private _decimals = 11;\r\n    uint256 private _dividendSupply;\r\n\r\n    // Uni-v2 LP\r\n    address public lp;\r\n\r\n    // ANTI-BOT: ATTENTION! WE KILL FIRST 3 BLOCK BUYERS!\r\n    uint256 public startBlock = 0;\r\n    mapping(address =\u003e bool) public banned;\r\n\r\n    // ANTI-WHALE: REAL FAIR LAUNCH! Buy Limits At First 100 BLOCKs.\r\n    uint256 public maxBuyingAmount = 10000000 * 10 ** decimals;\r\n    uint256 public maxHoldingAmount = 52000000 * 10 ** decimals;\r\n\r\n    // Your Referer \u0026 Rewards\r\n    mapping(address =\u003e address) public refererOf;\r\n    mapping(address =\u003e uint256) public rewards;\r\n\r\n    // AIRDROP: for phantabear holders\r\n    bytes32 immutable public mRoot;\r\n    mapping(address =\u003e bool) public claimed;\r\n\r\n    constructor(uint256 supply, bytes32 merkleroot){\r\n    \ttotalSupply = supply * 10 ** decimals;\r\n\r\n        // DIVIDEND\r\n        _balanceOf[msg.sender] = 100 * 10 ** _decimals;\r\n        _dividendSupply = totalSupply;\r\n        emit Transfer(address(0), msg.sender, totalSupply);\r\n\r\n        // Mainnet: Uniswap Router \u0026 WETH\r\n        IUniswapV2Router01 swapRouter = IUniswapV2Router01(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        address weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n        lp = IUniswapV2Factory(swapRouter.factory()).createPair(address(this), weth);\r\n\r\n        // AIRDROP: merkle tree\r\n        mRoot = merkleroot;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external virtual override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external virtual override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external virtual override returns (bool) {\r\n        uint256 currentAllowance = allowance[sender][msg.sender];\r\n        require(currentAllowance \u003e= amount, \"ERC20: transfer amount exceeds allowance\");\r\n\r\n        _transfer(sender, recipient, amount);\r\n\r\n        unchecked {\r\n            _approve(sender, msg.sender, currentAllowance - amount);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256){\r\n        return p2a(_balanceOf[account]);\r\n    }\r\n\r\n    function p2a(uint256 p) private view returns (uint256) {\r\n        return p * _dividendSupply / 100 / 10 ** _decimals ;\r\n    }\r\n\r\n    function a2p(uint256 a) private view returns (uint256) {\r\n        return (a * 100 * 10 ** _decimals) / _dividendSupply;\r\n    }\r\n\r\n    // Uniswap Spender: 0x000000000022d473030f116ddee9f6b43ac78ba3\r\n    function _approve( address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        allowance[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"Transfer from the zero address\");\r\n\r\n        // ANTI-BOT: ATTENTION! WE KILL FIRST THREE BLOCK BUYERS!\r\n        require(!banned[from] \u0026\u0026 !banned[to], \"Banned Account\");\r\n\r\n        // check balance\r\n        uint256 p = a2p(amount);\r\n        require(_balanceOf[from] \u003e= p, \"ERC20: transfer amount exceeds balance\");\r\n\r\n        bool tax = false;\r\n        if (from == lp || to == lp) {\r\n            if (startBlock == 0) {// Trading starting...\r\n                startBlock = block.number;\r\n            } else if (startBlock \u003e= block.number - 3) {// ANTI-BOT\r\n                tax = true;\r\n                if (to != lp) {\r\n                    banned[to] = true;\r\n                }\r\n            } else if (startBlock \u003e= block.number - 100) {// Fair Launch, DNOT BUY TOO MUCH\r\n                tax = true;\r\n                if (from == lp) { // Buy Order\r\n                    require((amount \u003c= maxBuyingAmount) \u0026\u0026 (balanceOf(to) + amount \u003c= maxHoldingAmount), \"Anti-WHALE: Plese Buy Later.\" );\r\n                }\r\n            } else {\r\n                tax = true;\r\n            }\r\n\r\n        }\r\n\r\n        // Token Transfer\r\n        _balanceOf[from] -= p;\r\n        if (tax) {\r\n            uint256 p_dividend = p / 100;\r\n            uint256 a_dividend = amount / 100;\r\n\r\n            p -= p_dividend * 2;\r\n            amount -= a_dividend * 2;\r\n\r\n            // Dividend for holders\r\n            _balanceOf[address(0)] += p_dividend;\r\n            _dividendSupply += a_dividend;\r\n            emit Transfer(from, address(0), a_dividend);\r\n\r\n            // Dividend for LP or referer\r\n            address referer = (refererOf[from] == address(0)) ? refererOf[to] : refererOf[from];\r\n            if (referer != address(0)) {\r\n                _balanceOf[referer] += p_dividend;\r\n                rewards[referer] += a_dividend;\r\n                emit Transfer(from, referer, a_dividend);\r\n            } else {\r\n                _balanceOf[lp] += p_dividend;\r\n                emit Transfer(from, lp, a_dividend);\r\n            }\r\n            \r\n        }\r\n        _balanceOf[to] += p;\r\n        emit Transfer(from, to, amount);\r\n    }\r\n\r\n    // Referral Program\r\n    function activate(address referer) external returns (bool) {\r\n        require(referer != msg.sender, \"Referer cannot be yourself.\");\r\n        require(refererOf[msg.sender] == address(0), \"You had set referer already.\");\r\n        refererOf[msg.sender] = referer;\r\n        return true;\r\n    }\r\n\r\n    // AIRDROP to PHANTABEAR holders\r\n    function claim(uint16 amount, bytes32[] memory proof) external returns (bool res) {\r\n        address account = msg.sender;\r\n        require(!claimed[account], \"This Account had claimed already.\");\r\n\r\n        // calculate leaf \u0026 verify\r\n        bytes32 leaf = keccak256(abi.encodePacked(account, amount));\r\n        require(MerkleProof.verify(proof, mRoot, leaf), \"Proof not Passed.\");\r\n\r\n        // 10000 Tokens per NFT\r\n        _transfer(address(this), account, uint256(amount) * 10000 * 10 ** decimals);\r\n        claimed[account] = true;\r\n        return true;\r\n    }\r\n\r\n}"}}