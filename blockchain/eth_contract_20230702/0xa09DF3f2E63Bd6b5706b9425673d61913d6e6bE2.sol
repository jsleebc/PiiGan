{{
  "language": "Solidity",
  "sources": {
    "contracts/FarmToken_v1.sol": {
      "content": "/**\n\"ABCDE - $ABCDE\"\n\nIn the magical land of crypto, there emerged a project called $ABCDE. \nWith a mischievous wink and a sprinkle of childhood, $ABCDE brought memes to life, \nuniting crypto enthusiasts with laughter and joy. \nTogether, degens' inner child laughed their way to the moon, one alphabet meme at a time.\n\n\nSOCIALS:\nTelegram: https://t.me/abcde_eth\nTwitter: https://twitter.com/ABCDEerc20\nWebsite: https://abcde-erc20.com\n\n\n*/\n\n\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\n\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {return a + b;}\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {return a - b;}\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {return a * b;}\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {return a / b;}\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {return a % b;}\n    \n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {uint256 c = a + b; if(c < a) return(false, 0); return(true, c);}}\n\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {if(b > a) return(false, 0); return(true, a - b);}}\n\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {if (a == 0) return(true, 0); uint256 c = a * b;\n        if(c / a != b) return(false, 0); return(true, c);}}\n\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {if(b == 0) return(false, 0); return(true, a / b);}}\n\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {if(b == 0) return(false, 0); return(true, a % b);}}\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked{require(b <= a, errorMessage); return a - b;}}\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked{require(b > 0, errorMessage); return a / b;}}\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked{require(b > 0, errorMessage); return a % b;}}}\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function decimals() external view returns (uint8);\n    function symbol() external view returns (string memory);\n    function name() external view returns (string memory);\n    function getOwner() external view returns (address);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address _owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);}\n\nabstract contract Ownable {\n    address internal owner;\n    constructor(address _owner) {owner = _owner;}\n    modifier onlyOwner() {require(isOwner(msg.sender), \"!OWNER\"); _;}\n    function isOwner(address account) public view returns (bool) {return account == owner;}\n    function transferOwnership(address payable adr) public onlyOwner {owner = adr; emit OwnershipTransferred(adr);}\n    event OwnershipTransferred(address owner);\n}\n\ninterface IFactory{\n        function createPair(address tokenA, address tokenB) external returns (address pair);\n        function getPair(address tokenA, address tokenB) external view returns (address pair);\n}\n\ninterface IRouter {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline) external;\n}\n\ncontract ABCDE is IERC20, Ownable {\n    using SafeMath for uint256;\n    string private constant _name = 'ABCDE';\n    string private constant _symbol = 'ABCDE';\n    uint8 private constant _decimals = 9;\n    uint256 private _totalSupply = 2600000 * (10 ** _decimals);\n    uint256 private _maxTxAmountPercent = 200; // 10000;\n    uint256 private _maxTransferPercent = 200;\n    uint256 private _maxWalletPercent = 300;\n    mapping (address => uint256) _balances;\n    mapping (address => mapping (address => uint256)) private _allowances;\n    mapping (address => bool) public isFeeExempt;\n    mapping (address => bool) private isBot;\n    IRouter router;\n    address public pair;\n    bool private tradingAllowed = false;\n    uint256 private liquidityFee = 0;\n    uint256 private marketingFee = 0;\n    uint256 private developmentFee = 1000;\n    uint256 private burnFee = 0;\n    uint256 private totalFee = 2200;\n    uint256 private sellFee = 5000;\n    uint256 private transferFee = 9000;\n    uint256 private denominator = 10000;\n    bool private swapEnabled = true;\n    uint256 private swapTimes;\n    bool private swapping;\n    uint256 swapAmount = 4;\n    uint256 private swapThreshold = ( _totalSupply * 1000 ) / 100000;\n    uint256 private minTokenAmount = ( _totalSupply * 10 ) / 100000;\n    modifier lockTheSwap {swapping = true; _; swapping = false;}\n\n    address internal constant DEAD = 0x000000000000000000000000000000000000dEaD;\n    address internal constant development_receiver = 0x1A93f50192571130A4812dD5e474188E27273b9E; \n    address internal constant marketing_receiver = 0x1A93f50192571130A4812dD5e474188E27273b9E;\n    address internal constant liquidity_receiver = 0x1A93f50192571130A4812dD5e474188E27273b9E;\n\n    constructor() Ownable(msg.sender) {\n        IRouter _router = IRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n        address _pair = IFactory(_router.factory()).createPair(address(this), _router.WETH());\n        router = _router;\n        pair = _pair;\n        isFeeExempt[address(this)] = true;\n        isFeeExempt[liquidity_receiver] = true;\n        isFeeExempt[marketing_receiver] = true;\n        isFeeExempt[msg.sender] = true;\n        _balances[msg.sender] = _totalSupply;\n        emit Transfer(address(0), msg.sender, _totalSupply);\n    }\n\n    receive() external payable {}\n    function name() public pure returns (string memory) {return _name;}\n    function symbol() public pure returns (string memory) {return _symbol;}\n    function decimals() public pure returns (uint8) {return _decimals;}\n    function startTrading() external onlyOwner {tradingAllowed = true;}\n    function getOwner() external view override returns (address) { return owner; }\n    function balanceOf(address account) public view override returns (uint256) {return _balances[account];}\n    function transfer(address recipient, uint256 amount) public override returns (bool) {_transfer(msg.sender, recipient, amount);return true;}\n    function allowance(address owner, address spender) public view override returns (uint256) {return _allowances[owner][spender];}\n    function isCont(address addr) internal view returns (bool) {uint size; assembly { size := extcodesize(addr) } return size > 0; }\n    function setisBot(address _address, bool _enabled) external onlyOwner {isBot[_address] = _enabled;}\n    function massManageBot(address[] calldata accounts, bool _enabled) external onlyOwner {for (uint256 i = 0; i < accounts.length; i++) {isBot[accounts[i]] = _enabled;}}\n    function setisExempt(address _address, bool _enabled) external onlyOwner {isFeeExempt[_address] = _enabled;}\n    function approve(address spender, uint256 amount) public override returns (bool) {_approve(msg.sender, spender, amount);return true;}\n    function totalSupply() public view override returns (uint256) {return _totalSupply.sub(balanceOf(DEAD)).sub(balanceOf(address(0)));}\n    function _maxWalletToken() public view returns (uint256) {return totalSupply() * _maxWalletPercent / denominator;}\n    function _maxTxAmount() public view returns (uint256) {return totalSupply() * _maxTxAmountPercent / denominator;}\n    function _maxTransferAmount() public view returns (uint256) {return totalSupply() * _maxTransferPercent / denominator;}\n\n    function preTxCheck(address sender, address recipient, uint256 amount) internal view {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n        require(amount > uint256(0), \"Transfer amount must be greater than zero\");\n        require(amount <= balanceOf(sender),\"You are trying to transfer more than your balance\");\n    }\n\n    function _transfer(address sender, address recipient, uint256 amount) private {\n        preTxCheck(sender, recipient, amount);\n        checkTradingAllowed(sender, recipient);\n        checkMaxWallet(sender, recipient, amount); \n        swapbackCounters(sender, recipient);\n        checkTxLimit(sender, recipient, amount); \n        swapBack(sender, recipient, amount);\n        _balances[sender] = _balances[sender].sub(amount);\n        uint256 amountReceived = shouldTakeFee(sender, recipient) ? takeFee(sender, recipient, amount) : amount;\n        _balances[recipient] = _balances[recipient].add(amountReceived);\n        emit Transfer(sender, recipient, amountReceived);\n    }\n\n    function setFeesYouCanSee(uint256 _liquidity, uint256 _marketing, uint256 _burn, uint256 _development, uint256 _total, uint256 _sell, uint256 _trans) external onlyOwner {\n        liquidityFee = _liquidity;\n        marketingFee = _marketing;\n        burnFee = _burn;\n        developmentFee = _development;\n        totalFee = _total;\n        sellFee = _sell;\n        transferFee = _trans;\n        require(totalFee <= denominator.div(1) && sellFee <= denominator.div(1), \"totalFee and sellFee cannot be more than 20%\");\n    }\n\n    function setLimitsYouCanSee(uint256 _buy, uint256 _trans, uint256 _wallet) external onlyOwner {\n        uint256 newTx = (totalSupply() * _buy) / 10000;\n        uint256 newTransfer = (totalSupply() * _trans) / 10000;\n        uint256 newWallet = (totalSupply() * _wallet) / 10000;\n        _maxTxAmountPercent = _buy;\n        _maxTransferPercent = _trans;\n        _maxWalletPercent = _wallet;\n        uint256 limit = totalSupply().mul(5).div(1000);\n        require(newTx >= limit && newTransfer >= limit && newWallet >= limit, \"Max TXs and Max Wallet cannot be less than .5%\");\n    }\n\n    function checkTradingAllowed(address sender, address recipient) internal view {\n        if(!isFeeExempt[sender] && !isFeeExempt[recipient]){require(tradingAllowed, \"tradingAllowed\");}\n    }\n    \n    function checkMaxWallet(address sender, address recipient, uint256 amount) internal view {\n        if(!isFeeExempt[sender] && !isFeeExempt[recipient] && recipient != address(pair) && recipient != address(DEAD)){\n            require((_balances[recipient].add(amount)) <= _maxWalletToken(), \"Exceeds maximum wallet amount.\");}\n    }\n\n    function swapbackCounters(address sender, address recipient) internal {\n        if(recipient == pair && !isFeeExempt[sender]){swapTimes += uint256(1);}\n    }\n\n    function checkTxLimit(address sender, address recipient, uint256 amount) internal view {\n        if(sender != pair){require(amount <= _maxTransferAmount() || isFeeExempt[sender] || isFeeExempt[recipient], \"TX Limit Exceeded\");}\n        require(amount <= _maxTxAmount() || isFeeExempt[sender] || isFeeExempt[recipient], \"TX Limit Exceeded\");\n    }\n\n    function swapAndLiquify(uint256 tokens) private lockTheSwap {\n        uint256 _denominator = (liquidityFee.add(1).add(marketingFee).add(developmentFee)).mul(2);\n        uint256 tokensToAddLiquidityWith = tokens.mul(liquidityFee).div(_denominator);\n        uint256 toSwap = tokens.sub(tokensToAddLiquidityWith);\n        uint256 initialBalance = address(this).balance;\n        swapTokensForETH(toSwap);\n        uint256 deltaBalance = address(this).balance.sub(initialBalance);\n        uint256 unitBalance= deltaBalance.div(_denominator.sub(liquidityFee));\n        uint256 ETHToAddLiquidityWith = unitBalance.mul(liquidityFee);\n        if(ETHToAddLiquidityWith > uint256(0)){addLiquidity(tokensToAddLiquidityWith, ETHToAddLiquidityWith); }\n        uint256 marketingAmt = unitBalance.mul(2).mul(marketingFee);\n        if(marketingAmt > 0){payable(marketing_receiver).transfer(marketingAmt);}\n        uint256 remainingBalance = address(this).balance;\n        if(remainingBalance > uint256(0)){payable(development_receiver).transfer(remainingBalance);}\n    }\n\n    function addLiquidity(uint256 tokenAmount, uint256 ETHAmount) private {\n        _approve(address(this), address(router), tokenAmount);\n        router.addLiquidityETH{value: ETHAmount}(\n            address(this),\n            tokenAmount,\n            0,\n            0,\n            liquidity_receiver,\n            block.timestamp);\n    }\n\n    function swapTokensForETH(uint256 tokenAmount) private {\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = router.WETH();\n        _approve(address(this), address(router), tokenAmount);\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0,\n            path,\n            address(this),\n            block.timestamp);\n    }\n\n    function shouldSwapBack(address sender, address recipient, uint256 amount) internal view returns (bool) {\n        bool aboveMin = amount >= minTokenAmount;\n        bool aboveThreshold = balanceOf(address(this)) >= swapThreshold;\n        return !swapping && swapEnabled && tradingAllowed && aboveMin && !isFeeExempt[sender] && recipient == pair && swapTimes >= swapAmount && aboveThreshold;\n    }\n\n    function setSwapbackSettings(uint256 _swapAmount, uint256 _swapThreshold, uint256 _minTokenAmount) external onlyOwner {\n        swapAmount = _swapAmount; swapThreshold = _totalSupply.mul(_swapThreshold).div(uint256(100000)); \n        minTokenAmount = _totalSupply.mul(_minTokenAmount).div(uint256(100000));\n    }\n\n    function swapBack(address sender, address recipient, uint256 amount) internal {\n        if(shouldSwapBack(sender, recipient, amount)){swapAndLiquify(swapThreshold); swapTimes = uint256(0);}\n    }\n\n    function shouldTakeFee(address sender, address recipient) internal view returns (bool) {\n        return !isFeeExempt[sender] && !isFeeExempt[recipient];\n    }\n\n    function getTotalFee(address sender, address recipient) internal view returns (uint256) {\n        if(isBot[sender] || isBot[recipient]){return denominator.sub(uint256(100));}\n        if(recipient == pair){return sellFee;}\n        if(sender == pair){return totalFee;}\n        return transferFee;\n    }\n\n    function takeFee(address sender, address recipient, uint256 amount) internal returns (uint256) {\n        if(getTotalFee(sender, recipient) > 0){\n        uint256 feeAmount = amount.div(denominator).mul(getTotalFee(sender, recipient));\n        _balances[address(this)] = _balances[address(this)].add(feeAmount);\n        emit Transfer(sender, address(this), feeAmount);\n        if(burnFee > uint256(0)){_transfer(address(this), address(DEAD), amount.div(denominator).mul(burnFee));}\n        return amount.sub(feeAmount);} return amount;\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    function _approve(address owner, address spender, uint256 amount) private {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n}"
    }
  },
  "settings": {
    "metadata": {
      "bytecodeHash": "none",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 800
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}