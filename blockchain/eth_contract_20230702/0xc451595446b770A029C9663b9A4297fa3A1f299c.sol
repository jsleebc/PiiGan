{{
  "language": "Solidity",
  "sources": {
    "S33TH3/Seethe.sol": {
      "content": "// SPDX-License-Identifier: Frensware\n\n/*⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣠⡤⠤⠤⠤⠤⢤⣀⡀⠀⠀⠀⢀⣀⣀⣀⣀⣀⡀⠀⠀⠀⠀⠀\n⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⡀⠀⠀⠀⠀⠀⠀⠀⣀⣠⣴⠾⠋⠉⠀⠀⠀⠀⠀⠀⠀⠈⠉⣳⣶⠶⠛⠉⠉⠉⠉⠉⠛⠷⣦⡀⠀⠀\n⠀⠀⠀⠀⠀⣀⣤⡶⠞⠛⠉⠉⠉⠙⠛⠓⠶⠶⣶⣛⡛⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⠟⠁⣠⣶⣿⡿⠉⢻⣿⣦⡀⠈⠻⣆⠀\n⠀⠀⢀⣴⠞⠋⠀⠀⠀⠀⠀⠀⠀⠀⢀⣤⡶⠿⠛⠛⠛⠛⠷⠶⣤⣀⠀⠀⠀⠀⠀⠀⠀⣼⠏⠀⣼⣿⣿⣿⠁⠀⣼⣿⠇⣿⣆⠀⢹⣆\n⣠⡾⠛⠁⠀⠀⠀⠀⠀⠀⠀⠀⣠⡾⠛⠁⣠⣤⣶⣶⠖⠶⣶⣄⡈⠙⢷⡄⠀⠀⢀⣀⣴⣿⠀⢸⣿⣿⣿⠃⠀⣸⣿⠋⣼⣿⣿⡆⠀⣿\n⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣴⠟⠀⢠⣾⣿⣿⣿⠇⠀⣰⣿⠏⣿⣄⠀⢻⣶⠞⢛⣉⣙⣿⠀⢸⣿⣿⠃⠀⢠⣿⠃⣼⣿⣿⣿⡇⠀⣿\n⣀⣠⣴⣶⣶⣶⣶⣶⣤⣶⣾⡏⠀⢠⣿⣿⣿⣿⠋⠀⢠⣿⠏⣼⣿⣿⡆⠀⣿⠟⠛⠋⠙⢻⡄⠈⣿⡟⠀⢠⣿⠃⣼⣿⣿⣿⡿⠁⢠⣿\n⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⣽⠁⠀⢸⣿⣿⣿⠇⠀⢠⣿⡟⢰⣿⣿⣿⡇⠀⣹⣦⡀⠀⠀⠀⢻⣄⠈⠳⣤⣿⠏⣰⣿⣿⣿⠟⠁⢀⣼⠟\n⠛⠛⠻⠷⠶⣶⣤⣤⣄⡀⢹⡆⠀⢸⣿⣿⠏⠀⣰⣿⡿⢡⣿⣿⣿⣿⡇⢀⣿⡟⠉⠛⠛⠛⠋⠙⢶⣄⡈⠙⠛⠛⠛⠋⠀⣀⣴⠿⠁⠀\n⠀⠀⠀⠀⠀⠀⠀⠈⠉⠛⠾⣧⠀⠈⢿⣏⠀⣰⣿⡿⢡⣿⣿⣿⣿⠟⢀⣼⡿⠁⠀⠀⠀⠀⠀⠀⠀⠈⠻⠿⠶⠶⠾⠿⠿⠏⡁⠀⠀⠀\n⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢷⣄⠀⠙⠷⣿⣿⣥⣾⣿⡿⠟⢁⣠⡿⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣠⣟⣇⠀⠀\n⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠻⣶⣤⣤⣈⣉⣩⣥⣤⣶⠿⠋⠀⠀⠀⠀⠀⣀⣤⣤⣴⣶⣶⣶⣶⠶⠶⠿⠿⠟⠛⠉⢻⣟⠀⠀\n⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠉⠉⠉⠉⠁⠀⠀⠀⣠⣤⣴⣶⣿⣿⣿⠿⠿⠿⢿⣶⣦⣤⣤⣤⣤⣴⣶⣾⣿⡏⠀⠀\n⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣤⣶⣶⠾⠿⠟⠛⠛⠉⠁⠀⣠⣿⣿⡀⠀⠀⠀⠈⠙⢿⣯⡉⠁⠀⣀⣴⣿⠁⠀⠀\n⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⣿⡏⠀⠀⠀⠀⠄⠀⠐⠂⠉⠀⣀⣠⣿⣿⠿⠿⣦⡀⠀⠀⢻⡟⠛⠛⠉⢹⠋⠀⠀⠀\n⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠛⠿⠷⢶⣶⣶⣶⠶⠶⠶⠿⠛⠋⠉⠉⠀⠀⠀⠸⣧⠀⠀⠸⣿⠀⠀⠀⣸⠀⡀⠀⠀\n⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣿⣄⣤⣤⣿⣷⠶⠿⠿⠛⢿⡗⠖\n⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣴⣿⠟⠛⠉⠉⠉⠁⠀⠀⠀⠀⠀⠀⠘⣿⡆\n⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣀⣠⣤⣾⡟⠉⢻⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⡇  * NO fren left behind.\n⣶⣤⣤⣤⣤⣤⣀⣀⣀⣀⣀⣀⣀⣀⣤⣤⣤⣤⣤⣤⣴⣶⣶⣶⣶⣿⣿⣿⣿⣿⣿⣧⣼⣦⡈⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣷            \n⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⣿⡿⠛⠉⠉⠛⣿⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿               \n⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠁⠀⠈⠀⠀⠀⠀⠀⢸⣿⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣟     https://twitter.com/PepePalOfficial\n⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣾⢿⣿⣿   ............https://t.me/PepePalOfficial\n*/\npragma solidity 0.6.12;\n\nimport \"./SafeMath.sol\";\nimport \"./IERC20.sol\";\nimport \"./Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\n\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves.\n\n        // A Solidity high level call has three parts:\n        //  1. The target address is checked to verify it contains contract code\n        //  2. The call itself is made, and success asserted\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\n        // solhint-disable-next-line max-line-length\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = address(token).call(data);\n        require(success, \"SafeERC20: low-level call failed\");\n\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\n//Uniswap v2 interface\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n\n\ninterface IUniswapV2Pair {\n  event Approval(address indexed owner, address indexed spender, uint value);\n  event Transfer(address indexed from, address indexed to, uint value);\n\n  function name() external pure returns (string memory);\n  function symbol() external pure returns (string memory);\n  function decimals() external pure returns (uint8);\n  function totalSupply() external view returns (uint);\n  function balanceOf(address owner) external view returns (uint);\n  function allowance(address owner, address spender) external view returns (uint);\n\n  function approve(address spender, uint value) external returns (bool);\n  function transfer(address to, uint value) external returns (bool);\n  function transferFrom(address from, address to, uint value) external returns (bool);\n\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\n  function PERMIT_TYPEHASH() external pure returns (bytes32);\n  function nonces(address owner) external view returns (uint);\n\n  function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n  event Mint(address indexed sender, uint amount0, uint amount1);\n  event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n  event Swap(\n      address indexed sender,\n      uint amount0In,\n      uint amount1In,\n      uint amount0Out,\n      uint amount1Out,\n      address indexed to\n  );\n  event Sync(uint112 reserve0, uint112 reserve1);\n\n  function MINIMUM_LIQUIDITY() external pure returns (uint);\n  function factory() external view returns (address);\n  function token0() external view returns (address);\n  function token1() external view returns (address);\n  function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n  function price0CumulativeLast() external view returns (uint);\n  function price1CumulativeLast() external view returns (uint);\n  function kLast() external view returns (uint);\n\n  function mint(address to) external returns (uint liquidity);\n  function burn(address to) external returns (uint amount0, uint amount1);\n  function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n  function skim(address to) external;\n  function sync() external;\n}\n\n////////////////////////////////////////////////\n////////////////////EVENTS/////////////////////\n//////////////////////////////////////////////\n\ncontract TokenEvents {\n\n    //when a user freezes tokens\n    event LpFreeze(\n        address indexed user,\n        uint value,\n        address indexed lpToken\n    );\n\n    //when a user unfreezes tokens\n    event LpUnfreeze(\n        address indexed user,\n        uint value,\n        address indexed lpToken\n    );\n    \n    //when a user stakes tokens\n    event TokenStake(\n        address indexed user,\n        uint value\n    );\n\n    //when a user unstakes tokens\n    event TokenUnstake(\n        address indexed user,\n        uint value\n    );\n    \n    //when a user burns tokens\n    event TokenBurn(\n        address indexed user,\n        uint value\n    );\n    \n}\n\n//////////////////////////////////////\n//////////SEETHE TOKEN CONTRACT////////\n////////////////////////////////////\ncontract Seethe is IERC20, TokenEvents {\n\n    using SafeMath for uint256;\n    using SafeMath for uint64;\n    using SafeMath for uint32;\n    using SafeMath for uint16;\n    using SafeMath for uint8;\n\n    using SafeERC20 for Seethe;\n    \n    \n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    // setup\n    address public cakeSEETHEETH;\n    \n    //apy setup\n    mapping (address => uint) public lpApy;\n    uint32 public globalApy = 1000;\n    uint16 public halvening = 1;\n    uint64 public halveningDays = 7;\n    uint256 public halveningTimestamp;\n    uint256 public stakingApyLimiter = 1;\n    uint256 public burnAdjust = 3;\n    \n    //lp freeze / stake setup\n    uint constant internal MINUTESECONDS = 60;\n    uint constant internal DAYSECONDS = 86400;\n    uint constant internal MINSTAKEDAYLENGTH = 7;\n    uint256 public totalStaked;\n    address[] public lpAddresses;\n    mapping (address => uint) public totalLpFrozen;\n    mapping (address => uint[]) public lpFrozenBalances;\n    mapping (address => uint[]) public lpFreezeStartTimes;\n    \n    //tokenomics\n    uint256 internal _totalSupply;\n    string public constant name = \"Seethe\";\n    string public constant symbol = \"SEETHE\";\n    uint8 public constant decimals = 18;\n\n    //admin\n    address constant internal _P1 = 0x579733A299Cf192df9D2624701f1819A29c8Bf58;\n    address constant internal _P2 = 0x579733A299Cf192df9D2624701f1819A29c8Bf58;\n    address constant internal _P3 = 0x579733A299Cf192df9D2624701f1819A29c8Bf58;\n    bool public isLocked = false;\n    bool private sync;\n    \n    mapping(address => bool) admins;\n    mapping(address => bool) public isPoolActive;\n    mapping (address => Farmer) public farmer;\n    \n    struct Farmer{\n        uint256 stakedBalance;\n        uint256 stakeStartTimestamp;\n        uint256 totalStakingInterest;\n        uint256 totalFarmedSeethe;\n        uint256 totalBurnt;\n        uint256 totalReferralBonus;\n        address referrer;\n        bool activeUser;\n    }\n    \n    modifier onlyAdmins(){\n        require(admins[msg.sender], \"not an admin\");\n        _;\n    }\n    \n    //protects against potential reentrancy\n    modifier synchronized {\n        require(!sync, \"Sync lock\");\n        sync = true;\n        _;\n        sync = false;\n    }\n\n    constructor(uint256 initialTokens) public {\n        admins[_P1] = true;\n        admins[_P2] = true;\n        admins[_P3] = true;\n        admins[msg.sender] = true;\n        halveningTimestamp = now;\n        //mint initial tokens\n        mintInitialTokens(initialTokens);\n    }\n\n\n    receive() external payable{\n        donate();\n    }\n\n    \n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() external view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\n        _transfer(msg.sender, recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) external view override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) external override returns (bool) {\n        _approve(msg.sender, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20};\n     *\n     * Requirements:\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for `sender`'s tokens of at least\n     * `amount`.\n     */\n     \n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply unless mintBLock is true\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal {\n        uint256 amt = amount;\n        require(account != address(0), \"ERC20: mint to the zero address\");\n        _totalSupply = _totalSupply.add(amt);\n        _balances[account] = _balances[account].add(amt);\n        emit Transfer(address(0), account, amt);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n     *\n     * This is internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\n     * from the caller's allowance.\n     *\n     * See {_burn} and {_approve}.\n     */\n    function _burnFrom(address account, uint256 amount) internal {\n        _burn(account, amount);\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount, \"ERC20: burn amount exceeds allowance\"));\n    }\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);//from address(0) for minting\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    //mint seethe initial tokens (only ever called in constructor)\n    function mintInitialTokens(uint amount)\n        internal\n        synchronized\n    {\n        _mint(_P1, amount);\n    }\n\n    ////////////////////////////////////////////////////////\n    /////////////////PUBLIC FACING - SEETHE CONTROL//////////\n    //////////////////////////////////////////////////////\n\n    \n    //freeze LP tokens to contract, approval needed\n    function FreezeLP(uint amt, uint _lpIndex, address _referrer)\n        external\n        synchronized\n    {\n        require(isPoolActive[lpAddresses[_lpIndex]], \"pool not active\");\n        require(amt > 0, \"zero input\");\n        require(lpBalance(lpAddresses[_lpIndex]) >= amt, \"Error: insufficient balance\");//ensure user has enough funds\n        seetheCheck();\n        if(isHarvestable(msg.sender, _lpIndex)){\n            uint256 interest = calcHarvestRewards(msg.sender, _lpIndex);\n            if(interest > 0){\n                harvest(interest);\n            }\n        }\n        //set user active\n        farmer[msg.sender].activeUser = true;\n        //update balances\n        lpFrozenBalances[msg.sender][_lpIndex] = lpFrozenBalances[msg.sender][_lpIndex].add(amt);\n        totalLpFrozen[lpAddresses[_lpIndex]] = totalLpFrozen[lpAddresses[_lpIndex]].add(amt);\n        //update timestamp\n        lpFreezeStartTimes[msg.sender][_lpIndex] = now;\n\n        if(_referrer != address(0) && _referrer != msg.sender){\n            if(farmer[_referrer].activeUser && farmer[msg.sender].referrer == address(0)){\n               farmer[msg.sender].referrer = _referrer;\n            }\n        }\n        IUniswapV2Pair(lpAddresses[_lpIndex]).transferFrom(msg.sender, address(this), amt);//make transfer\n        emit LpFreeze(msg.sender, amt, lpAddresses[_lpIndex]);\n    }\n    \n    //unfreeze LP tokens from contract\n    function UnfreezeLP(uint _lpIndex)\n        external\n        synchronized\n    {\n        require(lpFrozenBalances[msg.sender][_lpIndex] > 0,\"Error: unsufficient frozen balance\");//ensure user has enough frozen funds\n        uint amt = lpFrozenBalances[msg.sender][_lpIndex];\n        if(isHarvestable(msg.sender, _lpIndex)){\n            uint256 interest = calcHarvestRewards(msg.sender, _lpIndex);\n            if(interest > 0){\n                harvest(interest);\n            }\n        }\n        lpFrozenBalances[msg.sender][_lpIndex] = 0;\n        lpFreezeStartTimes[msg.sender][_lpIndex] = 0;\n        totalLpFrozen[lpAddresses[_lpIndex]] = totalLpFrozen[lpAddresses[_lpIndex]].sub(amt);\n        IUniswapV2Pair(lpAddresses[_lpIndex]).transfer(msg.sender, amt);//make transfer\n        emit LpUnfreeze(msg.sender, amt, lpAddresses[_lpIndex]);\n    }\n    \n        \n    //harvest SEETHE from lp\n    function HarvestSeethe(uint _lpIndex)\n        external\n        synchronized\n    {\n        require(lpFrozenBalances[msg.sender][_lpIndex] > 0,\"Error: unsufficient lp balance\");//ensure user has enough lp frozen \n        uint256 interest = calcHarvestRewards(msg.sender, _lpIndex);\n        if(interest > 0){\n            harvest(interest);\n            lpFreezeStartTimes[msg.sender][_lpIndex] = now;\n            farmer[msg.sender].totalFarmedSeethe += interest;\n        }\n    }\n    \n    function harvest(uint rewards)\n        internal\n    {\n        _mint(msg.sender, rewards);\n        uint refFee = rewards.div(10);\n        if(farmer[msg.sender].referrer != address(0)){\n            _mint(msg.sender, refFee.div(2));//5% bonus for farmer using reflink\n            _mint(farmer[msg.sender].referrer, refFee.div(2));//5% referrer bonus on all harvests\n            farmer[farmer[msg.sender].referrer].totalReferralBonus += refFee.div(2);\n        }\n        _mint(_P1, refFee.mul(50).div(100));//5% dev fee\n        _mint(_P2, refFee.mul(25).div(100));//2.5%\n        _mint(_P3, refFee.mul(25).div(100));//2.5%\n    }\n\n    function seetheCheck()\n        internal \n    {\n        //ensure lpFreezeStartTimes is in seethe\n        if(lpFreezeStartTimes[msg.sender].length < lpAddresses.length){\n            for(uint i = lpFreezeStartTimes[msg.sender].length; i < lpAddresses.length; i++){\n                lpFreezeStartTimes[msg.sender].push(0);\n            }\n        }\n        //ensure lpFrozenBalances is in seethe\n        if(lpFrozenBalances[msg.sender].length < lpAddresses.length){\n            for(uint i = lpFrozenBalances[msg.sender].length; i < lpAddresses.length; i++){\n                lpFrozenBalances[msg.sender].push(0);\n            }\n        }\n    }\n    \n    \n    ////////STAKING FUNCTIONS/////////\n    \n    //stake SEETHE tokens to contract and claims any accrued interest\n    function StakeTokens(uint amt, address _referrer)\n        external\n        synchronized\n    {\n        require(amt > 0, \"zero input\");\n        require(seetheBalance() >= amt, \"Error: insufficient balance\");//ensure user has enough funds\n        if(_referrer != address(0) && _referrer != msg.sender){\n            if(farmer[_referrer].activeUser && farmer[msg.sender].referrer == address(0)){\n               farmer[msg.sender].referrer = _referrer;\n            }\n        }\n        //claim any accrued interest\n        claimInterest();\n        //update balances\n        farmer[msg.sender].activeUser = true;\n        farmer[msg.sender].stakedBalance = farmer[msg.sender].stakedBalance.add(amt);\n        totalStaked = totalStaked.add(amt);\n        _transfer(msg.sender, address(this), amt);//make transfer\n        emit TokenStake(msg.sender, amt);\n    }\n    \n    //unstake SEETHE tokens from contract and claims any accrued interest\n    function UnstakeTokens()\n        external\n        synchronized\n    {\n        require(farmer[msg.sender].stakedBalance > 0,\"Error: unsufficient frozen balance\");//ensure user has enough staked funds\n        require(isStakeFinished(msg.sender), \"tokens cannot be unstaked yet. min 7 day stake\");\n        uint amt = farmer[msg.sender].stakedBalance;\n        //claim any accrued interest\n        claimInterest();\n        //zero out staking timestamp\n        farmer[msg.sender].stakeStartTimestamp = 0;\n        farmer[msg.sender].stakedBalance = 0;\n        totalStaked = totalStaked.sub(amt);\n        _transfer(address(this), msg.sender, amt);//make transfer\n        emit TokenUnstake(msg.sender, amt);\n    }\n    \n    //claim any accrued interest\n    function ClaimStakeInterest()\n        external\n        synchronized\n    {\n        require(farmer[msg.sender].stakedBalance > 0, \"you have no staked balance\");\n        claimInterest();\n    }\n    \n    //roll any accrued interest\n    function RollStakeInterest()\n        external\n        synchronized\n    {\n        require(farmer[msg.sender].stakedBalance > 0, \"you have no staked balance\");\n        rollInterest();\n    }\n    \n    function rollInterest()\n        internal\n    {\n        //calculate staking interest\n        uint256 interest = calcStakingRewards(msg.sender);\n        //mint interest to contract, ref and devs\n        if(interest > 0){\n            _mint(address(this), interest);\n            //roll interest\n            farmer[msg.sender].stakedBalance = farmer[msg.sender].stakedBalance.add(interest);\n            totalStaked = totalStaked.add(interest);\n            farmer[msg.sender].totalStakingInterest += interest;\n            //reset staking timestamp\n            farmer[msg.sender].stakeStartTimestamp = now;\n            if(farmer[msg.sender].referrer != address(0)){\n                 _mint(farmer[msg.sender].referrer, interest.div(20));//5% bonus for referrer\n                 farmer[farmer[msg.sender].referrer].totalReferralBonus += interest.div(20);\n            }\n            _mint(_P1, interest.mul(2).div(100));//2% dev copy\n            _mint(_P2, interest.mul(1).div(100));//1%\n            _mint(_P3, interest.mul(1).div(100));//1%\n        }\n    }\n    \n    function claimInterest()\n        internal\n    {\n        //calculate staking interest\n        uint256 interest = calcStakingRewards(msg.sender);\n        //reset staking timestamp\n        farmer[msg.sender].stakeStartTimestamp = now;\n        //mint interest if any\n        if(interest > 0){\n            _mint(msg.sender, interest);\n            farmer[msg.sender].totalStakingInterest += interest;\n            if(farmer[msg.sender].referrer != address(0)){\n                 _mint(farmer[msg.sender].referrer, interest.div(20));//5% bonus for referrer\n                 farmer[farmer[msg.sender].referrer].totalReferralBonus += interest.div(20);\n            }\n            _mint(_P1, interest.mul(2).div(100));//2% dev copy\n            _mint(_P2, interest.mul(1).div(100));//1%\n            _mint(_P3, interest.mul(1).div(100));//1%\n        }\n    }\n\n    function NewHalvening()\n        external\n        synchronized\n    {   \n        require(now.sub(halveningTimestamp) >= DAYSECONDS.mul(halveningDays), \"cannot call halvening yet\");\n        halveningDays += 7; //increase period by 1 week every halvening\n        halveningTimestamp = now;\n        halvening = halvening * 2;\n    }\n\n    function BurnSeethe(uint amt)\n        external\n        synchronized\n    {\n        require(farmer[msg.sender].totalBurnt.add(amt) <= farmer[msg.sender].totalStakingInterest.mul(burnAdjust), \"can only burn equivalent of x3 total staking interest\");\n        require(amt > 0, \"value must be greater than 0\");\n        require(balanceOf(msg.sender) >= amt, \"balance too low\");\n        //burn tokens of user\n        _burn(msg.sender, amt);\n        farmer[msg.sender].totalBurnt += amt;\n        //burn tokens of swap - pamp it\n        _balances[cakeSEETHEETH] = _balances[cakeSEETHEETH].sub(amt, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amt);\n        IUniswapV2Pair(cakeSEETHEETH).sync();\n        emit TokenBurn(msg.sender, amt);\n    }\n\n    ///////////////////////////////\n    ////////VIEW ONLY//////////////\n    ///////////////////////////////\n\n    //returns staking rewards in SEETHE\n    function calcStakingRewards(address _user)\n        public\n        view\n        returns(uint)\n    {\n        // totalstaked / 1000 / 1251 * (minutesPast) @ 42.0% APY\n        // (adjustments up to a max of 84% APY via burning of SEETHE)\n        uint seetheBurnt = farmer[_user].totalBurnt;\n        uint staked = farmer[_user].stakedBalance;\n        uint apyAdjust = 1000;\n        if(seetheBurnt > 0){\n            if(seetheBurnt >= staked.div(2))\n            {\n                apyAdjust = 500;\n            }\n            else{\n                uint burntPercentage = ((seetheBurnt.mul(100) / staked));\n                uint v = (1000 * burntPercentage) / 100;\n                apyAdjust = apyAdjust.sub(v);\n                if(apyAdjust < 500)\n                {\n                    apyAdjust = 500;\n                }\n            }\n        }\n        return (staked.div(apyAdjust.mul(stakingApyLimiter)).div(1251) * (minsPastStakeTime(_user)));\n    }\n\n    //returns amount of minutes past since stake start\n    function minsPastStakeTime(address _user)\n        public\n        view\n        returns(uint)\n    {\n        if(farmer[_user].stakeStartTimestamp == 0){\n            return 0;\n        }\n        uint minsPast = now.sub(farmer[_user].stakeStartTimestamp).div(MINUTESECONDS);\n        if(minsPast >= 1){\n            return minsPast;// returns 0 if under 1 min passed\n        }\n        else{\n            return 0;\n        }\n    }\n    // 69000000000000000000000000\n    //returns lp harvest reward in SEETHE\n    function calcHarvestRewards(address _user, uint _lpIndex)\n        public\n        view\n        returns(uint)\n    {   \n        return ((lpFrozenBalances[_user][_lpIndex].mul(globalApy).div(lpApy[lpAddresses[_lpIndex]])).mul(minsPastFreezeTime(_user, _lpIndex)).div(halvening));\n    }\n    \n    //returns amount of minutes past since lp freeze start\n    function minsPastFreezeTime(address _user, uint _lpIndex)\n        public\n        view\n        returns(uint)\n    {\n        if(lpFreezeStartTimes[_user][_lpIndex] == 0){\n            return 0;\n        }\n        uint minsPast = now.sub(lpFreezeStartTimes[_user][_lpIndex]).div(MINUTESECONDS);\n        if(minsPast >= 1){\n            return minsPast;// returns 0 if under 1 min passed\n        }\n        else{\n            return 0;\n        }\n    }\n    \n    //check is stake is finished, min 7 days\n    function isStakeFinished(address _user)\n        public\n        view\n        returns(bool)\n    {\n        if(farmer[_user].stakeStartTimestamp == 0){\n            return false;\n        }\n        else{\n            return farmer[_user].stakeStartTimestamp.add((DAYSECONDS).mul(MINSTAKEDAYLENGTH)) <= now;             \n        }\n    }\n    \n    //total LP balances frozen in contract\n    function totalFrozenLpBalance(uint _lpIndex)\n        external\n        view\n        returns (uint256)\n    {\n        return totalLpFrozen[lpAddresses[_lpIndex]];\n    }\n\n    //SEETHE balance of caller\n    function seetheBalance()\n        public\n        view\n        returns (uint256)\n    {\n        return balanceOf(msg.sender);\n    }\n    \n    //LP balance of caller\n    function lpBalance(address _lpAddress)\n        public\n        view\n        returns (uint256)\n    {\n        return IUniswapV2Pair(_lpAddress).balanceOf(msg.sender);\n\n    }\n\n    //check if user can harvest SEETHE yet\n    function isHarvestable(address _user, uint _lpIndex)\n        public\n        view\n        returns(bool)\n    {\n        if(lpFreezeStartTimes[_user][_lpIndex] == 0){\n            return false;\n        }\n        else{\n           return lpFreezeStartTimes[_user][_lpIndex].add(MINUTESECONDS) <= now; \n        }\n    }\n    \n    ///////////////////////////////\n    ////////ADMIN ONLY//////////////\n    ///////////////////////////////\n    \n    function setSEETHEETHpool(address _lpAddress)\n        external\n        onlyAdmins\n    {\n        require(!isLocked, \"cannot change native pool\");\n        cakeSEETHEETH = _lpAddress;\n    }\n    \n    //adjusts amount users are eligible to burn over time\n    function setBurnAdjust(uint _v)\n        external\n        onlyAdmins\n    {\n        burnAdjust = _v;\n    }\n    \n    //decreases staking APY by 10x to 4.20% (max 8.40%)\n    function stakingApyDecrease()\n        external\n        onlyAdmins\n    {   \n         require(!isLocked, \"cannot change staking APY\");\n         require(stakingApyLimiter == 1, \"cannot decrease staking APY twice, min 4.20%\");\n         stakingApyLimiter *= 10;\n    }\n    \n    function setGlobalApy(uint32 _apy)\n        external\n        onlyAdmins\n    {   \n         require(!isLocked, \"cannot change global APY\");\n         globalApy = _apy;\n    }\n    \n    function setApy(uint32 _apy, address _lpAddress)\n        external\n        onlyAdmins\n    {\n        require(!isLocked, \"cannot change token APY\");\n        lpApy[_lpAddress] = _apy;\n    }\n\n    function setPoolActive(address _lpAddress, bool _active)\n        external\n        onlyAdmins\n    {\n        require(!isLocked, \"cannot change pool status\");\n        bool _newAddress = true;\n        for(uint i = 0; i < lpAddresses.length; i++){\n            if(_lpAddress == lpAddresses[i]){\n                _newAddress = false;\n                break;\n            }\n        }\n        if(_newAddress){\n            lpAddresses.push(_lpAddress); \n        }\n        isPoolActive[_lpAddress] = _active;\n    }\n    \n    function setForeverLock()\n        external\n        onlyAdmins\n    {\n        isLocked = true;\n    }\n    \n    //distribute any arbitrary token stuck in the contract via address (does not allow tokens in use by the platform)\n    function distributeTokens(address _tokenAddress) \n        external\n        onlyAdmins\n    {\n        //ensure token address does not match platform lp tokens\n        for(uint i = 0; i < lpAddresses.length; i++){\n            require(_tokenAddress != lpAddresses[i], \"this token is vital to the seethe.finance ecosystem, you cannot withdraw this token!!!\");\n        }\n        //ensure token address does not match this contract\n        require(_tokenAddress != address(this), \"this token is vital to the seethe.finance ecosystem, you cannot withdraw this token!!!\");\n        //create contract\n        IERC20 _token = IERC20(_tokenAddress);\n        //get balance \n        uint256 balance = _token.balanceOf(address(this));\n        //distribute\n        _token.transfer(_P1, balance.mul(50).div(100));\n        _token.transfer(_P2, balance.mul(25).div(100));\n        _token.transfer(_P3, balance.mul(25).div(100));\n    }\n    \n    function donate() public payable {\n        require(msg.value > 0);\n        bool success = false;\n        uint256 balance = msg.value;\n        //distribute\n        (success, ) =  _P1.call{value:balance.mul(50).div(100)}{gas:21000}('');\n        require(success, \"Transfer failed\");\n        (success, ) =  _P2.call{value:balance.mul(25).div(100)}{gas:21000}('');\n        require(success, \"Transfer failed\");\n        (success, ) =  _P3.call{value:balance.mul(25).div(100)}{gas:21000}('');\n        require(success, \"Transfer failed\");\n    }\n}"
    },
    "S33TH3/Address.sol": {
      "content": "//SPDX-License-Identifier: Frensware\npragma solidity 0.6.12;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n}"
    },
    "S33TH3/IERC20.sol": {
      "content": "// SPDX-License-Identifier: Frensware\npragma solidity 0.6.12;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n * the optional functions; to access them see {ERC20Detailed}.\n */\n\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);//from address(0) for minting\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"
    },
    "S33TH3/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: Frensware\npragma solidity 0.6.12;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     *\n     * _Available since v2.4.0._\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 666
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}