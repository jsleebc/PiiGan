{{
  "language": "Solidity",
  "sources": {
    "TehGreatRace1.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\ninterface IUniswapV2Factory {\n    function createPair(\n        address tokenA,\n        address tokenB\n    ) external returns (address pair);\n}\n\ninterface IUniswapV2Router02 {\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    )\n        external\n        payable\n        returns (uint amountToken, uint amountETH, uint liquidity);\n}\n\nerror Zero_Address(string where);\nerror Amount_Zero();\nerror Exceeds_MaxAmount(string Amount);\nerror In_Cooldown();\nerror Already_Open();\nerror Withdraw_Failed();\nerror Sale_is_not_Safe();\n\ncontract TehGreatRace is Context, IERC20, Ownable {\n    using SafeMath for uint256;\n    mapping(address => uint256) private _rOwned;\n    mapping(address => mapping(address => uint256)) private _allowances;\n    mapping(address => bool) private _isExcludedFromFee;\n    mapping(address => bool) private bots;\n    mapping(address => uint) private cooldown;\n\n    uint256 private constant _tTotal = 1e13 * 10 ** 8;\n    uint256 private _buyProjectFee = 0;\n    uint256 private _previousBuyProjectFee = _buyProjectFee;\n    uint256 private _sellProjectFee = 0;\n    uint256 private _previousSellProjectFee = _sellProjectFee;\n\n    address payable private _projectWallet;\n\n    string private constant _name = \"Teh Great Race\";\n    string private constant _symbol = \"F12\";\n    uint8 private constant _decimals = 9;\n\n    IUniswapV2Router02 public immutable uniswapV2Router;\n    address public uniswapV2Pair;\n\n    bool public tradingOpen;\n    bool private swapping;\n    bool private inSwap = false;\n    bool private swapFeeForWethEnabled = false;\n    bool private preventUnsafeSale = false;\n    bool private cooldownEnabled = false;\n\n    uint256 private _maxBuyAmount = _tTotal;\n    uint256 private _maxSellAmount = _tTotal;\n    uint256 private _maxWalletAmount = _tTotal;\n    uint256 private swapTokensForWethAmount = 0;\n\n    event MaxBuyAmountUpdated(uint256 _maxBuyAmount);\n    event MaxSellAmountUpdated(uint256 _maxSellAmount);\n\n    modifier lockTheSwap() {\n        inSwap = true;\n        _;\n        inSwap = false;\n    }\n\n    constructor(address _uniswapV2Router, address projectWallet) {\n        uniswapV2Router = IUniswapV2Router02(_uniswapV2Router);\n        _projectWallet = payable(projectWallet);\n        _rOwned[_msgSender()] = _tTotal;\n        _isExcludedFromFee[owner()] = true;\n        _isExcludedFromFee[address(this)] = true;\n        _isExcludedFromFee[_projectWallet] = true;\n\n        emit Transfer(address(0), _msgSender(), _tTotal);\n    }\n\n    function transfer(\n        address recipient,\n        uint256 amount\n    ) public override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    function approve(\n        address spender,\n        uint256 amount\n    ) public override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(\n            sender,\n            _msgSender(),\n            _allowances[sender][_msgSender()].sub(\n                amount,\n                \"ERC20: transfer amount exceeds allowance\"\n            )\n        );\n        return true;\n    }\n\n    function setCooldownEnabled() external onlyOwner {\n        cooldownEnabled = !cooldownEnabled;\n    }\n\n    function setSwapFeeForWethEnabled() external onlyOwner {\n        swapFeeForWethEnabled = !swapFeeForWethEnabled;\n    }\n\n    function setPreventUnsafeSale() public onlyOwner {\n        preventUnsafeSale = !preventUnsafeSale;\n    }\n\n    function _approve(address owner, address spender, uint256 amount) private {\n        if (owner == address(0)) revert Zero_Address(\"owner\");\n        if (spender == address(0)) revert Zero_Address(\"spender\");\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function _transfer(address from, address to, uint256 amount) private {\n        if (from == address(0)) revert Zero_Address(\"transfer_from\");\n        if (to == address(0)) revert Zero_Address(\"transfer_to\");\n        if (amount <= 0) revert Amount_Zero();\n        bool takeTaxFee = false;\n        bool swapForWeth = false;\n        if (\n            from != owner() &&\n            to != owner() &&\n            to != address(0) &&\n            to != address(0xdead) &&\n            !swapping\n        ) {\n            require(!bots[from] && !bots[to]);\n\n            takeTaxFee = true;\n            if (\n                from == uniswapV2Pair &&\n                to != address(uniswapV2Router) &&\n                !_isExcludedFromFee[to] &&\n                cooldownEnabled\n            ) {\n                if (amount >= _maxBuyAmount) revert Exceeds_MaxAmount(\"Buy\");\n\n                if (balanceOf(to) + amount >= _maxWalletAmount)\n                    revert Exceeds_MaxAmount(\"Wallet\");\n                if (cooldown[to] > block.timestamp) revert In_Cooldown();\n                cooldown[to] = block.timestamp + (30 seconds);\n            }\n\n            if (\n                to == uniswapV2Pair &&\n                from != address(uniswapV2Router) &&\n                !_isExcludedFromFee[from] &&\n                cooldownEnabled\n            ) {\n                if (preventUnsafeSale) revert Sale_is_not_Safe();\n                if (amount >= _maxSellAmount) revert Exceeds_MaxAmount(\"Sell\");\n                swapForWeth = true;\n            }\n        }\n\n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\n            takeTaxFee = false;\n        }\n\n        uint256 contractTokenBalance = balanceOf(address(this));\n        bool canSwapWeth = (contractTokenBalance > swapTokensForWethAmount) &&\n            swapForWeth;\n\n        if (\n            canSwapWeth &&\n            swapFeeForWethEnabled &&\n            !swapping &&\n            !_isExcludedFromFee[from] &&\n            !_isExcludedFromFee[to]\n        ) {\n            swapping = true;\n            swapBack();\n            swapping = false;\n        }\n\n        _tokenTransfer(from, to, amount, takeTaxFee, swapForWeth);\n    }\n\n    function swapBack() private {\n        uint256 tokensForProject = balanceOf(address(this));\n\n        bool success;\n\n        if (tokensForProject == 0) {\n            return;\n        }\n\n        if (tokensForProject > swapTokensForWethAmount * 10) {\n            tokensForProject = swapTokensForWethAmount * 10;\n        }\n\n        uint256 initialETHBalance = address(this).balance;\n\n        swapTokensForEth(tokensForProject);\n\n        (success, ) = address(_projectWallet).call{\n            value: address(this).balance - initialETHBalance\n        }(\"\");\n    }\n\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = uniswapV2Router.WETH();\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0,\n            path,\n            address(this),\n            block.timestamp\n        );\n    }\n\n    function openTrading() external onlyOwner {\n        if (tradingOpen) revert Already_Open();\n        _approve(address(this), address(uniswapV2Router), _tTotal);\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(\n            address(this),\n            uniswapV2Router.WETH()\n        );\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(\n            address(this),\n            balanceOf(address(this)),\n            0,\n            0,\n            owner(),\n            block.timestamp + 10 minutes\n        );\n        swapFeeForWethEnabled = true;\n        cooldownEnabled = true;\n        _maxBuyAmount = 1e11 * 10 ** 8;\n        _maxSellAmount = 1e11 * 10 ** 8;\n        _maxWalletAmount = 3e11 * 10 ** 8;\n        swapTokensForWethAmount = 5e5 * 10 ** 8;\n        tradingOpen = true;\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\n    }\n\n    function setBots(address[] memory bots_) public onlyOwner {\n        for (uint256 i = 0; i < bots_.length; i++) {\n            bots[bots_[i]] = true;\n        }\n    }\n\n    function setMaxBuyAmount(uint256 maxBuy) public onlyOwner {\n        _maxBuyAmount = maxBuy;\n    }\n\n    function setMaxSellAmount(uint256 maxSell) public onlyOwner {\n        _maxSellAmount = maxSell;\n    }\n\n    function setMaxWalletAmount(uint256 maxToken) public onlyOwner {\n        _maxWalletAmount = maxToken;\n    }\n\n    function setSwapTokensForWethAmount(uint256 newAmount) public onlyOwner {\n        if (newAmount <= 1e3 * 10 ** 9) revert();\n        if (newAmount >= 5e6 * 10 ** 9) revert();\n        swapTokensForWethAmount = newAmount;\n    }\n\n    function setProjectWallet(address projectWallet) public onlyOwner {\n        if (projectWallet == address(0)) revert Zero_Address(\"wallet\");\n        _isExcludedFromFee[_projectWallet] = false;\n        _projectWallet = payable(projectWallet);\n        _isExcludedFromFee[_projectWallet] = true;\n    }\n\n    function excludeFromFee(address account) public onlyOwner {\n        _isExcludedFromFee[account] = true;\n    }\n\n    function includeInFee(address account) public onlyOwner {\n        _isExcludedFromFee[account] = false;\n    }\n\n    function setBuyFee(uint256 buyProjectFee) external onlyOwner {\n        _buyProjectFee = buyProjectFee;\n    }\n\n    function setSellFee(uint256 sellProjectFee) external onlyOwner {\n        _sellProjectFee = sellProjectFee;\n    }\n\n    function removeAllFee() private {\n        if (\n            _buyProjectFee == 0 &&\n            _sellProjectFee == 0 &&\n            _previousBuyProjectFee == 0 &&\n            _previousSellProjectFee == 0\n        ) return;\n\n        _previousBuyProjectFee = _buyProjectFee;\n        _previousSellProjectFee = _sellProjectFee;\n\n        _buyProjectFee = 0;\n        _sellProjectFee = 0;\n    }\n\n    function restoreAllFee() private {\n        _buyProjectFee = _previousBuyProjectFee;\n        _sellProjectFee = _previousSellProjectFee;\n    }\n\n    function delBot(address notbot) public onlyOwner {\n        bots[notbot] = false;\n    }\n\n    function _tokenTransfer(\n        address sender,\n        address recipient,\n        uint256 amount,\n        bool takeTaxFee,\n        bool isSell\n    ) private {\n        if (!takeTaxFee) {\n            removeAllFee();\n        } else {\n            amount = _takeFees(sender, amount, isSell);\n        }\n\n        _transferStandard(sender, recipient, amount);\n\n        if (!takeTaxFee) {\n            restoreAllFee();\n        }\n    }\n\n    function _transferStandard(\n        address sender,\n        address recipient,\n        uint256 tAmount\n    ) private {\n        _rOwned[sender] = _rOwned[sender].sub(tAmount);\n        _rOwned[recipient] = _rOwned[recipient].add(tAmount);\n        emit Transfer(sender, recipient, tAmount);\n    }\n\n    function _takeFees(\n        address sender,\n        uint256 amount,\n        bool isSell\n    ) private returns (uint256) {\n        uint256 pjctFee;\n        if (isSell) {\n            pjctFee = _sellProjectFee;\n        } else {\n            pjctFee = _buyProjectFee;\n        }\n\n        uint256 tokensForProject = amount.mul(pjctFee).div(100);\n        if (tokensForProject > 0) {\n            _transferStandard(sender, address(this), tokensForProject);\n        }\n\n        return amount -= tokensForProject;\n    }\n\n    receive() external payable {}\n\n    function manualswap() public onlyOwner {\n        uint256 contractBalance = balanceOf(address(this));\n        swapTokensForEth(contractBalance);\n    }\n\n    function withdrawStuckETH() external onlyOwner {\n        (bool success, ) = address(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n        if (!success) revert Withdraw_Failed();\n    }\n\n    function name() public pure returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public pure returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public pure returns (uint8) {\n        return _decimals;\n    }\n\n    function totalSupply() public pure override returns (uint256) {\n        return _tTotal;\n    }\n\n    function balanceOf(address account) public view override returns (uint256) {\n        return _rOwned[account];\n    }\n\n    function allowance(\n        address owner,\n        address spender\n    ) public view override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}