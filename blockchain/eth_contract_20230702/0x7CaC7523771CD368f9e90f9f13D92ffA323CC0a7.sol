{{
  "language": "Solidity",
  "sources": {
    "contracts/unUSD.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n// programmed = $1\npragma solidity 0.8.19;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ninterface IUniswapV2Factory {\n\tfunction createPair(address tokenA, address tokenB) external returns (address pair);\n}\n\ninterface IUniswapV2Router01 {\n\tfunction factory() external pure returns (address);\n\n\tfunction WETH() external pure returns (address);\n\n\tfunction addLiquidityETH(\n\t\taddress token,\n\t\tuint amountTokenDesired,\n\t\tuint amountTokenMin,\n\t\tuint amountETHMin,\n\t\taddress to,\n\t\tuint deadline\n\t) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n}\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n\tfunction swapExactTokensForETHSupportingFeeOnTransferTokens(\n\t\tuint amountIn,\n\t\tuint amountOutMin,\n\t\taddress[] calldata path,\n\t\taddress to,\n\t\tuint deadline\n\t) external;\n}\n\ncontract unUSD is ERC20, Ownable {\n\tIUniswapV2Router02 public immutable router;\n\taddress public immutable uniswapV2Pair;\n\n\t// addresses\n\taddress public devWallet;\n\taddress private marketingWallet;\n\n\t// limits\n\tuint256 private maxBuyAmount;\n\tuint256 private maxSellAmount;\n\tuint256 private maxWalletAmount;\n\n\tuint256 private thresholdSwapAmount;\n\n\t// status flags\n\tbool private isTrading = false;\n\tbool public swapEnabled = false;\n\tbool public isSwapping;\n\n\tstruct Fees {\n\t\tuint8 buyTotalFees;\n\t\tuint8 buyMarketingFee;\n\t\tuint8 buyDevFee;\n\t\tuint8 buyLiquidityFee;\n\t\tuint8 sellTotalFees;\n\t\tuint8 sellMarketingFee;\n\t\tuint8 sellDevFee;\n\t\tuint8 sellLiquidityFee;\n\t}\n\n\tFees public _fees =\n\t\tFees({\n\t\t\tbuyTotalFees: 0,\n\t\t\tbuyMarketingFee: 0,\n\t\t\tbuyDevFee: 0,\n\t\t\tbuyLiquidityFee: 0,\n\t\t\tsellTotalFees: 0,\n\t\t\tsellMarketingFee: 0,\n\t\t\tsellDevFee: 0,\n\t\t\tsellLiquidityFee: 0\n\t\t});\n\n\tuint256 public tokensForMarketing;\n\tuint256 public tokensForLiquidity;\n\tuint256 public tokensForDev;\n\tuint256 private taxTill;\n\t// exclude from fees and max transaction amount\n\tmapping(address => bool) private _isExcludedFromFees;\n\tmapping(address => bool) public _isExcludedMaxTransactionAmount;\n\tmapping(address => bool) public _isExcludedMaxWalletAmount;\n\n\t// store addresses that a automatic market maker pairs. Any transfer *to* these addresses\n\t// could be subject to a maximum transfer amount\n\tmapping(address => bool) public marketPair;\n\tmapping(address => bool) public _isBlacklisted;\n\n\tevent SwapAndLiquify(uint256 tokensSwapped, uint256 ethReceived);\n\n\tmodifier lockTheSwap() {\n\t\tisSwapping = true;\n\t\t_;\n\t\tisSwapping = false;\n\t}\n\n\tconstructor(\n\t\taddress _marketingWallet,\n\t\taddress _devWallet,\n\t\tstring memory _name,\n\t\tstring memory _symbol,\n\t\tuint256 _totalSupply,\n\t\tuint256 _prelaunchAmount,\n\t\taddress _prelaunch\n\t) ERC20(_name, _symbol) {\n\t\trouter = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n\n\t\tuniswapV2Pair = IUniswapV2Factory(router.factory()).createPair(address(this), router.WETH());\n\n\t\t_isExcludedMaxTransactionAmount[address(router)] = true;\n\t\t_isExcludedMaxTransactionAmount[address(uniswapV2Pair)] = true;\n\t\t_isExcludedMaxTransactionAmount[owner()] = true;\n\t\t_isExcludedMaxTransactionAmount[address(this)] = true;\n\t\t_isExcludedMaxTransactionAmount[_prelaunch] = true;\n\n\t\t_isExcludedFromFees[owner()] = true;\n\t\t_isExcludedFromFees[_prelaunch] = true;\n\t\t_isExcludedFromFees[address(this)] = true;\n\n\t\t_isExcludedMaxWalletAmount[owner()] = true;\n\t\t_isExcludedMaxWalletAmount[address(this)] = true;\n\t\t_isExcludedMaxWalletAmount[address(uniswapV2Pair)] = true;\n\t\t_isExcludedMaxWalletAmount[_prelaunch] = true;\n\n\t\tmarketPair[address(uniswapV2Pair)] = true;\n\n\t\tapprove(address(router), type(uint256).max);\n\n\t\tmaxBuyAmount = (_totalSupply * 2) / 100; // 2% maxTransactionAmountTxn\n\t\tmaxSellAmount = (_totalSupply * 2) / 100; // 2% maxTransactionAmountTxn\n\t\tmaxWalletAmount = (_totalSupply * 2) / 100; // 2% maxWallet\n\t\tthresholdSwapAmount = (_totalSupply * 1) / 10000; // 0.01% swap wallet\n\n\t\t_fees.buyMarketingFee = 1;\n\t\t_fees.buyLiquidityFee = 1;\n\t\t_fees.buyDevFee = 1;\n\t\t_fees.buyTotalFees = _fees.buyMarketingFee + _fees.buyLiquidityFee + _fees.buyDevFee;\n\n\t\t_fees.sellMarketingFee = 1;\n\t\t_fees.sellLiquidityFee = 1;\n\t\t_fees.sellDevFee = 1;\n\t\t_fees.sellTotalFees = _fees.sellMarketingFee + _fees.sellLiquidityFee + _fees.sellDevFee;\n\n\t\tmarketingWallet = _marketingWallet;\n\t\tdevWallet = _devWallet;\n\n\t\t_mint(msg.sender, _totalSupply - _prelaunchAmount);\n\t\t_mint(_prelaunch, _prelaunchAmount);\n\t}\n\n\treceive() external payable {}\n\n\t// once enabled, can never be turned off\n\tfunction swapTrading() external onlyOwner {\n\t\tisTrading = true;\n\t\tswapEnabled = true;\n\t\ttaxTill = block.number + 2;\n\t}\n\n\t// change the minimum amount of tokens to sell from fees\n\tfunction updateThresholdSwapAmount(uint256 newAmount) external onlyOwner returns (bool) {\n\t\tthresholdSwapAmount = newAmount;\n\t\treturn true;\n\t}\n\n\tfunction updateMaxTxnAmount(uint256 newMaxBuy, uint256 newMaxSell) external onlyOwner {\n\t\trequire(((totalSupply() * newMaxBuy) / 1000) >= (totalSupply() / 100), \"maxBuyAmount must be higher than 1%\");\n\t\trequire(((totalSupply() * newMaxSell) / 1000) >= (totalSupply() / 100), \"maxSellAmount must be higher than 1%\");\n\t\tmaxBuyAmount = (totalSupply() * newMaxBuy) / 1000;\n\t\tmaxSellAmount = (totalSupply() * newMaxSell) / 1000;\n\t}\n\n\tfunction updateMaxWalletAmount(uint256 newPercentage) external onlyOwner {\n\t\trequire(\n\t\t\t((totalSupply() * newPercentage) / 1000) >= (totalSupply() / 100),\n\t\t\t\"Cannot set maxWallet lower than 1%\"\n\t\t);\n\t\tmaxWalletAmount = (totalSupply() * newPercentage) / 1000;\n\t}\n\n\t// only use to disable contract sales if absolutely necessary (emergency use only)\n\tfunction toggleSwapEnabled(bool enabled) external onlyOwner {\n\t\tswapEnabled = enabled;\n\t}\n\n\tfunction blacklistAddress(address account, bool value) external onlyOwner {\n\t\t_isBlacklisted[account] = value;\n\t}\n\n\tfunction updateFees(\n\t\tuint8 _marketingFeeBuy,\n\t\tuint8 _liquidityFeeBuy,\n\t\tuint8 _devFeeBuy,\n\t\tuint8 _marketingFeeSell,\n\t\tuint8 _liquidityFeeSell,\n\t\tuint8 _devFeeSell\n\t) external onlyOwner {\n\t\t_fees.buyMarketingFee = _marketingFeeBuy;\n\t\t_fees.buyLiquidityFee = _liquidityFeeBuy;\n\t\t_fees.buyDevFee = _devFeeBuy;\n\t\t_fees.buyTotalFees = _fees.buyMarketingFee + _fees.buyLiquidityFee + _fees.buyDevFee;\n\n\t\t_fees.sellMarketingFee = _marketingFeeSell;\n\t\t_fees.sellLiquidityFee = _liquidityFeeSell;\n\t\t_fees.sellDevFee = _devFeeSell;\n\t\t_fees.sellTotalFees = _fees.sellMarketingFee + _fees.sellLiquidityFee + _fees.sellDevFee;\n\t\trequire(_fees.buyTotalFees <= 30, \"Must keep fees at 30% or less\");\n\t\trequire(_fees.sellTotalFees <= 30, \"Must keep fees at 30% or less\");\n\t}\n\n\tfunction excludeFromFees(address account, bool excluded) public onlyOwner {\n\t\t_isExcludedFromFees[account] = excluded;\n\t}\n\n\tfunction excludeFromWalletLimit(address account, bool excluded) public onlyOwner {\n\t\t_isExcludedMaxWalletAmount[account] = excluded;\n\t}\n\n\tfunction excludeFromMaxTransaction(address updAds, bool isEx) public onlyOwner {\n\t\t_isExcludedMaxTransactionAmount[updAds] = isEx;\n\t}\n\n\tfunction setMarketPair(address pair, bool value) public onlyOwner {\n\t\trequire(pair != uniswapV2Pair, \"Must keep uniswapV2Pair\");\n\t\tmarketPair[pair] = value;\n\t}\n\n\tfunction setWallets(address _marketingWallet, address _devWallet) external onlyOwner {\n\t\tmarketingWallet = _marketingWallet;\n\t\tdevWallet = _devWallet;\n\t}\n\n\tfunction isExcludedFromFees(address account) public view returns (bool) {\n\t\treturn _isExcludedFromFees[account];\n\t}\n\n\tfunction _transfer(address sender, address recipient, uint256 amount) internal override {\n\t\tif (amount == 0) {\n\t\t\tsuper._transfer(sender, recipient, 0);\n\t\t\treturn;\n\t\t}\n\n\t\tif (sender != owner() && recipient != owner() && !isSwapping) {\n\t\t\tif (!isTrading) {\n\t\t\t\trequire(_isExcludedFromFees[sender] || _isExcludedFromFees[recipient], \"Trading is not active.\");\n\t\t\t}\n\t\t\tif (marketPair[sender] && !_isExcludedMaxTransactionAmount[recipient]) {\n\t\t\t\trequire(amount <= maxBuyAmount, \"buy transfer over max amount\");\n\t\t\t} else if (marketPair[recipient] && !_isExcludedMaxTransactionAmount[sender]) {\n\t\t\t\trequire(amount <= maxSellAmount, \"Sell transfer over max amount\");\n\t\t\t}\n\n\t\t\tif (!_isExcludedMaxWalletAmount[recipient]) {\n\t\t\t\trequire(amount + balanceOf(recipient) <= maxWalletAmount, \"Max wallet exceeded\");\n\t\t\t}\n\t\t\trequire(!_isBlacklisted[sender] && !_isBlacklisted[recipient], \"Blacklisted address\");\n\t\t}\n\n\t\tuint256 contractTokenBalance = balanceOf(address(this));\n\n\t\tbool canSwap = contractTokenBalance >= thresholdSwapAmount;\n\n\t\tif (\n\t\t\tcanSwap &&\n\t\t\tswapEnabled &&\n\t\t\t!isSwapping &&\n\t\t\tmarketPair[recipient] &&\n\t\t\t!_isExcludedFromFees[sender] &&\n\t\t\t!_isExcludedFromFees[recipient]\n\t\t) {\n\t\t\tswapBack();\n\t\t}\n\n\t\tbool takeFee = !isSwapping;\n\n\t\t// if any account belongs to _isExcludedFromFee account then remove the fee\n\t\tif (_isExcludedFromFees[sender] || _isExcludedFromFees[recipient]) {\n\t\t\ttakeFee = false;\n\t\t}\n\n\t\t// only take fees on buys/sells, do not take on wallet transfers\n\t\tif (takeFee) {\n\t\t\tuint256 fees = 0;\n\t\t\tif (block.number < taxTill) {\n\t\t\t\tfees = (amount * 99) / 100;\n\t\t\t\ttokensForMarketing += (fees * 94) / 99;\n\t\t\t\ttokensForDev += (fees * 5) / 99;\n\t\t\t} else if (marketPair[recipient] && _fees.sellTotalFees > 0) {\n\t\t\t\tfees = (amount * _fees.sellTotalFees) / 100;\n\t\t\t\ttokensForLiquidity += (fees * _fees.sellLiquidityFee) / _fees.sellTotalFees;\n\t\t\t\ttokensForMarketing += (fees * _fees.sellMarketingFee) / _fees.sellTotalFees;\n\t\t\t\ttokensForDev += (fees * _fees.sellDevFee) / _fees.sellTotalFees;\n\t\t\t}\n\t\t\t// on buy\n\t\t\telse if (marketPair[sender] && _fees.buyTotalFees > 0) {\n\t\t\t\tfees = (amount * _fees.buyTotalFees) / 100;\n\t\t\t\ttokensForLiquidity += (fees * _fees.buyLiquidityFee) / _fees.buyTotalFees;\n\t\t\t\ttokensForMarketing += (fees * _fees.buyMarketingFee) / _fees.buyTotalFees;\n\t\t\t\ttokensForDev += (fees * _fees.buyDevFee) / _fees.buyTotalFees;\n\t\t\t}\n\n\t\t\tif (fees > 0) {\n\t\t\t\tsuper._transfer(sender, address(this), fees);\n\t\t\t}\n\n\t\t\tamount -= fees;\n\t\t}\n\n\t\tsuper._transfer(sender, recipient, amount);\n\t}\n\n\tfunction swapTokensForEth(uint256 tAmount) private {\n\t\t// generate the uniswap pair path of token -> weth\n\t\taddress[] memory path = new address[](2);\n\t\tpath[0] = address(this);\n\t\tpath[1] = router.WETH();\n\n\t\t_approve(address(this), address(router), tAmount);\n\n\t\t// make the swap\n\t\trouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\n\t\t\ttAmount,\n\t\t\t0, // accept any amount of ETH\n\t\t\tpath,\n\t\t\taddress(this),\n\t\t\tblock.timestamp\n\t\t);\n\t}\n\n\tfunction addLiquidity(uint256 tAmount, uint256 ethAmount) private {\n\t\t// approve token transfer to cover all possible scenarios\n\t\t_approve(address(this), address(router), tAmount);\n\n\t\t// add the liquidity\n\t\trouter.addLiquidityETH{ value: ethAmount }(address(this), tAmount, 0, 0, address(this), block.timestamp);\n\t}\n\n\tfunction swapBack() private lockTheSwap {\n\t\tuint256 contractTokenBalance = balanceOf(address(this));\n\t\tuint256 toSwap = tokensForLiquidity + tokensForMarketing + tokensForDev;\n\t\tbool success;\n\n\t\tif (contractTokenBalance == 0 || toSwap == 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (contractTokenBalance > thresholdSwapAmount * 20) {\n\t\t\tcontractTokenBalance = thresholdSwapAmount * 20;\n\t\t}\n\n\t\t// Halve the amount of liquidity tokens\n\t\tuint256 liquidityTokens = (contractTokenBalance * tokensForLiquidity) / toSwap / 2;\n\t\tuint256 amountToSwapForETH = contractTokenBalance - liquidityTokens;\n\n\t\tuint256 initialETHBalance = address(this).balance;\n\n\t\tswapTokensForEth(amountToSwapForETH);\n\n\t\tuint256 newBalance = address(this).balance - initialETHBalance;\n\n\t\tuint256 ethForMarketing = (newBalance * tokensForMarketing) / toSwap;\n\t\tuint256 ethForDev = (newBalance * tokensForDev) / toSwap;\n\t\tuint256 ethForLiquidity = newBalance - (ethForMarketing + ethForDev);\n\n\t\ttokensForLiquidity = 0;\n\t\ttokensForMarketing = 0;\n\t\ttokensForDev = 0;\n\n\t\tif (liquidityTokens > 0 && ethForLiquidity > 0) {\n\t\t\taddLiquidity(liquidityTokens, ethForLiquidity);\n\t\t\temit SwapAndLiquify(amountToSwapForETH, ethForLiquidity);\n\t\t}\n\n\t\t(success, ) = address(devWallet).call{ value: (address(this).balance - ethForMarketing) }(\"\");\n\t\t(success, ) = address(marketingWallet).call{ value: address(this).balance }(\"\");\n\t}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = _allowances[owner][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}