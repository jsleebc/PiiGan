{{
  "language": "Solidity",
  "sources": {
    "src/Gary.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.19;\r\n\r\nimport \"./IWETH9.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\";\r\nimport \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\";\r\n\r\n/*  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n    @@@@@@@@@@@@@@@@@@@@@@@@@@&&#BBBGGGBBB#&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n    @@@@@@@@@@@@@@@@@@@@@&BPY?7!~~^^^^^^^^~!7JPB&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n    @@@@@@@@@@@@@@@@@&B5?!^^^^^^^^^^^^^^^^^^^^^^!JG&@@@@@@@@@@@@@&&&@@@@@@@@@@@@@@@@@@@@@@&&&@@@@@@@@@@@\r\n    @@@@@@@@@@@@@@@#57^^:^^~~^^^^^^^^^^^^^^^^^^^^^^!YB@@@@@@#PJ7!~~!!?YG&@@@@@@@@@@@@&GY?!~~~!?YG&@@@@@@\r\n    @@@@@@@@@@@@&G?~^^^~!7????7~^^^^^^^^^^^^^^^^^^^^^~JB@@G7^:.:::::::^^~Y#@@@@@@@@#Y~:::::::^~~~75&@@@@\r\n    @@@@@@@@@@&P7^^^^^~????????!^^^^^^^^^^^^^^^^^^^^^^^~BJ:::::::::!????7~~G@@@@@@B~.:::::::!?JYY?!7#@@@\r\n    @@@@@@@@@G7^^^^^^^^!7????7!^^^^^^^^^^^^^^^^^^^^^^^^YJ.::::::::~??5BGY?^^B@@@@#~.:::::::^??5##Y?:7&@@\r\n    @@@@@@@#J^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^~P^:::::::::~??5##5?~.Y@@@@P::::::::::!?J55J7:^B@@\r\n    @@@@@@B7^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^~P:::::::::::!??JJ?!::Y@@@@G:::::::::::^!!!~::~#@@\r\n    @@@@@B!^^^^^^^^^^^^^^^^^^^^^^^^^^^^!777~^^^^^^^^^^^P?.::::::::::^^~~^:.~B@@@@&J:::::::::::::::::P@@@\r\n    @@@@&?^^^^^~~~^^^^^^^^^^^^^^^^^^^^7?????7^^^^^^^^^^!G?:::::::::::::::.~G@@@@@@&5~:::::::::::::!G@@@@\r\n    @@@&P^^^^!????~^^^^^^^^^^^^^^^^^^^!??????!^^^^^^^^^^~557^:::::::::::~Y#@@@@@@@@@#57~^:::::^~?P&@@@@@\r\n    @@@#!^^^~????7^^^^^^^^^^^^^^^^^^^^^~7????!^^^^^^^^^^^^!Y5YJ7!~!!7?Y5#@@@@@@@@@@@@@@#G5YYYPB&@@@@@@@@\r\n    @@&P^^^^^777~^^^^^^^^^^^^^^^^^^^^^^^^~~~~^^^^^^^^^^^^^^^^!?JP#GYY?77B@@@@@@@@@@@@@@@#7~!!G@@@@@@@@@@\r\n    @@&J^^^^^^^^^^^^^^^~!!!!!~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^:~BB?^^~~G@@@@@@@@@@@@@@@&?^^7#@@@@@@@@@@\r\n    @@#7^^^^^^^^^^^^^7YPPPPPPP5J7~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^5&#?^~^Y&@@@@@@@@@@@@@@&J^^J&@@@@@@@@@@\r\n    @@#!^^~!!!^^^^^~YPPPPPPPPPPPP5?~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^J&&B7~~7#@@@@@@@@@@@@@@&J^~P&@@@@@@@@@@\r\n    @@#~^~????7^^^~YPPPPPPPPPPPPPPP57^^^^^^^^^^^^~~~^^^^^^^^^^^^^?#@@G~~~G@@@@@@@@@@@@@@&J^!B@@@@@@@@@@@\r\n    @@#!^~?????~^^JGPPP5J??J5PPPPPPPPJ^^^^^^^^^^7???7^^^^^^^^^^^^?#&@&Y^^Y&@@@@@@@@@@@@@&?^7#@@@@@@@@@@@\r\n    @@&J^^~7?7~^^~PPPP?^^^^^^!YPPPPPPGJ^^^^^^^^^7????7^^^^^^^^^^^?#@@@#7^7#@@@@@@@@@@@@@#7^J&@@@@@@@@@@@\r\n    @@&P^^^^^^^^^7PPPY^^^^^^^^^?PPPPPPP?^^^^^^^^^7????^^^^^^^^^^^Y&@@@@G~~P&@@@@@@@@@@@@#!^5&@@@@@@@@@@@\r\n    @@@#!^^^^^^^^7PPPJ^^^^^^^^^^?PPPPPPP!^^^^^^^^^~!!~^^^^^^^^^^^P&@@@@&J^?#@@@@@@@@@@@@B~~G&@@@@@@@@@@@\r\n    @@@&5^^^^^^^^!PPPY^^^^^^^^^^^YPPPPPPY^^^^^^^^^^^^^^^^^^^^^^^~G&@@@@@G~~G&@@@@@@@@@@@G~!B@@@@@@@@@@@@\r\n    @@@@#7^^^^^^^^YPPP!^^^7~^^^^^!PPPPPPP7^^^^^^^^^^^^^^^^^^^^^^!#&@@@@@#?^J&@@@@@@@@@@@P^?#@@@@@@@@@@@@\r\n    @@@@&G~^^^^^^^7PPP5!^^55~^^^^^?PPPPPP5^^^^^^^^^^^^^^^^^^^^^^J#@@@@@@&5^!B@@@@@@@@@@@5^J&@@@@@@@@@@@@\r\n    @@@@@&P^^^^^^^^?PPPPY5PPY^^^^^~5PPPPPP7^^^^^^^^^^^^^^^^^^^^^5&@@@@@@&G~^5&@@@@@@@@@&J^5&@@@@@@@@@@@@\r\n    @@@@@@&5^^^^^^^^?PPPPPPPG?^^^^^?PPPPPP5^^^^^^^^^^^^^^^^^^^^~B&@@@@@@@#7^7#@@@@@@@@@&?^P&@@@@@@@@@@@@\r\n    @@@@@@@&Y^^^^^^^^!YPPPPGP!^^^^^~5PPPPPP!^^^^^^^^^^^^^^^^^^^7#@@@@@@@@&Y^~P&@@@@@@@@#!~G@@@@@@@@@@@@@\r\n    @@@@@@@@#Y^^^^^^^^^!JYJ?~^^^^^^^JPPPPPP?^^^^^^^^^^^^^^^^^^^5&@@@@@@@@&G~^J#@@@@@@@@G~!B@@@@@@@@@@@@@\r\n    @@@@@@@@@#Y^^^^^^^^^^^^^^^^^^^^^!PPPPPPY^^^^^^^^^^^^^^^^^^~B&@@@@@@@@&B!~~G&@@@@@@@5^7#@@@@@@@@@@@@@\r\n    @@@@@@@@@@&5^^^^^^^^^^^^^^^^^^^^~5PPPPPY^^^^^^^^^^^^^^^^^^7#@@@@@@@@@&B!~~?#@@@@@@&J^?#@@@@@@@@@@@@@\r\n    @@@@@@@@@@@&P~^^^^^^^^^^^^^^^^^^^5PPPPPY^^^^^^^^^^^^^^^^^^Y@@@@@@@@@@&#7~~~Y&@@@@@#7^?&@@@@@@@@@@@@@\r\n    @@@@@@@@@@@@&B7^^^^^^^^^^^^^^^^^!PPPPPPJ^^^^^^^^^^^^^^^^^^7J5B&@@@@@@@#!~~~~P@@@@@B!^?&@@@@@@@@@@@@@\r\n    @@@@@@@@@@@@@@#Y^^^^^^^^^^^^^^^^YPPPPPP!^^^^^^^^^^^^^^^^^^^::^!5&@@@@@B!~~~~!G@@@&Y^^7#@@@@@@@@@@@@@\r\n    @@@@@@@@@@@@@@@&G!^^^^^^^^^^^^^?PPPPPPY^^^^^^^^^^^^^^^^~!??JJJJYB&&&&&P~~~~~~!G@@B7!!!B@@@@@@@@@@@@@\r\n    @@@@@@@@@@@@@@@&G~^^^^^^~~~^^^?PPPPPPP!^^^^^^^^^^^^^~7Y5Y?7!!77???77!77~~~~~~~!JJJJYY5G#&@@@@@@@@@@@\r\n    @@@@@@@@@@@@@@@@BJJJJYYYYYYYY5GGGGGGGJ~~~^^^^^^~!7?YYJ7~^~~~~~~~^^~~~~~~~~~~~~~^^^^~~~~!5#&@@@@@@@@@\r\n    @@@@@@@@@&&#BGPY??7!!~~~~~~~~~!!77????JJJJJ???????7~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^!YG&@@@@@@@\r\n    @@@@@@@@&#Y^::::::^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^:::::::::^^^^~~~~~^^::::.^!7?5&@@@\r\n    @@@@@@@@@&#BGGBBGJ^:::::^^^:::::^::::::::::::::::^^::::::::::::::::::::....:::::.::^~!!!~^::!JG&@@@@\r\n    @@@@@@@@@@@@@@@@@&#GGGGBBBGPY7~^::::^~!7?Y55YJ7!!!7?JYY55Y?!^^::::^~!7?JJ??7!!!7J5GB#&@@&BGB&@@@@@@@\r\n    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@&&BGGGB##&@@@@@@@&&&&@@@@@@@@@&#BGGGB#&&@@@@@@&&&&@@@@@@@@@@@@@@@@@@@@@\r\n    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@  */\r\n\r\ncontract Gary is ERC20 {\r\n    address immutable Gensler;\r\n    IUniswapV2Pair immutable Exemption;\r\n\r\n    bool internal _renounced;\r\n    uint256 internal _launch;\r\n\r\n    bool constant IS_SECURITY = false;\r\n\r\n    uint256 constant GARYS = 650_000_000_000_000 * 1e18;\r\n    uint256 constant A_NIBBLE = 65_000_000_000 * 1e18;\r\n\r\n    mapping(address => bool) private _securities;\r\n    mapping(address => bool) private _participants;\r\n\r\n    error NotAuthorized();\r\n    error NoGarysForYou();\r\n    error ReportingError();\r\n    error FilingExemption();\r\n    error ComeInAndRegisterWithUs();\r\n\r\n    event Renounced();\r\n\r\n    IWETH9 immutable WETH = IWETH9(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n    IUniswapV2Factory immutable Factory =\r\n        IUniswapV2Factory(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f);\r\n\r\n    modifier isAuthorized() {\r\n        if (msg.sender != Gensler && !_renounced) revert NotAuthorized();\r\n\r\n        _;\r\n    }\r\n\r\n    constructor() ERC20(\"Gary\", \"GARY\") {\r\n        Gensler = msg.sender;\r\n        _renounced = false;\r\n        _launch = block.number + 75;\r\n        _mint(address(this), GARYS);\r\n        _transfer(address(this), msg.sender, GARYS / 25);\r\n\r\n        Exemption = IUniswapV2Pair(\r\n            Factory.createPair(\r\n                address(this),\r\n                0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\r\n            )\r\n        );\r\n    }\r\n\r\n    function renounce() external isAuthorized {\r\n        _renounced = true;\r\n\r\n        emit Renounced();\r\n    }\r\n\r\n    function COMPLY(uint256 _nibbles) external payable {\r\n        if (\r\n            block.number >= _launch ||\r\n            _nibbles >= 10 ||\r\n            msg.value < 0.1 ether * _nibbles ||\r\n            balanceOf(address(this)) < A_NIBBLE * 2 * _nibbles ||\r\n            _securities[msg.sender] ||\r\n            _participants[msg.sender]\r\n        ) revert NoGarysForYou();\r\n\r\n        _participants[msg.sender] = true;\r\n\r\n        uint256 _balance = address(this).balance;\r\n        WETH.deposit{value: _balance}();\r\n\r\n        WETH.transfer(address(Exemption), _balance);\r\n        _transfer(address(this), address(Exemption), A_NIBBLE * _nibbles);\r\n\r\n        // Explicity forbid the movement of these tokens\r\n        Exemption.mint(address(this));\r\n\r\n        _transfer(address(this), msg.sender, A_NIBBLE * _nibbles);\r\n    }\r\n\r\n    function security() external pure returns (bool) {\r\n        // %%%&&&&&&&&&&&&&%/.........................................,,,,,,,,,,,**/#&@@@@&&&&&&%%%%%%%%##%%%%%%%%%%%%#####%%%%%%%%(.           *#&&&&%%%&&&&&&&&%##((((######(((####%%%%%%%&&&@@@&&&&&&@@@@@@&%%%&\r\n        // %%%&&&&&&&&&&&%(,,.,.......................................,,,,,,,,,,,**/**/#%%%%%%%%%%%%%%%####%%%%%%%%%%%#####%%%%%%%%%/.        ,/%&&&&&&%%&&&&@@&&&%##((((#####((######%%%%%%&&&@@@&&&&&&@@@@@@&%&&&\r\n        // %%%%&&&&&&&&&#*,,,..,,....................................,,,,,,,,,,,,*/////*,/###%%%%%%%%%#####%%%%%%%%%%%######%%%%%%%%%/,     .*/#&&&&&&&%%&&&&@@@&&%#(((((######(#######%%%%%&&&@@@&&&&&%%&%%(#%####\r\n        // %%%&&&&&&&&%#****,,..,,,......       ..............  .........,,,,,,,,***/////*,/#%%%%%%%%%######%%###############%%%%%%%%#(/*,,,/(%&&&&&&&&%%%&&@@@&&%##((((###############%%%%%&&&@@@&&&(%//%#(((/%(((\r\n        // %%%%&&&&&&#/**,,,,,,,.......................................,,,,,,,,,,***//(((***/#%%%%%%%########################%%%%%%%%%%#(//(#%&&&&&&&&&%%%&&@@&&&%##(((((##############%%%%%%&&@@@&&&&&&&&&&&&&&@@&\r\n        // %%%&&&&&&(*,***,,,,,.......,,,,.......,.............,.,,,,,,,,,,.,,,,,**///((((//**#%%%%%%########%%##############%%%%%%%%%%%%#%%%&@&&&&&&&&&%&&&&@@&&%##(((((##############%%%%%%&&@@&&&&&&&&&&&&&&&&&&\r\n        // &&&&@@@@#/******,,,,.................,,,.,,......,,,,,,,,,,,,,,,..,,,,*///(((((//(((%%%%%%########################%%%%%%%%%%%%%%&&&@&&&&&&&&&&&&&@@@@&&%#(((((###############%%%%%&&&@@&&&&&&&&&&&&&&&&&\r\n        // &&&&&@@&****/****,....,,,***//(##((//*/*,,,,,,**/(##%%&%%#(/*/*/****,,,*/(((##(((/(((%%#%##########################%%%%%%%%%%%%%%&&&&&&&&&&&&&&&&&@@@@&%#((((################%%%%%&&&@@&&&%&&&&&&&&&&&&&\r\n        // @@@@&&&%****//**,,,*//(/((#%%&%%%%%%##(/////***/(####%%%%%%##(/*,,///////((####(((//(%################################%%%%%%%%%%%%&&&&&&&&&&&&&&&&&&&&&%##((#################%%%%%&&&@@&&&&&&&@@@&&&&&&&\r\n        // @@@@&&&(****//****//*,*****/((#((//((#((*,..,,,/((((((((((//****//*///((((((##(###(/(########((########################%%%%%%%%%%%&&&&&&&&&&&&&&&&&&&&&%##((#################%%%%%&&&@@&&&%&&@@@@@@@&&&&\r\n        // @@@@@@&**//*****/(/*/(//(#%##(//(#(#%#((*,....,///((((/((%%@@@@@&#(((/((((((((###%#(#########((########################%%%%%%%%%%&&&&&&&&&&&&&&&&@@@@@&%##((#################%%%%%&&&&@&&&&&&@@@@@@@&&&&\r\n        // @@@@@@&//#(//***//(#(%%%@@@@@&((##(//(//,.. .,*//*/*//((///#%&&&&#%%#(((/(######%%%#(%%%####(((((######################%%%%%%%%%&&&&&&&&&&@@@@@@@@@@@@@&%###################%%%%%%&&&@@&&&&&&@@@@@@@&&&&\r\n        // @@@@@@&*/#(//***//(#//////**********//**.   ..*//****/////****,******(#(/(#((###%%%%##%%%%###((((#####################%%%%%%%%%%&&&@@&&&@@@@@@@@@@@@@@&%%#######%%##########%%%%%%&&&@@&&&&&&&@@@@&&&&&&\r\n        // @@@@@@@(###(/****//**********////******,..  .,*///**,,**//*****////////**/((((##%%%&%%%%%%####(((####(###############%%%%%%%%%%%%&&&@&&&&&&@&&&&&&&&&&%%#((###################%%%%%&&&@&&&&&&&&&&&&&&&&&\r\n        // @@@@@@@%%##(/*****///(((//*****,,,,,,**,......,,*/***,,,,,********,,,,,,**/((((#%%%&%%#######((((((((################%%%%%%%%%%%%%&&&&&&&&&&&&&&&&&%%%##((((######((##########%%%%%%&&&&&%%%%%%%%%%%%%%%\r\n        // @@@@@@@%###(/***,,,,,**,,,.......,,**,,.......,,**/**,,,,,,,,,,,,.,,,,****/(((((#%%%%&%#####(((((((((((((#########################%%%&&&&&&&&&%%%%%%%%##((########(####%%#####%%%%%%&&&%%%####%%%%%%%%%%\r\n        // @@@@@@&###((***,,,,,,,,,,........,***,.........,,*//*,,,,,,,.....,,,,****//((#(#####%%#######(((//////((((((#############%%%%%%%#####%%%%%%&&&%%%%%%%#################%%%%%%%%%%%%%%%%%######%%%%%%%%%%%\r\n        // @@@@@%//(#(/**/***,,,,,,,,....,,,,,,,,,,......,*///*//*,,,...,....,,,****/(###########(#####((((///****/(((#######%%%%%%%%%%%%%%%%%%%####%%%%%%%%%%%##################%%%%%%%%%%&&&&%%########%%%%%%%%%%\r\n        // @@@@&(#(/(((/////***,*,,,,,,,,,****/((//******/(%&&#(//***,,,,.,,,,*****//((#########(/(####((//*,,,,,*/(#%%%%%%%%%%%%%&&%%%%&&%%%%%%%%%##%%%%%%%%%###################%%%%%%%%%%&&&&%%########%%%%%%%%%%\r\n        // @@@@%((((///(/(///**/*****,,,,*****(#%&&#(#####%%&&%#///*,,/**,,,***/////(((######/*((//(((#(/*,....,*/#%%&&&%%&&&&&&&&&&&&&&&&&&&&&&%%%%%%%%%%%%%################%###%%%%%%%%%%%&&&%%%%%%%%%%%%%%%%%%%%\r\n        // @@@@%////*,,///////////****,***,,,,,/((##(#%%%#(#(((/*,,,,,,,*/****///////(##(###(**/#(//(((/,.      ,(&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&%%%%%%%%%######################%%%%%%%%%%%&&&%%%%%%%%%%%%%%%%%%&%\r\n        // @@@@#*//*,.,*/////**////*****,,,,,,**//////***//*////*****,,,,**/*////////((((##(/*//((/*//*.        ,(&&@&&&&&&&@&&&&&&&&&&&&&&&&&&&&&%%%%%%%%%%######################%%%%%%%%%%%%%%%%%%%%%%%%%%%%%&&&&\r\n        // @@@@%*/***,,***//**/******,*****,*,******************************/*///////((((##(((/*///*//.        ./%&&&&&&&&&@@&&&&&&&&&&&&&&&&&&&&&&%%%%%%%%#######################%%%%%%%%%%%%%%%%%%%%%%&&&%%%&&&&%\r\n        // @@@@&/,,,****/*//********,*********,,*********************////*/*//*/////(((((##(/////((//,        /%&&&@@@@&&&&@&@@@@&&&&&&&&&&&&&&&&&&&%%%%%%%#######################%%%%%%%%%%&&&&&&&%&&&&&&%%%%&&&&&\r\n        // @@@@@%*,.,*//////*******,**///////(((#########%%%%%######(//******/*//*///((((#%#/*///(//(.       ,(&&&&@@@@&&&&&&@@@@&&&&&&&&@@&&&&&&&&&%%%%%%%#####################%%%&&&&&&&&&&@@@&&&&&&&&&&&&&&&&&&@\r\n        // @@@@@@(,*/**,*//********,**/((#%%%%%&%((/*,******//#%&&&%%#(/*,***(///*///(((##@@#/////(((.       (%&&&@@@@@&&&&&&@@@@@&&@@&@@@@@@&&&&&&%%%%%%%%############%%%%###%%%%&&&&&&@@@@@@@@@&&&&&&&&&&&&&&&&@@\r\n        // @@@@@@@/,*,**/////**///**,**/#(/*,,,,,,,,,,,,,,********///((**,,*/((/**//((((#%@@@%#(//(##*       /%&&&@@@@@&&&&&@@@@@@@@@@@@@@@@@&&&&&%%%%%%%%%######%%%%%%%%%%%%%%%&&&@@@@@@@@@@@@@@@&&&&&%&&&&&&&&&@@\r\n        // &&@@@@@@%///(#(/////////**,*//****,****,,****,*********/*///**,*/##(////((#(##%@@&%#(//(#%/.      (&&&@@@@@@@&&&&@@@@@@@@@@@@@@&&&&&&&&%%%%%%%%#######%%%%%%%%%%%%&&&@@@@@@@@@@@@@@@@@@@@&%%%&&&&%%%%%&@\r\n        // %%%&@@@@@@%###((((////(((/*,**///////***************////(/(/***(##(///(((####%@&&&%#(///(#(*.   ,#&@@@@&@@@@@@@&&@@@@@@@@@@@&&&&%%%%&&&%%%%%%%%######%%%%%%%%%%%%%&@@@@@@@@@@@@@@@@@@@@@@&%%&&&&&%%#%%&@\r\n        // %%%%%%&%%&%%%##(((((((((((/////((((/////////////////((((((///((##(//((((#((##&&##%##(//((##(/*/(%&@@&&&&&&@&@&@@&&&&%%%##&&&&&&%%%%%&&&%%%%%%%#(##(##%%%%###%%%&&&@@@@@&&@@@@@@@@@@@@@@@@@%%%&&&&%%%%%&@\r\n        // %%%%&&&&&&@@@@&##(((((((((((/(((((((((((////((////((((((/(/*/(#(////((((###%%%#(###* *(. ##(((%&&&@@&%&@@@@&%&@@&%%/ (#..%#%&&&%#%%&%&%%%%%&%#( /(/(###(#####%&%%&@@@@@ ,@&@@@@&&@@@@@&@@&#%%&&&&&%%%%%&\r\n        // %%%&&&&&@@@@@@@@%##((((((/////////(//////********//////****//((/////(####%%%%#///(((/  ,#( ,#( // &@..@@@% /&( %, &( %&..@% // %&,.% *&&&&# *%/ ** *, /#. ###%#%&..@@@@ ,@% #* &@..& /@# (&( #&&&&&%%%%&\r\n        // &&&&&@@@@@@@@@@@@@####(((/////*************///***////******//(///(((##%%%%%%/,,,,,,**. (## ./, (/ #%..@@@& ,&%/@, @# #&..&% /( /&##& /@@@&% .(, ,, ., ,///###/ (&. @@@@ ,@& #( #@(%& (@% *%, %%#&&&%%%%&\r\n        // &&&&&&&&&&&&@@@@@@%&&%%##((((//******//////*///////******//((((##%%%&&&&%%%,,,,.....,*/((###((#%@@@@@@@@@@@@@@&@@@@@@@@&&&&&&@@@@@@@@@@@@@@@&%#(*,...,/((((##%&@@@@@@@@@@@@@@@@@@@@@@@@@@@&%%&,,&&&&%%%%\r\n        // &&&&&&&&&&&&&&&&&&&@@@&&&%%##(///****///////(////*******/((###%%%&&&&&&%%%&*,//*,,,*//(##%%%%%%&@@@@@@@@@@@@@@@@@@@@@@&&&%%&&&&@@@@@@@@@@@@@@&&%(*...,/((((#%&@@@@@@@@@@@@@@@@@@@@@@@@@@@@&%%&&&&&&&%%#%\r\n        // &&&&&&&&&&&&@@@@@@@@@@@@@@&&&%##(((/////(((((/////////((###%%%%%%&&&&&&%%*****%##((##%%%%&&&&&&@@@@@@@@@@@@@@@@@@@@@@@# (# /&&&@@@@@@@@@@@@@ *@@%(*,**(((#%&&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&%%&&&&&&&&/ (\r\n        // @@@@@@@@@@@@@@@@@@@@@@@@@@@@& *&&%####((((((((((((####%%%%%%%%&&%&&&%%(****//.(%&&&#    %%   (@@# #@..@.   /@..@@ *@@@# (% // && *@.   #@@@& *@*   .#,    /@,    #&&&%    #(    ,@(   .@# %%, &*    */\r\n        // @@@@@@@@@@@@@@@@@@@@@@@@@@@&/ ,(%&@@@@&&%%%%%%%%%%%%%%%%%%&&&&&&&&%*****/////*,&&&@ ,@@..% /@@@@@( , @/ @@# %..@@ *@@@# #& (@,.,,@/ ,,,,@@@@ *# %@% /* %@.,# (#/ (%%%. ...,( #@, & /@@ *# %%, # *%( ** *\r\n        // @@@@@@@@@@&%#(((#%%%%%%%%%%&  ,*(#%&&@@@@@@&&&&&&&&&&&&&&&&&&&%///*///////////,&&&&%/..(@&,#@@@@@@* &@@%,.*&@&,./,/@@@%,#&,#@@,,@@@%,.,&@@@@,/&%,.,%&/,&@,*&(.., (%%%%/..,#(.#&*,@@*..#@@/.,*,%#,.* */./\r\n        // @&#((((#########((###%%%%%&# .,,*(#%%%%%&@&&@&&&&&&&&&&&&&#////////////////////@&&&&&%%@@@@@@@@@@,*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&&&&&&@@@@@@&#,.*#%%%%%%%%%%%%%%&@@@@@@@@@@@&&&&%*,*#&&&%\r\n        // #####%%%%%#%######%%%%&&&%&*,,,,,/(##%%%%##%&&&&&&&&&&#(/////***//////////////#@@@@&&&&%%#&@@@@@@@@@@@&&&&&&&&&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&%@&%((%%%%%%%%%%%%%%%&@@@@@@@@@@@&&%%%%%%%&&&&\r\n        // %%%%%%%########%%%%%%&%%%&@(******(((######%&&%####(((///////////////////////(@@@@&/ /%%#((######((%&@@@%#&@@&%#%@@@@&%@@&%@@&%&@@&&@@%&@%&%@@%%&@@@&%&@@, @( /&@&%%&&&&%%%%%###%%%%%%%%%%#######%%%%%%%\r\n        // %%%%%%@%%%%%%%%%%%%%%%%%%@@%,****////(#@@@@@@@@@@@@@#////////////////////////%@@@@&( #% *%% ,###* ,/((, */../ /%/ &@@@..% /( %@( %* @@ *% (@@ .#&&% *%( %, @% (@@&&&&%%%%%####((((((((###((((#####%%%%##\r\n        // %%%%%%&@&&&%%%%&%%%%%%%%@@@%..,,***/@@@@@@@@@@@@&@@&@@@#////////////////////(@@@@@@( /% .(* /%%%, #( /( ,/,*( ./*,(((((  ,%% ,%. @* #( *% #@% /%..@..##,@, @% (@@@@&&%%%%%%%%################%%%%%%%%%##\r\n        // &&&&&&%&&&&&&&&&&&%%%%&@@@@(.,,.,/@@@@@&@@@@@@@@@@&@@@@@&&//////////////////&@@@@@@@@@&&&&&%%%%%%%%%%%%&&&&%%%%%%%%%%#/..###((((((((%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&&&&&%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%#\r\n        // &&&&&&&&&&&&&&&&&&&&&&&@@@&/....%&@@@@@@@@@@@@@@@@@@@&#%%&&&#//////////////#@@@@@@@@@@@@@&&&&&&&&&&&&@@&&&&&&&%%%%%%%%%%%%#####&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&&%%%######((((((((((((((///\r\n        // @@@@@@@@@&&&&&&&&&&&&&@@@&&*..(@&&&&&&&@&@@@@@@@@@@&%%%%%&&&@@%///////////(&@@@@@@@, @@@@@&&&@@&&&@@@@@&&&&&&&&&&&&&&&&&&&%%%&@@@@@&%&@@@@@@%#&@@@%%@@@@#%@@&%@@#@@(&#@(@% /@/&@%(@///////**************\r\n        // @@@@@@@@@@&&&&&&&&&&&@@@&%%,*&&&%%&&&&&&&&@@@@&@@@&%%%#%%%%%%%&&%/////////(@@@@@@@@, .. #@. , ,@* ,..&/ ,. %( .,  .. #%. , ,&@@@@@@(*.*@@@@( ./@# ,, ##.@@@@(*@@ @@ @@@ @@ &@& @ @@@((((((((((//////////\r\n        // @@@@@@@@@@@@@@@@@@&@@@@@%%%%&&###%%&&&&@&&@@@@@@@&%####%%%%%%%%%%&&(//////%@@@@@@@@, @@..( ,///% /@@@& *@@ ,( #@* && */ ,***%&@@@@#.,(*@@@@%..,@@%..(@@(..&@@*,%*@@/@@@(@@%/@@% @@@@##########((((((((##\r\n\r\n        return IS_SECURITY;\r\n    }\r\n\r\n    function crackdown(address violator) external isAuthorized {\r\n        _securities[violator] = true;\r\n    }\r\n\r\n    function allow(address violator) external isAuthorized {\r\n        _securities[violator] = false;\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256\r\n    ) internal virtual override {\r\n        if (_launch > block.number) {\r\n            if (!(from == address(this) || from == address(0))) {\r\n                revert FilingExemption();\r\n            }\r\n        } else {\r\n            if (_securities[from] || _securities[to])\r\n                revert ComeInAndRegisterWithUs();\r\n        }\r\n    }\r\n\r\n    function finalize() external isAuthorized {\r\n        if (_launch > block.number) revert ReportingError();\r\n\r\n        _burn(address(this), balanceOf(address(this)));\r\n    }\r\n}\r\n"
    },
    "src/IWETH9.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.19;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\ninterface IWETH9 is IERC20 {\r\n    function deposit() external payable;\r\n\r\n    function withdraw(uint256) external;\r\n}\r\n"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IERC20.sol\";\r\nimport \"./extensions/IERC20Metadata.sol\";\r\nimport \"../../utils/Context.sol\";\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\r\n            // decrementing then incrementing.\r\n            _balances[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        unchecked {\r\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\r\n            _balances[account] += amount;\r\n        }\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\r\n            _totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n"
    },
    "lib/v2-core/contracts/interfaces/IUniswapV2Pair.sol": {
      "content": "pragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n"
    },
    "lib/v2-core/contracts/interfaces/IUniswapV2Factory.sol": {
      "content": "pragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../IERC20.sol\";\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "remappings": [
      "@openzeppelin/=lib/openzeppelin-contracts/",
      "@uniswap/v2-core/=lib/v2-core/",
      "ds-test/=lib/forge-std/lib/ds-test/src/",
      "forge-std/=lib/forge-std/src/",
      "openzeppelin-contracts/=lib/openzeppelin-contracts/",
      "v2-core/=lib/v2-core/contracts/"
    ],
    "optimizer": {
      "enabled": true,
      "runs": 10000
    },
    "metadata": {
      "bytecodeHash": "ipfs",
      "appendCBOR": true
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "evmVersion": "paris",
    "libraries": {}
  }
}}