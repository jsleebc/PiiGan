{{
  "language": "Solidity",
  "sources": {
    "contracts/UnclePepe.sol": {
      "content": "// SPDX-License-Identifier: Unlicensed\n\npragma solidity 0.8.13;\n\n\n/**\n * \n * \n██╗░░░██╗███╗░░██╗░█████╗░██╗░░░░░███████╗  ██████╗░███████╗██████╗░███████╗\n██║░░░██║████╗░██║██╔══██╗██║░░░░░██╔════╝  ██╔══██╗██╔════╝██╔══██╗██╔════╝\n██║░░░██║██╔██╗██║██║░░╚═╝██║░░░░░█████╗░░  ██████╔╝█████╗░░██████╔╝█████╗░░\n██║░░░██║██║╚████║██║░░██╗██║░░░░░██╔══╝░░  ██╔═══╝░██╔══╝░░██╔═══╝░██╔══╝░░\n╚██████╔╝██║░╚███║╚█████╔╝███████╗███████╗  ██║░░░░░███████╗██║░░░░░███████╗\n░╚═════╝░╚═╝░░╚══╝░╚════╝░╚══════╝╚══════╝  ╚═╝░░░░░╚══════╝╚═╝░░░░░╚══════╝\n *\n * \n * https://twitter.com/UnclePepeToken\n * \n */\n\n/**\n * Standard SafeMath, stripped down to just add/sub/mul/div\n */\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n}\n\n/**\n * ERC20 standard interface.\n */\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n\n    function decimals() external view returns (uint8);\n\n    function symbol() external view returns (string memory);\n\n    function name() external view returns (string memory);\n\n    function getOwner() external view returns (address);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    function allowance(\n        address _owner,\n        address spender\n    ) external view returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\n/**\n * Allows for contract ownership along with multi-address authorization\n */\nabstract contract Auth {\n    address internal owner;\n\n    constructor(address _owner) {\n        owner = _owner;\n    }\n\n    /**\n     * Function modifier to require caller to be contract deployer\n     */\n    modifier onlyOwner() {\n        require(isOwner(msg.sender), \"!Owner\");\n        _;\n    }\n\n    /**\n     * Check if address is owner\n     */\n    function isOwner(address account) public view returns (bool) {\n        return account == owner;\n    }\n\n    /**\n     * Transfer ownership to new address. Caller must be deployer. Leaves old deployer authorized\n     */\n    function transferOwnership(address payable adr) public onlyOwner {\n        owner = adr;\n        emit OwnershipTransferred(adr);\n    }\n\n    event OwnershipTransferred(address owner);\n}\n\ninterface IDEXFactory {\n    function createPair(\n        address tokenA,\n        address tokenB\n    ) external returns (address pair);\n}\n\ninterface IDEXRouter {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    )\n        external\n        payable\n        returns (uint amountToken, uint amountETH, uint liquidity);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n\ninterface IDividendDistributor {\n    function setShare(address shareholder, uint256 amount) external;\n\n    function deposit(uint256 amount) external;\n\n    function claimDividend(address shareholder) external;\n\n    function getDividendsClaimedOf(\n        address shareholder\n    ) external returns (uint256);\n}\n\ncontract DividendDistributor is IDividendDistributor {\n    using SafeMath for uint256;\n\n    address public _token;\n    address public _owner;\n    address public immutable BOB =\n        address(0x7D8146cf21e8D7cbe46054e01588207b51198729);\n\n    struct Share {\n        uint256 amount;\n        uint256 totalExcluded;\n        uint256 totalClaimed;\n    }\n\n    address[] private shareholders;\n    mapping(address => uint256) private shareholderIndexes;\n\n    mapping(address => Share) public shares;\n\n    uint256 public totalShares;\n    uint256 public totalDividends;\n    uint256 public totalClaimed;\n    uint256 public dividendsPerShare;\n    uint256 private dividendsPerShareAccuracyFactor = 10 ** 36;\n\n    modifier onlyToken() {\n        require(msg.sender == _token);\n        _;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == _owner);\n        _;\n    }\n\n    constructor(address owner) {\n        _token = msg.sender;\n        _owner = owner;\n    }\n\n    receive() external payable {}\n\n    function setShare(\n        address shareholder,\n        uint256 amount\n    ) external override onlyToken {\n        if (shares[shareholder].amount > 0) {\n            distributeDividend(shareholder);\n        }\n\n        if (amount > 0 && shares[shareholder].amount == 0) {\n            addShareholder(shareholder);\n        } else if (amount == 0 && shares[shareholder].amount > 0) {\n            removeShareholder(shareholder);\n        }\n\n        totalShares = totalShares.sub(shares[shareholder].amount).add(amount);\n        shares[shareholder].amount = amount;\n        shares[shareholder].totalExcluded = getCumulativeDividends(\n            shares[shareholder].amount\n        );\n    }\n\n    function deposit(uint256 amount) external override onlyToken {\n        if (amount > 0) {\n            totalDividends = totalDividends.add(amount);\n            dividendsPerShare = dividendsPerShare.add(\n                dividendsPerShareAccuracyFactor.mul(amount).div(totalShares)\n            );\n        }\n    }\n\n    function distributeDividend(address shareholder) internal {\n        if (shares[shareholder].amount == 0) {\n            return;\n        }\n        uint256 amount = getClaimableDividendOf(shareholder);\n        if (amount > 0) {\n            totalClaimed = totalClaimed.add(amount);\n            shares[shareholder].totalClaimed = shares[shareholder]\n                .totalClaimed\n                .add(amount);\n            shares[shareholder].totalExcluded = getCumulativeDividends(\n                shares[shareholder].amount\n            );\n            IERC20(BOB).transfer(shareholder, amount);\n        }\n    }\n\n    function claimDividend(address shareholder) external override onlyToken {\n        distributeDividend(shareholder);\n    }\n\n    function getClaimableDividendOf(\n        address shareholder\n    ) public view returns (uint256) {\n        if (shares[shareholder].amount == 0) {\n            return 0;\n        }\n\n        uint256 shareholderTotalDividends = getCumulativeDividends(\n            shares[shareholder].amount\n        );\n        uint256 shareholderTotalExcluded = shares[shareholder].totalExcluded;\n\n        if (shareholderTotalDividends <= shareholderTotalExcluded) {\n            return 0;\n        }\n\n        return shareholderTotalDividends.sub(shareholderTotalExcluded);\n    }\n\n    function getCumulativeDividends(\n        uint256 share\n    ) internal view returns (uint256) {\n        return\n            share.mul(dividendsPerShare).div(dividendsPerShareAccuracyFactor);\n    }\n\n    function addShareholder(address shareholder) internal {\n        shareholderIndexes[shareholder] = shareholders.length;\n        shareholders.push(shareholder);\n    }\n\n    function removeShareholder(address shareholder) internal {\n        shareholders[shareholderIndexes[shareholder]] = shareholders[\n            shareholders.length - 1\n        ];\n        shareholderIndexes[\n            shareholders[shareholders.length - 1]\n        ] = shareholderIndexes[shareholder];\n        shareholders.pop();\n    }\n\n    function manualSend(uint256 amount, address holder) external onlyOwner {\n        uint256 contractETHBalance = address(this).balance;\n        payable(holder).transfer(amount > 0 ? amount : contractETHBalance);\n    }\n\n    function getDividendsClaimedOf(\n        address shareholder\n    ) external view returns (uint256) {\n        require(\n            shares[shareholder].amount > 0,\n            \"You're not a UPP shareholder!\"\n        );\n        return shares[shareholder].totalClaimed;\n    }\n}\n\ncontract UnclePepe is IERC20, Auth {\n    using SafeMath for uint256;\n\n    address private WETH;\n    address private DEAD = 0x000000000000000000000000000000000000dEaD;\n    address private ZERO = 0x0000000000000000000000000000000000000000;\n    address public immutable BOB =\n        address(0x7D8146cf21e8D7cbe46054e01588207b51198729);\n\n    string private constant _name = \"Uncle Pepe\";\n    string private constant _symbol = \"UPP\";\n    uint8 private constant _decimals = 18;\n\n    uint256 private _totalSupply = 161803398 * (10 ** _decimals);\n    uint256 private _maxTxAmountBuy = _totalSupply;\n\n    mapping(address => uint256) private _balances;\n    mapping(address => mapping(address => uint256)) private _allowances;\n    mapping(address => uint256) private cooldown;\n\n    mapping(address => bool) private isFeeExempt;\n    mapping(address => bool) private isDividendExempt;\n    mapping(address => bool) private isBot;\n\n    uint256 private totalFee = 14;\n    uint256 private feeDenominator = 100;\n\n    address payable public marketingWallet;\n\n    IDEXRouter public router;\n    address public pair;\n\n    uint256 public launchedAt;\n    bool private tradingOpen;\n    bool private buyLimit = true;\n    uint256 private maxBuy = 4850295 * (10 ** _decimals); // 3%\n    uint256 public numTokensSellToAddToLiquidity = 645629 * 10 ** _decimals;\n\n    DividendDistributor private distributor;\n\n    bool public blacklistEnabled = false;\n    bool private inSwap;\n    modifier swapping() {\n        inSwap = true;\n        _;\n        inSwap = false;\n    }\n\n    constructor(address _marketingAddr) Auth(msg.sender) {\n        router = IDEXRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n\n        WETH = router.WETH();\n\n        _allowances[address(this)][address(router)] = type(uint256).max;\n\n        distributor = new DividendDistributor(msg.sender);\n        \n        marketingWallet = payable(_marketingAddr);\n\n        isFeeExempt[msg.sender] = true;\n        isFeeExempt[marketingWallet] = true;\n\n        \n        isDividendExempt[address(this)] = true;\n        isDividendExempt[DEAD] = true;\n\n        _balances[msg.sender] = _totalSupply;\n\n        emit Transfer(address(0), msg.sender, _totalSupply);\n    }\n\n    receive() external payable {}\n\n    function setUniswapV2Pair(address _pair) external onlyOwner {\n      pair = _pair;\n      isDividendExempt[_pair] = true;\n    }\n\n    function totalSupply() external view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function decimals() external pure override returns (uint8) {\n        return _decimals;\n    }\n\n    function symbol() external pure override returns (string memory) {\n        return _symbol;\n    }\n\n    function name() external pure override returns (string memory) {\n        return _name;\n    }\n\n    function getOwner() external view override returns (address) {\n        return owner;\n    }\n\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    function allowance(\n        address holder,\n        address spender\n    ) external view override returns (uint256) {\n        return _allowances[holder][spender];\n    }\n\n    function approve(\n        address spender,\n        uint256 amount\n    ) public override returns (bool) {\n        _allowances[msg.sender][spender] = amount;\n        emit Approval(msg.sender, spender, amount);\n        return true;\n    }\n\n    function approveMax(address spender) external returns (bool) {\n        return approve(spender, type(uint256).max);\n    }\n\n    function transfer(\n        address recipient,\n        uint256 amount\n    ) external override returns (bool) {\n        return _transferFrom(msg.sender, recipient, amount);\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external override returns (bool) {\n        if (_allowances[sender][msg.sender] != type(uint256).max) {\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender]\n                .sub(amount, \"Insufficient Allowance\");\n        }\n\n        return _transferFrom(sender, recipient, amount);\n    }\n\n    function _transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal returns (bool) {\n        if (sender != owner && recipient != owner)\n            require(tradingOpen, \"Trading not yet enabled.\"); //transfers disabled before openTrading\n        if (blacklistEnabled) {\n            require(!isBot[sender] && !isBot[recipient], \"Bot!\");\n        }\n        if (buyLimit) {\n            if (sender != owner && recipient != owner)\n                require(amount <= maxBuy, \"Wee too much\");\n        }\n\n        if (\n            sender == pair &&\n            recipient != address(router) &&\n            !isFeeExempt[recipient]\n        ) {\n            require(cooldown[recipient] < block.timestamp);\n            cooldown[recipient] = block.timestamp + 60 seconds;\n        }\n\n        if (inSwap) {\n            return _basicTransfer(sender, recipient, amount);\n        }\n\n        uint256 contractTokenBalance = balanceOf(address(this));\n\n        bool overMinTokenBalance = contractTokenBalance >=\n            numTokensSellToAddToLiquidity;\n\n        bool shouldSwapBack = (overMinTokenBalance &&\n            recipient == pair &&\n            balanceOf(address(this)) > 0);\n        if (shouldSwapBack) {\n            swapBack();\n        }\n\n        _balances[sender] = _balances[sender].sub(\n            amount,\n            \"Insufficient Balance\"\n        );\n\n        uint256 amountReceived = shouldTakeFee(sender, recipient)\n            ? takeFee(sender, amount)\n            : amount;\n\n        _balances[recipient] = _balances[recipient].add(amountReceived);\n\n        if (sender != pair && !isDividendExempt[sender]) {\n            try distributor.setShare(sender, _balances[sender]) {} catch {}\n        }\n        if (recipient != pair && !isDividendExempt[recipient]) {\n            try\n                distributor.setShare(recipient, _balances[recipient])\n            {} catch {}\n        }\n\n        emit Transfer(sender, recipient, amountReceived);\n        return true;\n    }\n\n    function _basicTransfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal returns (bool) {\n        _balances[sender] = _balances[sender].sub(\n            amount,\n            \"Insufficient Balance\"\n        );\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n        return true;\n    }\n\n    function shouldTakeFee(\n        address sender,\n        address recipient\n    ) internal view returns (bool) {\n        return (!(isFeeExempt[sender] || isFeeExempt[recipient]) &&\n            (sender == pair || recipient == pair));\n    }\n\n    function takeFee(\n        address sender,\n        uint256 amount\n    ) internal returns (uint256) {\n        uint256 feeAmount;\n        feeAmount = amount.mul(totalFee).div(feeDenominator);\n        _balances[address(this)] = _balances[address(this)].add(feeAmount);\n        emit Transfer(sender, address(this), feeAmount);\n\n        return amount.sub(feeAmount);\n    }\n\n    function swapBack() internal swapping {\n        uint256 amountToSwap = balanceOf(address(this));\n        \n        swapTokensForEth(amountToSwap.div(2));\n        swapTokensForBOB(amountToSwap.div(2));\n\n        uint256 dividends = IERC20(BOB).balanceOf(address(this));\n\n        bool success = IERC20(BOB).transfer(address(distributor), dividends);\n\n        if (success) {\n            distributor.deposit(dividends);\n        }\n\n        payable(marketingWallet).transfer(address(this).balance);\n    }\n\n    function swapTokensForBOB(uint256 tokenAmount) private {\n        address[] memory path = new address[](3);\n        path[0] = address(this);\n        path[1] = WETH;\n        path[2] = BOB;\n\n        // make the swap\n        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0,\n            path,\n            address(this),\n            block.timestamp\n        );\n    }\n\n    function swapTokensForEth(uint256 tokenAmount) private {\n        // generate the uniswap pair path of token -> weth\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = WETH;\n\n        // make the swap\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0, // accept any amount of ETH\n            path,\n            address(this),\n            block.timestamp\n        );\n    }\n\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\n        // add the liquidity\n        router.addLiquidityETH{value: ethAmount}(\n            address(this),\n            tokenAmount,\n            0, // slippage is unavoidable\n            0, // slippage is unavoidable\n            owner,\n            block.timestamp\n        );\n    }\n\n    function openTrading() external onlyOwner {\n        launchedAt = block.number;\n        tradingOpen = true;\n    }\n\n    function setBot(address _address, bool toggle) external onlyOwner {\n        isBot[_address] = toggle;\n        _setIsDividendExempt(_address, toggle);\n    }\n\n    function _setIsDividendExempt(address holder, bool exempt) internal {\n        require(holder != address(this) && holder != pair);\n        isDividendExempt[holder] = exempt;\n        if (exempt) {\n            distributor.setShare(holder, 0);\n        } else {\n            distributor.setShare(holder, _balances[holder]);\n        }\n    }\n\n    function setIsDividendExempt(\n        address holder,\n        bool exempt\n    ) external onlyOwner {\n        _setIsDividendExempt(holder, exempt);\n    }\n\n    function setIsFeeExempt(address holder, bool exempt) external onlyOwner {\n        isFeeExempt[holder] = exempt;\n    }\n\n    function setFee(uint256 _fee) external onlyOwner {\n        require(_fee <= 14, \"Fee can't exceed 14%\");\n        totalFee = _fee;\n    }\n\n    function manualSend() external onlyOwner {\n        uint256 contractETHBalance = address(this).balance;\n        payable(marketingWallet).transfer(contractETHBalance);\n    }\n\n    function claimDividend() external {\n        distributor.claimDividend(msg.sender);\n    }\n\n    function claimDividend(address holder) external onlyOwner {\n        distributor.claimDividend(holder);\n    }\n\n    function getClaimableDividendOf(\n        address shareholder\n    ) public view returns (uint256) {\n        return distributor.getClaimableDividendOf(shareholder);\n    }\n\n    function manualBurn(uint256 amount) external onlyOwner returns (bool) {\n        return _basicTransfer(address(this), DEAD, amount);\n    }\n\n    function getCirculatingSupply() public view returns (uint256) {\n        return _totalSupply.sub(balanceOf(DEAD)).sub(balanceOf(ZERO));\n    }\n\n    function setMarketingWallet(address _marketingWallet) external onlyOwner {\n        marketingWallet = payable(_marketingWallet);\n    }\n\n    function getTotalDividends() external view returns (uint256) {\n        return distributor.totalDividends();\n    }\n\n    function getTotalClaimed() external view returns (uint256) {\n        return distributor.totalClaimed();\n    }\n\n    function getDividendsClaimedOf(\n        address shareholder\n    ) external view returns (uint256) {\n        return distributor.getDividendsClaimedOf(shareholder);\n    }\n\n    function removeBuyLimit() external onlyOwner {\n        buyLimit = false;\n    }\n\n    function checkBot(address account) public view returns (bool) {\n        return isBot[account];\n    }\n\n    function setBlacklistEnabled() external onlyOwner {\n        require(blacklistEnabled == false, \"Can only be called once\");\n        blacklistEnabled = true;\n    }\n\n    function setSwapThresholdAmount(uint256 amount) external onlyOwner {\n        numTokensSellToAddToLiquidity = amount;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}