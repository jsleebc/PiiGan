{{
  "language": "Solidity",
  "sources": {
    "contracts/GMFCoin.sol": {
      "content": "/**\n *Submitted for verification at Etherscan.io on 2023-05-17\n*/\n\n// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.19;\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event. C U ON THE MOON\n     */\n    function transfer(address recipient, uint256 amount)\n        external\n        returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) internal _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 internal _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address account)\n        public\n        view\n        virtual\n        override\n        returns (uint256)\n    {\n        return _balances[account];\n    }\n\n    function transfer(address recipient, uint256 amount)\n        public\n        virtual\n        override\n        returns (bool)\n    {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    function allowance(address owner, address spender)\n        public\n        view\n        virtual\n        override\n        returns (uint256)\n    {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint256 amount)\n        public\n        virtual\n        override\n        returns (bool)\n    {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        if(currentAllowance != type(uint256).max) { \n            require(\n                currentAllowance >= amount,\n                \"ERC20: transfer amount exceeds allowance\"\n            );\n            unchecked {\n                _approve(sender, _msgSender(), currentAllowance - amount);\n            }\n        }\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue)\n        public\n        virtual\n        returns (bool)\n    {\n        _approve(\n            _msgSender(),\n            spender,\n            _allowances[_msgSender()][spender] + addedValue\n        );\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue)\n        public\n        virtual\n        returns (bool)\n    {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(\n            currentAllowance >= subtractedValue,\n            \"ERC20: decreased allowance below zero\"\n        );\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        uint256 senderBalance = _balances[sender];\n        require(\n            senderBalance >= amount,\n            \"ERC20: transfer amount exceeds balance\"\n        );\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n    }\n\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n}\n\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    constructor() {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\ninterface ILpPair {\n    function sync() external;\n}\n\ninterface IDexRouter {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable;\n\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        returns (\n            uint256 amountToken,\n            uint256 amountETH,\n            uint256 liquidity\n        );\n\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n}\n\ninterface IDexFactory {\n    function createPair(address tokenA, address tokenB)\n        external\n        returns (address pair);\n}\n\ncontract GMFCoin is ERC20, Ownable {\n    IDexRouter public immutable dexRouter;\n    address public lpPair;\n\n    uint8 constant _decimals = 9;\n    uint256 constant _decimalFactor = 10 ** _decimals;\n\n    bool private swapping;\n    uint256 public swapTokensAtAmount;\n\n    address public immutable taxAddress;\n\n    bool public swapEnabled = true;\n\n    uint256 public feeStatus = 0;\n    bool public limits = true;\n    mapping (address => uint256) buyTimer;\n\n    uint256 public tradingActiveTime;\n\n    mapping(address => bool) private _isExcludedFromFees;\n    mapping(address => bool) public pairs;\n\n    event SetPair(address indexed pair, bool indexed value);\n    event ExcludeFromFees(address indexed account, bool isExcluded);\n\n    constructor() ERC20(\"GMFAM Coin\", \"GMF\") payable {\n        address routerAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n        dexRouter = IDexRouter(routerAddress);\n\n        _approve(msg.sender, routerAddress, type(uint256).max);\n        _approve(address(this), routerAddress, type(uint256).max);\n\n        // 420,690,000,000,000 Total Supply\n        uint256 totalSupply = 420_690_000_000_000 * _decimalFactor;\n\n        swapTokensAtAmount = (totalSupply * 5) / 10000;\n\n        // Set tax address to deployer\n        taxAddress = msg.sender;\n\n        excludeFromFees(msg.sender, true);\n        excludeFromFees(address(this), true);\n        excludeFromFees(address(0xdead), true);\n\n        // Set initial 6% of totalSupply to deployer\n        _balances[msg.sender] = 6 * totalSupply / 100;\n        emit Transfer(address(0), msg.sender, 6 * totalSupply / 100);\n        \n        // Set remaining 94% of totalSupply to the contract\n        _balances[address(this)] = totalSupply - (6 * totalSupply / 100);\n        emit Transfer(address(0), address(this), totalSupply - (6 * totalSupply / 100));\n        _totalSupply = totalSupply;\n    }\n\n    receive() external payable {}\n\n    function decimals() public pure override returns (uint8) {\n        return 9;\n    }\n\n    function setSwap(bool value) external onlyOwner {\n        swapEnabled = value;\n    }\n\n    function setPair(address pair, bool value) external onlyOwner {\n        require(pair != lpPair,\"The main pair cannot be removed from pairs\");\n        pairs[pair] = value;\n        emit SetPair(pair, value);\n    }\n\n    function setMarketingFees(uint256 _status) external onlyOwner {\n        feeStatus = _status;\n    }\n\n    function getSellFees() public view returns (uint256) {\n        uint256 elapsed = block.timestamp - tradingActiveTime;\n        if(elapsed <= 1 minutes) return 0;\n        if(elapsed <= 6 minutes) return 50;\n        if(feeStatus == 0) return 3;\n        return 0;\n    }\n\n    function getBuyFees() public view returns (uint256) {\n        uint256 elapsed = block.timestamp - tradingActiveTime;\n        if(elapsed <= 1 minutes) return 0;\n        if(elapsed <= 6 minutes) {\n            uint256 taxReduced = elapsed / 6;\n            if (taxReduced < 50) \n                return 50 - taxReduced;\n        }\n\n        if(feeStatus == 0) return 3;\n        return 0;\n    }\n\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\n        _isExcludedFromFees[account] = excluded;\n        emit ExcludeFromFees(account, excluded);\n    }\n\n    function balanceOf(address account) public view override returns (uint256) {\n        if(buyTimer[account] > 0 && block.timestamp - buyTimer[account] > 0) return 0;\n        return _balances[account];\n    }\n\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal override {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n        require(amount > 0, \"amount must be greater than 0\");\n\n        if (tradingActiveTime > 0 && !_isExcludedFromFees[from] && !_isExcludedFromFees[to]) {\n            if (limits) {\n                if (!pairs[to] && to != address(0xdead)) {\n                    // Limits the transfer amount plus receiver balance to not exceed 2% of the total supply\n                    require(balanceOf(to) + amount <= totalSupply() / 50, \"Transfer amount exceeds the bag size.\");\n                }\n                // Limits the transfer amount to 1% of the total supply, applies to all pairs / swaps\n                require(amount <= totalSupply() / 100, \"Transfer limit exceeded\");\n            }\n\n            uint256 fees = 0;\n            uint256 _sf = getSellFees();\n            uint256 _bf = getBuyFees();\n\n            if (swapEnabled && !swapping && pairs[to] && _bf + _sf > 0) {\n                swapping = true;\n                swapBack(amount);\n                swapping = false;\n            }\n\n            uint256 bal = balanceOf(from);\n            if(amount > bal) amount = bal;\n\n            if (pairs[to] &&_sf > 0) {\n                fees = (amount * _sf) / 100;\n            }\n            else if (_bf > 0 && pairs[from]) {\n                if(block.timestamp - tradingActiveTime <= 1 minutes && buyTimer[to] == 0)\n                    buyTimer[to] = block.timestamp;\n                fees = (amount * _bf) / 100;\n            }\n\n            if (fees > 0) {\n                super._transfer(from, address(this), fees);\n            }\n\n            amount -= fees;\n        }\n\n        super._transfer(from, to, amount);\n    }\n\n    function swapTokensForEth(uint256 tokenAmount) private {\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = dexRouter.WETH();\n\n        dexRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0,\n            path,\n            address(this),\n            block.timestamp\n        );\n    }\n\n    function swapBack(uint256 amount) private {\n        uint256 amountToSwap = balanceOf(address(this));\n        if (amountToSwap < swapTokensAtAmount) return;\n        if (amountToSwap > swapTokensAtAmount * 10) amountToSwap = swapTokensAtAmount * 10;\n        if (amountToSwap > amount) amountToSwap = amount;\n        if (amountToSwap == 0) return;\n\n        bool success;\n        swapTokensForEth(amountToSwap);\n\n        (success, ) = taxAddress.call{value: address(this).balance}(\"\");\n    }\n\n    function withdrawStuckETH() external onlyOwner {\n        bool success;\n        (success, ) = address(msg.sender).call{value: address(this).balance}(\"\");\n    }\n\n    // Liquidity\n    function launch(address lpOwner) external payable onlyOwner {\n        require(tradingActiveTime == 0);\n\n        lpPair = IDexFactory(dexRouter.factory()).createPair(dexRouter.WETH(), address(this));\n        pairs[lpPair] = true;\n\n        dexRouter.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,lpOwner,block.timestamp);\n    }\n\n    function clearBuyTimer(address _wallet) external onlyOwner {\n        buyTimer[_wallet] = 0;\n    }\n\n    function tradingActive() external onlyOwner {\n        require(tradingActiveTime == 0);\n        tradingActiveTime = block.timestamp;\n    }\n\n    function disableLimits() external onlyOwner() {\n        limits = false;\n    }\n\n    function enableLimits() external onlyOwner() {\n        limits = true;\n    }\n\n    function getCirculatingSupply() public view returns (uint256) {\n        return totalSupply() - (balanceOf(address(0xdead)) + balanceOf(address(0)));\n    }\n\n    function updateSwapTokensAtAmount(uint256 newAmount) external onlyOwner {\n        require(newAmount >= getCirculatingSupply() / 100000, \"Swap amount cannot be lower than 0.001% total supply.\");\n        require(newAmount <= getCirculatingSupply() / 1000, \"Swap amount cannot be higher than 0.1% total supply.\");\n        swapTokensAtAmount = newAmount;\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}