{{
  "language": "Solidity",
  "sources": {
    "contract.sol": {
      "content": "//SPDX-License-Identifier: Unlicensed\r\n\r\n/* \r\n\r\nWebsite: https://boredpandayachtclub.com/\r\n\r\nTelegram: https://t.me/boredpandayachtclub\r\n\r\nTwitter: https://twitter.com/BoredPandaYacht\r\n\r\n*/\r\n\r\npragma solidity 0.8.20;\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IPancakePair {\r\n    function sync() external;\r\n}\r\n\r\ninterface IDEXRouter {\r\n\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract BPYC is IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    \r\n    address WETH;\r\n    address constant DEAD          = 0x000000000000000000000000000000000000dEaD;\r\n    address constant ZERO          = 0x0000000000000000000000000000000000000000;\r\n\r\n    string _name = \"Bored Panda Yacht Club\";\r\n    string _symbol = \"BPYC\";\r\n    uint8 constant _decimals = 18;\r\n    uint256 _totalSupply = 1 * 10**9 * 10**_decimals;\r\n    uint256 public _maxTxAmount = (_totalSupply * 35) / 1000;\r\n    uint256 public _maxWalletSize = (_totalSupply * 35) / 1000;   \r\n\r\n    mapping (address => uint256) public _rOwned;\r\n    uint256 public _totalProportion = _totalSupply;\r\n\r\n    mapping (address => mapping (address => uint256)) _allowances;\r\n\r\n    \r\n    mapping (address => bool) isFeeExempt;\r\n    mapping (address => bool) isTxLimitExempt;\r\n \r\n    uint256 liquidityFeeBuy = 0; \r\n    uint256 liquidityFeeSell = 0;\r\n\r\n    uint256 TeamFeeBuy = 0;  \r\n    uint256 TeamFeeSell = 0;  \r\n\r\n    uint256 marketingFeeBuy = 2;   \r\n    uint256 marketingFeeSell = 2;   \r\n\r\n    uint256 reflectionFeeBuy = 0;   \r\n    uint256 reflectionFeeSell = 0;   \r\n\r\n    uint256 totalFeeBuy = marketingFeeBuy + liquidityFeeBuy + TeamFeeBuy + reflectionFeeBuy;     \r\n    uint256 totalFeeSell = marketingFeeSell + liquidityFeeSell + TeamFeeSell + reflectionFeeSell; \r\n\r\n    uint256 feeDenominator = 100; \r\n       \r\n    address autoLiquidityReceiver;\r\n    address marketingFeeReceiver;\r\n    address TeamFeeReceiver;\r\n\r\n    uint256 targetLiquidity = 10;\r\n    uint256 targetLiquidityDenominator = 100;\r\n\r\n    IDEXRouter public router;\r\n    address public pair;\r\n\r\n    bool public tradingOpen = false;\r\n    \r\n    bool public claimingFees = true; \r\n    bool alternateSwaps = true;\r\n    uint256 smallSwapThreshold = _totalSupply * 50 / 1000;\r\n    uint256 largeSwapThreshold = _totalSupply * 30 / 1000;\r\n\r\n    uint256 public swapThreshold = smallSwapThreshold;\r\n    bool inSwap;\r\n    modifier swapping() { inSwap = true; _; inSwap = false; }\r\n\r\n    constructor () {\r\n\r\n        router = IDEXRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        WETH = router.WETH();\r\n        pair = IDEXFactory(router.factory()).createPair(WETH, address(this));\r\n\r\n        _allowances[address(this)][address(router)] = type(uint256).max;\r\n        _allowances[address(this)][msg.sender] = type(uint256).max;\r\n\r\n        isTxLimitExempt[address(this)] = true;\r\n        isTxLimitExempt[address(router)] = true;\r\n\t    isTxLimitExempt[pair] = true;\r\n        isTxLimitExempt[msg.sender] = true;\r\n        isTxLimitExempt[marketingFeeReceiver] = true;\r\n        isFeeExempt[msg.sender] = true;\r\n\r\n        autoLiquidityReceiver = msg.sender; \r\n        TeamFeeReceiver = msg.sender;\r\n        marketingFeeReceiver = 0x02093F6F0aFC32dde4ab5E459795AEDe4A707d52;\r\n\r\n        _rOwned[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n\r\n    receive() external payable { }\r\n\r\n    function totalSupply() external view override returns (uint256) { return _totalSupply; }\r\n    function decimals() external pure returns (uint8) { return _decimals; }\r\n    function name() external view returns (string memory) { return _name; }\r\n    function symbol() external view returns (string memory) { return _symbol; }\r\n    function getOwner() external view returns (address) { return owner(); }\r\n    function balanceOf(address account) public view override returns (uint256) { return tokenFromReflection(_rOwned[account]); }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n    \r\n    \r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function approveMax(address spender) external returns (bool) {\r\n        return approve(spender, type(uint256).max);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        if(_allowances[sender][msg.sender] != type(uint256).max){\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount, \"Insufficient Allowance\");\r\n        }\r\n\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        if(inSwap){ return _basicTransfer(sender, recipient, amount); }\r\n\r\n        if (recipient != pair && recipient != DEAD && recipient != marketingFeeReceiver && !isTxLimitExempt[recipient]) {\r\n            require(balanceOf(recipient) + amount <= _maxWalletSize, \"Max Wallet Exceeded\");\r\n\r\n        }\r\n\r\n        if(!isTxLimitExempt[sender]) {\r\n            require(amount <= _maxTxAmount, \"Transaction Amount Exceeded\");\r\n        }\r\n     \r\n        if (recipient != pair && recipient != DEAD && !isTxLimitExempt[recipient]) {\r\n            require(tradingOpen,\"Trading not open yet\");\r\n        \r\n        }\r\n\r\n        if(shouldSwapBack()){ swapBack(); }\r\n\r\n        uint256 proportionAmount = tokensToProportion(amount);\r\n\r\n        _rOwned[sender] = _rOwned[sender].sub(proportionAmount, \"Insufficient Balance\");\r\n\r\n        uint256 proportionReceived = shouldTakeFee(sender) && shouldTakeFee(recipient) ? takeFeeInProportions(sender == pair? true : false, sender, recipient, proportionAmount) : proportionAmount;\r\n        _rOwned[recipient] = _rOwned[recipient].add(proportionReceived);\r\n\r\n        emit Transfer(sender, recipient, tokenFromReflection(proportionReceived));\r\n        return true;\r\n    }\r\n\r\n    function tokensToProportion(uint256 tokens) public view returns (uint256) {\r\n        return tokens.mul(_totalProportion).div(_totalSupply);\r\n    }\r\n\r\n    function tokenFromReflection(uint256 proportion) public view returns (uint256) {\r\n        return proportion.mul(_totalSupply).div(_totalProportion);\r\n    }\r\n\r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        uint256 proportionAmount = tokensToProportion(amount);\r\n        _rOwned[sender] = _rOwned[sender].sub(proportionAmount, \"Insufficient Balance\");\r\n        _rOwned[recipient] = _rOwned[recipient].add(proportionAmount);\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function shouldTakeFee(address sender) internal view returns (bool) {\r\n        return !isFeeExempt[sender];\r\n\r\n    }\r\n\r\n     function checkTxLimit(address sender, uint256 amount) internal view {\r\n        require(amount <= _maxTxAmount || isTxLimitExempt[sender], \"TX Limit Exceeded\");\r\n    }\r\n\r\n    function getTotalFeeBuy(bool) public view returns (uint256) {\r\n        return totalFeeBuy;\r\n    }\r\n\r\n    function getTotalFeeSell(bool) public view returns (uint256) {\r\n        return totalFeeSell;\r\n    }\r\n\r\n    function takeFeeInProportions(bool buying, address sender, address receiver, uint256 proportionAmount) internal returns (uint256) {\r\n        uint256 proportionFeeAmount = buying == true? proportionAmount.mul(getTotalFeeBuy(receiver == pair)).div(feeDenominator) :\r\n        proportionAmount.mul(getTotalFeeSell(receiver == pair)).div(feeDenominator);\r\n\r\n        uint256 proportionReflected = buying == true? proportionFeeAmount.mul(reflectionFeeBuy).div(totalFeeBuy) :\r\n        proportionFeeAmount.mul(reflectionFeeSell).div(totalFeeSell);\r\n\r\n        _totalProportion = _totalProportion.sub(proportionReflected);\r\n\r\n        uint256 _proportionToContract = proportionFeeAmount.sub(proportionReflected);\r\n        _rOwned[address(this)] = _rOwned[address(this)].add(_proportionToContract);\r\n\r\n        emit Transfer(sender, address(this), tokenFromReflection(_proportionToContract));\r\n        emit Reflect(proportionReflected, _totalProportion);\r\n        return proportionAmount.sub(proportionFeeAmount);\r\n    }\r\n\r\n    function manualSend() external {\r\n        (bool success,) = payable(autoLiquidityReceiver).call{value: address(this).balance, gas: 30000}(\"\");\r\n        require(success);\r\n       \r\n    }\r\n\r\n     function clearStuckETH(uint256 amountPercentage) external {\r\n        uint256 amountETH = address(this).balance;\r\n        payable(autoLiquidityReceiver).transfer(amountETH * amountPercentage / 100);\r\n    }\r\n\r\n     function clearForeignToken(address tokenAddress, uint256 tokens) public returns (bool) {\r\n        require(isTxLimitExempt[msg.sender]);\r\n     if(tokens == 0){\r\n            tokens = IERC20(tokenAddress).balanceOf(address(this));\r\n        }\r\n        return IERC20(tokenAddress).transfer(msg.sender, tokens);\r\n    }\r\n\r\n      \r\n    function setTarget(uint256 _target, uint256 _denominator) external onlyOwner {\r\n        targetLiquidity = _target;\r\n        targetLiquidityDenominator = _denominator;    \r\n    }\r\n\r\n      function removeLimits() external onlyOwner { \r\n        _maxWalletSize = _totalSupply;\r\n        _maxTxAmount = _totalSupply;\r\n\r\n    }\r\n\r\n    function shouldSwapBack() internal view returns (bool) {\r\n        return msg.sender != pair\r\n        && !inSwap\r\n        && claimingFees\r\n        && balanceOf(address(this)) >= swapThreshold;\r\n    }\r\n\r\n    function swapBack() internal swapping {\r\n        uint256 dynamicLiquidityFee = isOverLiquified(targetLiquidity, targetLiquidityDenominator) ? 0 : liquidityFeeSell;\r\n        uint256 _totalFee = totalFeeSell.sub(reflectionFeeSell);\r\n        uint256 amountToLiquify = swapThreshold.mul(dynamicLiquidityFee).div(_totalFee).div(2);\r\n        uint256 amountToSwap = swapThreshold.sub(amountToLiquify);\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = WETH;\r\n\r\n        uint256 balanceBefore = address(this).balance;\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amountToSwap,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 amountETH = address(this).balance.sub(balanceBefore);\r\n\r\n        uint256 totalETHFee = _totalFee.sub(dynamicLiquidityFee.div(2));\r\n        uint256 amountETHLiquidity = amountETH.mul(liquidityFeeSell).div(totalETHFee).div(2);\r\n        uint256 amountETHMarketing = amountETH.mul(marketingFeeSell).div(totalETHFee);\r\n        uint256 amountETHTeam = amountETH.mul(TeamFeeSell).div(totalETHFee);\r\n\r\n        (bool tmpSuccess,) = payable(marketingFeeReceiver).call{value: amountETHMarketing, gas: 30000}(\"\");\r\n        (tmpSuccess,) = payable(TeamFeeReceiver).call{value: amountETHTeam, gas: 30000}(\"\");\r\n        \r\n        \r\n\r\n        if(amountToLiquify > 0) {\r\n            router.addLiquidityETH{value: amountETHLiquidity}(\r\n                address(this),\r\n                amountToLiquify,\r\n                0,\r\n                0,\r\n                autoLiquidityReceiver,\r\n                block.timestamp\r\n            );\r\n            emit AutoLiquify(amountETHLiquidity, amountToLiquify);\r\n        }\r\n\r\n        swapThreshold = !alternateSwaps ? swapThreshold : swapThreshold == smallSwapThreshold ? largeSwapThreshold : smallSwapThreshold;\r\n    }\r\n\r\n    function setSwapBackSettings(bool _enabled, uint256 _amountS, uint256 _amountL, bool _alternate) external onlyOwner {\r\n        alternateSwaps = _alternate;\r\n        claimingFees = _enabled;\r\n        smallSwapThreshold = _amountS;\r\n        largeSwapThreshold = _amountL;\r\n        swapThreshold = smallSwapThreshold;\r\n    }\r\n\r\n    function setTradingOpen() public onlyOwner {\r\n        tradingOpen = true;\r\n    \r\n    }\r\n\r\n    function setFees(uint256 _liquidityFeeBuy, uint256 _reflectionFeeBuy, uint256 _marketingFeeBuy, uint256 _TeamFeeBuy, uint256 _feeDenominator,\r\n    uint256 _liquidityFeeSell, uint256 _reflectionFeeSell, uint256 _marketingFeeSell, uint256 _TeamFeeSell) external onlyOwner {\r\n        liquidityFeeBuy = _liquidityFeeBuy;\r\n        reflectionFeeBuy = _reflectionFeeBuy;\r\n        marketingFeeBuy = _marketingFeeBuy;\r\n        TeamFeeBuy = _TeamFeeBuy;\r\n        totalFeeBuy = liquidityFeeBuy.add(reflectionFeeBuy).add(marketingFeeBuy).add(TeamFeeBuy);\r\n\r\n        liquidityFeeSell = _liquidityFeeSell;\r\n        reflectionFeeSell = _reflectionFeeSell;\r\n        marketingFeeSell = _marketingFeeSell;\r\n        TeamFeeSell = _TeamFeeSell;\r\n        totalFeeSell = liquidityFeeSell.add(reflectionFeeSell).add(marketingFeeSell).add(TeamFeeSell);\r\n\r\n        feeDenominator = _feeDenominator;\r\n        \r\n     }\r\n\r\n    function setMaxWalletPercent(uint256 maxWallPercent) external onlyOwner() {\r\n        require(maxWallPercent >= 1);\r\n        _maxWalletSize = (_totalSupply * maxWallPercent ) / 1000;\r\n    }\r\n\r\n    function setMaxTxPercent(uint256 maxTXPercentage) external onlyOwner() {\r\n        require(maxTXPercentage >= 1);\r\n        _maxTxAmount = (_totalSupply * maxTXPercentage ) / 1000;\r\n    }\r\n\r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return _totalSupply.sub(balanceOf(DEAD)).sub(balanceOf(ZERO));\r\n    }\r\n\r\n    function getLiquidityBacking(uint256 accuracy) public view returns (uint256) {\r\n        return accuracy.mul(balanceOf(pair).mul(2)).div(getCirculatingSupply());\r\n\r\n    }\r\n\r\n    function isOverLiquified(uint256 target, uint256 accuracy) public view returns (bool) {\r\n        return getLiquidityBacking(accuracy) > target;\r\n    \r\n    }\r\n\r\n    event AutoLiquify(uint256 amountETH, uint256 amountToken);\r\n    event Reflect(uint256 amountReflected, uint256 newTotalProportion);\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}