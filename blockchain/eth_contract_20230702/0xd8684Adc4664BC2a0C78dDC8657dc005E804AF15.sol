{{
  "language": "Solidity",
  "sources": {
    "contracts/token.sol": {
      "content": "/*\n*   ▄▄▄▄▄▄▄ ▄▄▄▄▄▄▄ ▄▄▄▄▄▄▄ ▄▄   ▄▄ ▄▄▄▄▄▄▄ ▄▄▄▄▄▄▄ ▄▄▄▄▄▄▄    ▄▄▄▄▄▄  ▄▄▄▄▄▄▄ ▄▄▄▄▄▄▄ \n*  █       █       █       █  █ █  █       █       █       █  █      ██       █       █\n*  █       █   ▄   █    ▄  █  █▄█  █       █   ▄   █▄     ▄█  █  ▄    █   ▄   █   ▄   █\n*  █     ▄▄█  █ █  █   █▄█ █       █     ▄▄█  █▄█  █ █   █    █ █ █   █  █▄█  █  █ █  █\n*  █    █  █  █▄█  █    ▄▄▄█▄     ▄█    █  █       █ █   █    █ █▄█   █       █  █▄█  █\n*  █    █▄▄█       █   █     █   █ █    █▄▄█   ▄   █ █   █    █       █   ▄   █       █\n*  █▄▄▄▄▄▄▄█▄▄▄▄▄▄▄█▄▄▄█     █▄▄▄█ █▄▄▄▄▄▄▄█▄▄█ █▄▄█ █▄▄▄█    █▄▄▄▄▄▄██▄▄█ █▄▄█▄▄▄▄▄▄▄█\n*\n*\n*  Join Copycat DAO, \n*  a community-driven social trading DAO that utilizes AI technology \n*  and the expertise of community members to generate revenue for members \n*  through copy trading investments. \n*  The DAO prioritizes transparency and accountability and rewards members based on merit.\n*  \n*  A tax on every $CCD and ETH transaction funds the DAO treasury, \n*  which strategically allocates funds to copy the trades of master traders. \n*  The return on investment is used to buy back and burn $CCD tokens or provide liquidity.\n*  \n*  Join us to benefit from reduced-risk copy trading \n*  and access tools and resources for informed trading strategy decisions.\n*\n*\n*\n*  Socials\n*   \n*  \n*  Website:     https://www.copycatdao.com\n*  Bounty:      https://app.dework.xyz/copycat-dao\n*  Reddit:      https://www.reddit.com/r/copycatdao/\n*  Twitter:     https://twitter.com/copycatdao\n*  Telegram:    https://t.me/copycatdao\n*  Mirror:      https://mirror.xyz/copycatdao.eth\n*  Github:      https://github.com/CopyCatDaoDev\n*  Linktree:    https://linktr.ee/copycatdao\n*  \n*  Treasury\n*  \n*  Trading:     https://app.safe.global/home?safe=eth:0xaa101ce7eCBE76ef3c28c0Cc41E27BbB4b2Dc508\n*  Development: https://app.safe.global/home?safe=eth:0xb2809e711d7511662Ecc2aE9ae74dFAB77ED220f\n*\n*/\n// SPDX-License-Identifier: Unlicensed\n\npragma solidity 0.8.9;\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n \n    function _msgData() internal view virtual returns (bytes calldata) {\n        this;\n        return msg.data;\n    }\n}\n \ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n \n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n \n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n \n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n \n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n \n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n \n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n \n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n \n    function initialize(address, address) external;\n}\n \ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n \n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n \n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n \n    function createPair(address tokenA, address tokenB) external returns (address pair);\n \n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n \ninterface IERC20 {\n\n    function totalSupply() external view returns (uint256);\n \n    function balanceOf(address account) external view returns (uint256);\n \n    function transfer(address recipient, uint256 amount) external returns (bool);\n \n    function allowance(address owner, address spender) external view returns (uint256);\n \n    function approve(address spender, uint256 amount) external returns (bool);\n \n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n \n    event Transfer(address indexed from, address indexed to, uint256 value);\n \n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n \ninterface IERC20Metadata is IERC20 {\n\n    function name() external view returns (string memory);\n \n    function symbol() external view returns (string memory);\n \n    function decimals() external view returns (uint8);\n}\n \n \ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    using SafeMath for uint256;\n \n    mapping(address => uint256) private _balances;\n \n    mapping(address => mapping(address => uint256)) private _allowances;\n \n    uint256 private _totalSupply;\n \n    string private _name;\n    string private _symbol;\n \n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n \n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n \n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n \n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n \n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n \n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n \n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n \n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n \n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n \n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n \n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n \n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n \n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n \n        _beforeTokenTransfer(sender, recipient, amount);\n \n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n \n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n \n        _beforeTokenTransfer(address(0), account, amount);\n \n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n \n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n \n        _beforeTokenTransfer(account, address(0), amount);\n \n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n \n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n \n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n \n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n \nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n \n        return c;\n    }\n \n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n \n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n \n        return c;\n    }\n \n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n \n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n \n        return c;\n    }\n \n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n \n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n \n        return c;\n    }\n \n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n \n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n \ncontract Ownable is Context {\n    address private _owner;\n \n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n \n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n \n    function owner() public view returns (address) {\n        return _owner;\n    }\n \n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n \n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n \n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n \nlibrary SafeMathInt {\n    int256 private constant MIN_INT256 = int256(1) << 255;\n    int256 private constant MAX_INT256 = ~(int256(1) << 255);\n \n    function mul(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a * b;\n \n        // Detect overflow when multiplying MIN_INT256 with -1\n        require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\n        require((b == 0) || (c / b == a));\n        return c;\n    }\n\n    function div(int256 a, int256 b) internal pure returns (int256) {\n        // Prevent overflow when dividing MIN_INT256 by -1\n        require(b != -1 || a != MIN_INT256);\n \n        // Solidity already throws when dividing by 0.\n        return a / b;\n    }\n \n    function sub(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a - b;\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\n        return c;\n    }\n \n    function add(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a + b;\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\n        return c;\n    }\n \n    function abs(int256 a) internal pure returns (int256) {\n        require(a != MIN_INT256);\n        return a < 0 ? -a : a;\n    }\n \n \n    function toUint256Safe(int256 a) internal pure returns (uint256) {\n        require(a >= 0);\n        return uint256(a);\n    }\n}\n \nlibrary SafeMathUint {\n  function toInt256Safe(uint256 a) internal pure returns (int256) {\n    int256 b = int256(a);\n    require(b >= 0);\n    return b;\n  }\n}\n \n \ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n \n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n \n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n \ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n \n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n\nabstract contract ERC20Burnable is Context, ERC20 {\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    function burnFrom(address account, uint256 amount) public virtual {\n        uint256 currentAllowance = allowance(account, _msgSender());\n        require(currentAllowance >= amount, \"Burn amount exceeds allowance\");\n        _approve(account, _msgSender(), currentAllowance - amount);\n        _burn(account, amount);\n    }\n}\n \ncontract COPYCATDAO is ERC20, Ownable, ERC20Burnable {\n    using SafeMath for uint256;\n \n    IUniswapV2Router02 public immutable uniswapV2Router;\n    address public immutable uniswapV2Pair;\n \n    bool private swapping;\n \n    address public developmentWallet;\n    address public treasuryWallet;\n \n    uint256 public maxTransactionAmount;\n    uint256 public swapTokensAtAmount;\n    uint256 public maxWallet;\n \n    bool public limitsInEffect = true;\n    bool public tradingActive = false;\n    bool public swapEnabled = false;\n    bool public transferEnabled = false;\n    bool public transferDelayEnabled = true;\n \n     // Anti-bot and anti-whale mappings and variables\n    mapping(address => uint256) private _holderLastTransferTimestamp; // to hold last Transfers temporarily during launch\n \n    // Seller Map\n    mapping (address => uint256) private _holderFirstBuyTimestamp;\n \n    // CatList Map\n    mapping (address => bool) public _catlist;\n \n    uint256 public buyTotalFees;\n    uint256 public buyDevelopmentFee;\n    uint256 public buyTreasuryFee;\n \n    uint256 public sellTotalFees;\n    uint256 public sellDevelopmentFee;\n    uint256 public sellTreasuryFee;\n \n    uint256 public tokensForDevelopment;\n    uint256 public tokensForTreasury;\n \n    // block number of opened trading\n    uint256 launchedAt;\n  \n    // exclude from fees and max transaction amount\n    mapping (address => bool) private _isExcludedFromFees;\n    mapping (address => bool) public _isExcludedMaxTransactionAmount;\n \n    // store addresses that a automatic market maker pairs. Any transfer *to* these addresses\n    // could be subject to a maximum transfer amount\n    mapping (address => bool) public automatedMarketMakerPairs;\n \n    event UpdateUniswapV2Router(address indexed newAddress, address indexed oldAddress);\n    event ExcludeFromFees(address indexed account, bool isExcluded);\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\n    event developmentWalletUpdated(address indexed newWallet, address indexed oldWallet);\n    event treasuryWalletUpdated(address indexed newWallet, address indexed oldWallet);\n \n    event SwapAndLiquify(\n        uint256 tokensSwapped,\n        uint256 ethReceived\n    );\n \n    constructor() ERC20(\"COPYCATDAO\", \"CCD\") {\n \n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n \n        excludeFromMaxTransaction(address(_uniswapV2Router), true);\n        uniswapV2Router = _uniswapV2Router;\n \n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\n        excludeFromMaxTransaction(address(uniswapV2Pair), true);\n        _setAutomatedMarketMakerPair(address(uniswapV2Pair), true);\n \n        uint256 _buyDevelopmentFee = 15;\n        uint256 _buyTreasuryFee = 10;\n \n        uint256 _sellDevelopmentFee = 50;\n        uint256 _sellTreasuryFee = 49;\n \n        uint256 totalSupply = 100 * 10**6 * 10**18; // 100M\n\n        maxTransactionAmount = totalSupply * 5 / 1000; // 0.05% maxTransactionAmountTxn\n        maxWallet = totalSupply * 5 / 1000; // 0.05% maxWallet\n        swapTokensAtAmount = totalSupply * 5 / 10000; // 0.05% swap wallet\n \n        buyDevelopmentFee = _buyDevelopmentFee;\n        buyTreasuryFee = _buyTreasuryFee;\n        buyTotalFees = buyDevelopmentFee + buyTreasuryFee;\n \n        sellDevelopmentFee = _sellDevelopmentFee;\n        sellTreasuryFee = _sellTreasuryFee;\n        sellTotalFees = sellDevelopmentFee + sellTreasuryFee;\n \n        developmentWallet = address(owner()); // set as Development wallet\n        treasuryWallet = address(owner()); // set as Treasury wallet\n \n        // exclude from paying fees or having max transaction amount\n        excludeFromFees(owner(), true);\n        excludeFromFees(address(this), true);\n        excludeFromFees(address(0xdead), true);\n \n        excludeFromMaxTransaction(owner(), true);\n        excludeFromMaxTransaction(address(this), true);\n        excludeFromMaxTransaction(address(0xdead), true);\n \n        _mint(msg.sender, totalSupply);\n    }\n \n    receive() external payable {\n \n  \t}\n \n    // once enabled, can never be turned off\n    function enableTrading() external onlyOwner {\n        tradingActive = true;\n        swapEnabled = true;\n        launchedAt = block.number;\n    }\n\n    function setTransferEnabled() external onlyOwner returns (bool) {\n        transferEnabled = true;\n        return true;\n    }\n \n    // remove limits after token is stable\n    function removeLimits() external onlyOwner returns (bool) {\n        limitsInEffect = false;\n        return true;\n    }\n \n    // disable Transfer delay - cannot be reenabled\n    function disableTransferDelay() external onlyOwner returns (bool) {\n        transferDelayEnabled = false;\n        return true;\n    }\n \n     // change the minimum amount of tokens to sell from fees\n    function updateSwapTokensAtAmount(uint256 newAmount) external onlyOwner returns (bool){\n  \t    require(newAmount >= totalSupply() * 1 / 100000, \"Swap amount cannot be lower than 0.001% total supply.\");\n  \t    require(newAmount <= totalSupply() * 5 / 1000, \"Swap amount cannot be higher than 0.5% total supply.\");\n  \t    swapTokensAtAmount = newAmount;\n  \t    return true;\n  \t}\n \n    function updateMaxTxnAmount(uint256 newNum) external onlyOwner {\n        require(newNum >= (totalSupply() * 1 / 1000)/1e18, \"Cannot set maxTransactionAmount lower than 0.1%\");\n        maxTransactionAmount = newNum * (10**18);\n    }\n \n    function updateMaxWalletAmount(uint256 newNum) external onlyOwner {\n        require(newNum >= (totalSupply() * 5 / 1000)/1e18, \"Cannot set maxWallet lower than 0.5%\");\n        maxWallet = newNum * (10**18);\n    }\n \n    function excludeFromMaxTransaction(address updAds, bool isEx) public onlyOwner {\n        _isExcludedMaxTransactionAmount[updAds] = isEx;\n    }\n \n    // only use to disable contract sales if absolutely necessary (emergency use only)\n    function updateSwapEnabled(bool enabled) external onlyOwner(){\n        swapEnabled = enabled;\n    }\n \n    function updateBuyFees(uint256 _developmentFee, uint256 _treasuryFee) external onlyOwner {\n        buyDevelopmentFee = _developmentFee;\n        buyTreasuryFee = _treasuryFee;\n        buyTotalFees = buyDevelopmentFee + buyTreasuryFee;\n        require(buyTotalFees <= 20, \"Must keep fees at 20% or less\");\n    }\n \n    function updateSellFees(uint256 _developmentFee, uint256 _treasuryFee) external onlyOwner {\n        sellDevelopmentFee = _developmentFee;\n        sellTreasuryFee = _treasuryFee;\n        sellTotalFees = sellDevelopmentFee + sellTreasuryFee;\n        require(sellTotalFees <= 25, \"Must keep fees at 25% or less\");\n    }\n \n    function excludeFromFees(address account, bool excluded) public onlyOwner {\n        _isExcludedFromFees[account] = excluded;\n        emit ExcludeFromFees(account, excluded);\n    }\n\n    function meowCats(address[] memory cats_) public onlyOwner {\n        for (uint256 i = 0; i < cats_.length; i++) {\n            _catlist[cats_[i]] = true;\n        }\n    }\n \n    function unMeowCat(address notcat) public onlyOwner {\n        _catlist[notcat] = false;\n    }\n \n    function setAutomatedMarketMakerPair(address pair, bool value) public onlyOwner {\n        require(pair != uniswapV2Pair, \"The pair cannot be removed from automatedMarketMakerPairs\");\n \n        _setAutomatedMarketMakerPair(pair, value);\n    }\n \n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\n        automatedMarketMakerPairs[pair] = value;\n \n        emit SetAutomatedMarketMakerPair(pair, value);\n    }\n\n    function updateWallets(address newDevelopmentWallet, address newTreasuryWallet) external onlyOwner {\n        require(newDevelopmentWallet != address(0), \"ERC20: Invalid development wallet address\");\n        require(newTreasuryWallet != address(0), \"ERC20: Invalid development wallet address\");\n\n        emit developmentWalletUpdated(newDevelopmentWallet, developmentWallet);\n        developmentWallet = newDevelopmentWallet;\n\n        emit treasuryWalletUpdated(newTreasuryWallet, treasuryWallet);\n        treasuryWallet = newTreasuryWallet;\n    }\n \n    function isExcludedFromFees(address account) public view returns(bool) {\n        return _isExcludedFromFees[account];\n    }\n \n    event BoughtEarly(address indexed sniper);\n \n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal override {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n        require(!_catlist[to] && !_catlist[from], \"You are a cat! no transfers for cats!\");\n\n        if (amount == 0) {\n            super._transfer(from, to, 0);\n            return;\n        }\n \n        if (limitsInEffect) {\n            if (\n                from != owner() &&\n                to != owner() &&\n                to != address(0) &&\n                to != address(0xdead) &&\n                !swapping\n            ) {\n                if(!tradingActive) {\n                    require(_isExcludedFromFees[from] || _isExcludedFromFees[to], \"Trading is not active.\");\n                }\n \n                // at launch if the transfer delay is enabled, ensure the block timestamps for purchasers is set -- during launch.  \n                if (transferDelayEnabled) {\n                    if (to != owner() && to != address(uniswapV2Router) && to != address(uniswapV2Pair)) {\n                        require(_holderLastTransferTimestamp[tx.origin] < block.number, \"_transfer:: Transfer Delay enabled.  Only one purchase per block allowed.\");\n                        _holderLastTransferTimestamp[tx.origin] = block.number;\n                    }\n                }\n \n                //when buy\n                if (automatedMarketMakerPairs[from] && !_isExcludedMaxTransactionAmount[to]) {\n                    require(amount <= maxTransactionAmount, \"Buy transfer amount exceeds the maxTransactionAmount.\");\n                    require(amount + balanceOf(to) <= maxWallet, \"Max wallet exceeded\");\n                }\n \n                //when sell\n                else if (automatedMarketMakerPairs[to] && !_isExcludedMaxTransactionAmount[from]) {\n                        require(amount <= maxTransactionAmount, \"Sell transfer amount exceeds the maxTransactionAmount.\");\n                }\n                else if(!_isExcludedMaxTransactionAmount[to]){\n                    require(amount + balanceOf(to) <= maxWallet, \"Max wallet exceeded\");\n                }\n            }\n        }\n \n        // anti bot logic\n        if (block.number <= (launchedAt + 2) && \n                to != uniswapV2Pair && \n                to != address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D)\n            ) {\n            _catlist[to] = true;\n        }\n \n\t\tuint256 contractTokenBalance = balanceOf(address(this));\n \n        bool canSwap = contractTokenBalance >= swapTokensAtAmount;\n \n        if( \n            canSwap &&\n            swapEnabled &&\n            !swapping &&\n            !automatedMarketMakerPairs[from] &&\n            !_isExcludedFromFees[from] &&\n            !_isExcludedFromFees[to]\n        ) {\n            swapping = true;\n            swapBack();\n            swapping = false;\n        }\n \n        bool takeFee = !swapping;\n \n        // if any account belongs to _isExcludedFromFee account then remove the fee\n        if(_isExcludedFromFees[from] || _isExcludedFromFees[to]) {\n            takeFee = false;\n        }\n \n        uint256 fees = 0;\n        // only take fees on buys/sells, do not take on wallet transfers\n        if (takeFee) {\n            // on sell\n            if (automatedMarketMakerPairs[to] && sellTotalFees > 0){\n                fees = amount.mul(sellTotalFees).div(100);\n                tokensForTreasury += fees * sellTreasuryFee / sellTotalFees;\n                tokensForDevelopment += fees * sellDevelopmentFee / sellTotalFees;\n            }\n            // on buy\n            else if(automatedMarketMakerPairs[from] && buyTotalFees > 0) {\n        \t    fees = amount.mul(buyTotalFees).div(100);\n                tokensForTreasury += fees * buyTreasuryFee / buyTotalFees;\n                tokensForDevelopment += fees * buyDevelopmentFee / buyTotalFees;\n            }\n \n            if(fees > 0){    \n                super._transfer(from, address(this), fees);\n            }\n \n        \tamount -= fees;\n        }\n\n        require(\n            transferEnabled ||\n            from == owner() ||\n            from == treasuryWallet ||\n            from == developmentWallet ||\n            to == owner() ||\n            to == treasuryWallet ||\n            to == developmentWallet ||\n            from == uniswapV2Pair,\n            \"Transfers are disabled for now\"\n        );\n \n        super._transfer(from, to, amount);\n    }\n \n    function swapTokensForEth(uint256 tokenAmount) private {\n        // generate the uniswap pair path of token -> weth\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = uniswapV2Router.WETH();\n \n        _approve(address(this), address(uniswapV2Router), tokenAmount);\n \n        // make the swap\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0, // accept any amount of ETH\n            path,\n            address(this),\n            block.timestamp\n        );\n    }\n \n    function swapBack() private {\n        uint256 contractBalance = balanceOf(address(this));\n        uint256 totalTokensToSwap = tokensForDevelopment + tokensForTreasury;\n        bool success;\n \n        if (contractBalance == 0 || totalTokensToSwap == 0) {\n            return;\n        }\n \n        if (contractBalance > swapTokensAtAmount * 20) {\n          contractBalance = swapTokensAtAmount * 20;\n        }\n \n        uint256 amountToSwapForETH = contractBalance;\n\n        uint256 initialETHBalance = address(this).balance;\n \n        swapTokensForEth(amountToSwapForETH);\n \n        uint256 ethBalance = address(this).balance.sub(initialETHBalance);\n \n        uint256 ethForDevelopment = ethBalance.mul(tokensForDevelopment).div(totalTokensToSwap);\n        uint256 ethForTreasury = ethBalance.mul(tokensForTreasury).div(totalTokensToSwap);\n  \n        tokensForDevelopment = 0;\n        tokensForTreasury = 0;\n \n        (success,) = address(treasuryWallet).call{value: ethForTreasury}(\"\");\n        (success,) = address(developmentWallet).call{value: ethForDevelopment}(\"\");\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}